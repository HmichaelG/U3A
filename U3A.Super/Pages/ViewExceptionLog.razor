@page "/ViewExceptionLog"

@using System.Web
@using U3A.UI.Common.Pages.Shared

@inject IDbContextFactory<TenantDbContext> tenantDbfactory
@inject IJSRuntime js
@inject NavigationManager navMan
@inject LocalTime lt

@attribute [Authorize]

<PageTitle>View Exception Log</PageTitle>

<MessageBox @ref="@messageBox" PopupWidth="50rem" />

@if (isReady)
{
    @if (logId != null)
    {
        <ExceptionLogPage Id="@logId"
                          OnFinished="@(async() =>
                                                                    {
                                                                        logId = null;
                                                                        StateHasChanged();
                                                                    })" />
    }
    else
    {

        <div class="w-100 px-4">
            <h2>Exceptions</h2>
            <div class="pb-2">
                <FullScreen DisplayOffset="10" HideToggle="true">
                    <ContentTemplate>
                        <DxGrid id="my-grid" @ref="grid" Data="@exceptions"
                                AutoExpandAllGroupRows="true"
                                DataItemDeleting="Grid_DataItemDeleting"
                                ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                                VirtualScrollingEnabled="true"
                                ShowSearchBox="true"
                                ShowFilterRow="false"
                                ShowAllRows="true"
                                KeyFieldName="Id"
                                SelectionMode="GridSelectionMode.Single"
                                SelectedDataItem="selectedLog"
                                ValidationEnabled="true">
                            <ToolbarTemplate>
                                <GridToolbar LinkedGrid=@grid>
                                    <CustomButtonContent>
                                        <DxToolbarItem IconCssClass="bi bi-envelope" Text="Show All"
                                                       BeginGroup=true
                                                       Click=@OnShowAllToggle
                                                       RenderStyle="ButtonRenderStyle.Info"
                                                       RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                                       Alignment="ToolbarItemAlignment.Right"
                                                       Tooltip="Show/hide non-tenant exceptions" />
                                        <DxToolbarItem IconCssClass="bi bi-trash" Text="Delete All"
                                                       BeginGroup=true
                                                       Click=@OnDeleteAll
                                                       RenderStyle="ButtonRenderStyle.Primary"
                                                       RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                                       Alignment="ToolbarItemAlignment.Right"
                                                       Tooltip="Delete all exceptions" />
                                    </CustomButtonContent>
                                </GridToolbar>
                            </ToolbarTemplate>
                            <Columns>
                                <DxGridCommandColumnEx Width="10rem" EditButtonVisible="false" DeleteButtonVisible="true" />
                                <DxGridDataColumn Width="5rem" Caption="Date" FieldName="TimeStamp"
                                                  SortOrder="GridColumnSortOrder.Descending" GroupIndex="0" SortMode="GridColumnSortMode.Value">
                                    <CellDisplayTemplate>
                                        <div>@(GetLocalTime((DateTime)context.Value).ToShortDateString()) </div>
                                    </CellDisplayTemplate>
                                </DxGridDataColumn>
                                <DxGridDataColumn Width="5rem" Caption="Time" FieldName="TimeStamp" SortIndex="1" SortMode="GridColumnSortMode.Value">
                                    <CellDisplayTemplate>
                                        <div>@(GetLocalTime((DateTime)context.Value).ToShortTimeString()) </div>
                                    </CellDisplayTemplate>
                                </DxGridDataColumn>
                                <DxGridDataColumn Width="10rem" FieldName="Tenant" />
                                <DxGridDataColumn Width="10rem" FieldName="User" />
                                <DxGridDataColumn FieldName="Message" />
                                <DxGridDataColumn Width="8rem" FieldName="Exception" Caption="Exception Detail" AllowGroup="false" FixedPosition="GridColumnFixedPosition.Right">
                                    <CellDisplayTemplate>
                                        <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" CssClass="w-100"
                                                  RenderStyle="ButtonRenderStyle.Primary" Text=@("Event Details")
                                                  Click="() => OnLogButtonClick((LogEvents)context.DataItem)"></DxButton>
                                    </CellDisplayTemplate>
                                </DxGridDataColumn>
                            </Columns>

                            <TotalSummary>
                                <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Date" FooterColumnName="Date" />
                            </TotalSummary>

                        </DxGrid>
                    </ContentTemplate>
                </FullScreen>
            </div>
        </div>
    }
}

<style>
    .text-size {
        font-size: 1rem;
    }
</style>

@code {
    List<LogEvents>? exceptions { get; set; }
    DxGrid? grid;
    MessageBox? messageBox;
    bool isReady;
    bool showAll = false;
    int? logId = null;
    LogEvents? selectedLog;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        await GetData();
        isReady = true;
    }

    DateTime GetLocalTime(DateTime value)
    {
        var result = value + lt.UtcOffset;
        return result;
    }

    async Task OnShowAllToggle()
    {
        showAll = !showAll;
        await GetData();

    }

    async Task OnDeleteAll()
    {
        if (await messageBox!.ShowAsync("Delete all logs", "Do you really want to delete all logs?"))
        {
            using (var dbc = await tenantDbfactory.CreateDbContextAsync())
            {
                await dbc.Database.ExecuteSqlAsync($"TRUNCATE TABLE LogEvents");
            }
            await GetData();
        }
    }

    void OnLogButtonClick(LogEvents log)
    {
        logId = log.Id;
        selectedLog = log;
        StateHasChanged();
    }

    async Task GetData()
    {
        using (var dbc = await tenantDbfactory.CreateDbContextAsync())
        {
            exceptions = await dbc.LogEvents.OrderByDescending(x => x.TimeStamp)
                        .Select(x => new LogEvents
                        {
                            Id = x.Id,
                            Tenant = x.Tenant,
                            User = x.User,
                            TimeStamp = x.TimeStamp,
                            Message = x.Message
                        }).ToListAsync();
            if (!showAll) { exceptions = exceptions.Where(x => !string.IsNullOrWhiteSpace(x.Tenant)).ToList(); }
        }
        selectedLog = null;
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        using (var dbc = await tenantDbfactory.CreateDbContextAsync())
        {
            dbc.Remove((LogEvents)e.DataItem);
            await dbc.SaveChangesAsync();
            grid!.ClearSelection();
            await GetData();
        }
    }

}