@page "/ViewExceptionLog"

@using System.Web
@using U3A.UI.Common.Pages.Shared

@inject IDbContextFactory<TenantDbContext> tenantDbfactory
@inject IJSRuntime js
@inject NavigationManager navMan
@inject LocalTime lt

@attribute [Authorize]

<PageTitle>Tenant Summary</PageTitle>

<MessageBox @ref="@messageBox" PopupWidth="50rem" />

@if (isReady)
{
    <div class="w-100 px-4">
        <h2>Exceptions</h2>
        <div class="pb-2">
            <FullScreen DisplayOffset="12" HideToggle="true">
                <ContentTemplate>
                    <DxGrid @ref="grid" Data="@exceptions"
                            DataItemDeleting="Grid_DataItemDeleting"
                            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                            VirtualScrollingEnabled="true"
                            ShowSearchBox="true"
                            ShowFilterRow="false"
                            ShowAllRows="true"
                            KeyFieldName="Id"
                            ValidationEnabled="true">
                        <ToolbarTemplate>
                            <GridToolbar LinkedGrid=@grid>
                                <CustomButtonContent>
                                    <DxToolbarItem IconCssClass="bi bi-envelope" Text="Show All"
                                                   BeginGroup=true
                                                   Click=@OnShowAllToggle
                                                   RenderStyle="ButtonRenderStyle.Primary"
                                                   RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                                   Alignment="ToolbarItemAlignment.Right"
                                                   Tooltip="Show/hide non-tenant exceptions">
                                    </DxToolbarItem>
                                </CustomButtonContent>
                            </GridToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridCommandColumnEx Width="10rem" EditButtonVisible="false" DeleteButtonVisible="true" />
                            <DxGridDataColumn Width="10rem" Caption="Date" FieldName="TimeStamp"  >
                                <CellDisplayTemplate>
                                    <div>@(GetLocalTime((DateTime)context.Value)) </div>
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                            <DxGridDataColumn Width="10rem" FieldName="Tenant" />
                            <DxGridDataColumn Width="10rem" FieldName="User" />
                            <DxGridDataColumn FieldName="Message" />
                            <DxGridDataColumn Width="8rem" FieldName="Exception" Caption="Exception Detail" AllowGroup="false" FixedPosition="GridColumnFixedPosition.Right">
                                <CellDisplayTemplate>
                                    <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" CssClass="w-100"
                                              RenderStyle="ButtonRenderStyle.Primary" Text=@("Event Details")
                                              Click="() => OnLogButtonClick((LogEvents)context.DataItem)"></DxButton>
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                        </Columns>

                        <TotalSummary>
                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Date" FooterColumnName="Date" />
                        </TotalSummary>

                    </DxGrid>
                </ContentTemplate>
            </FullScreen>
        </div>
    </div>
}

<style>
    .text-size {
        font-size: 1rem;
    }
</style>

@code {
    List<LogEvents>? exceptions { get; set; }
    bool PanelVisible;
    DxGrid? grid;
    MessageBox? messageBox;
    bool isReady;
    bool showAll = false;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        await GetData();
        isReady = true;
    }

    DateTime GetLocalTime(DateTime value) {
        var result = value + lt.UtcOffset;
        return result;
    }

    async Task OnShowAllToggle()
    {
        showAll = !showAll;
        await GetData();

    }

    async Task OnLogButtonClick(LogEvents log)
    {
        await messageBox!.ShowOkOnlyAsync("Exception Details", log.Exception!);
    }

    async Task GetData()
    {
        using (var dbc = await tenantDbfactory.CreateDbContextAsync())
        {
            exceptions = await dbc.LogEvents.OrderByDescending(x => x.TimeStamp).ToListAsync();
            if (!showAll) { exceptions = exceptions.Where(x => !string.IsNullOrWhiteSpace(x.Tenant)).ToList(); }
        }
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        using (var dbc = await tenantDbfactory.CreateDbContextAsync())
        {
            dbc.Remove((LogEvents)e.DataItem);
            await dbc.SaveChangesAsync();
            grid!.ClearSelection();
            await GetData();
        }
    }

}