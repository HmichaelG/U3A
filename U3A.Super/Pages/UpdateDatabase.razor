@page "/DatabaseUpdate"

<PageTitle>Update Database Schema</PageTitle>

@attribute [Authorize(Roles = "U3Admin.Administer")]

@inject NavigationManager NavMan
@inject IDbContextFactory<TenantDbContext> Tenantdbfactory
@inject IConfiguration config
@inject IJSRuntime js

@using U3A.Data

<div class="page-width">
    <h2 class="pb-2">Update Database Schema</h2>
    <div class="alert alert-info col-md-8">
        <div class="d-flex form-inline">
            <div class="form-control text-info">@(new MarkupString("This procedure will update database schema for all tenants. Are you sure?"))</div>
            <button type="button" class="btn btn-success" @onclick="DoUpdate">Yes</button>
            <button type="button" class="btn btn-light" @onclick="DoCancel">No</button>
        </div>
    </div>
    <ul class="my-2 col-12">
        @(new MarkupString(result))
    </ul>
    <h4>@(new MarkupString(msgComplete))</h4>
</div>
<style>
    .page-width {
        max-width: 1200px;
    }

</style>


@code {

    List<TenantInfo>? tenantInfo { get; set; }
    string result = string.Empty;
    string msgComplete = string.Empty;

    async Task DoUpdate()
    {
        result = string.Empty;
        msgComplete = string.Empty;
        using (var dbT = await Tenantdbfactory.CreateDbContextAsync())
        {
            await dbT.Database.MigrateAsync();
            result += $"<li>Database schema for [Tenant] has been updated</li>";
            tenantInfo = await dbT.TenantInfo.OrderBy(x => x.Identifier).ToListAsync();
        }
        foreach (var tenant in tenantInfo)
        {
            using (var dbc = new U3ADbContextSeed())
            {
                dbc.TenantInfo = tenant;
                await dbc.Database.MigrateAsync();
                await CreateSuperUser(dbc);
                await ApplyFix(dbc);
                result += $"<li>Database schema for [{tenant.Identifier}] has been updated</li>";
                await InvokeAsync(StateHasChanged);
            }
        }
        msgComplete = "Schema Update Complete";
    }

    async Task CreateSuperUser(U3ADbContextSeed dbc)
    {
        string SecurityAdminID = string.Empty;
        foreach (var name in constants.nameOfRoles)
        {
            if (!await dbc.Roles.AnyAsync(x => x.Name == name))
            {
                IdentityRole role = new()
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = name,
                    NormalizedName = name.ToUpper(),
                    ConcurrencyStamp = Guid.NewGuid().ToString(),
                };
                await dbc.Roles.AddAsync(role);
            }
        }

        if (!await dbc.Users.AnyAsync(x => x.Email == constants.superAdmin))
        {
            ApplicationUser user = new()
            {
                Id = Guid.NewGuid().ToString(),
                ConcurrencyStamp = Guid.NewGuid().ToString(),
                Email = constants.superAdmin,
                EmailConfirmed = true,
                NormalizedEmail = constants.superAdmin.ToUpper(),
                NormalizedUserName = constants.superAdmin.ToUpper(),
                PasswordHash = "AQAAAAEAACcQAAAAEGO9hnvP8x8fJPlDhs2gGYMhl9koCigXL2PPHidC9luB5nbMxW8fCFahxG/ZCA1OSw==",
                UserName = constants.superAdmin,
            };
            await dbc.Users.AddAsync(user);
            SecurityAdminID = (await dbc.Roles.FirstAsync(r => r.Name == constants.nameOfRoles[0])).Id;
            IdentityUserRole<string> userRole = new()
            {

                RoleId = SecurityAdminID,
                UserId = user.Id
            };
            await dbc.UserRoles.AddAsync(userRole);
        }
        await dbc.SaveChangesAsync();
    }

    List<Term> terms = new();
    List<Class> classes = new();
    List<string> keys = new();
    async Task ApplyFix(U3ADbContextSeed dbc)
    {
        terms = await dbc.Term.ToListAsync();
        keys = await dbc.LeaderHistory.Select(x => $"{x.PersonID}_{x.TermID}_{x.ClassID}").ToListAsync();
        // Leaders History
        classes = await dbc.Class
                            .Include(x => x.OnDay)
                            .Include(x => x.Occurrence)
                            .Include(x => x.Course)
                            .Include(x => x.Leader)
                            .Include(x => x.Leader2)
                            .Include(x => x.Leader3)
                            .Where(x => !x.Course.IsOffScheduleActivity)
                            .ToListAsync();
        foreach (var c in classes)
        {
            if (c.OfferedTerm1)
            {
                if (c.Leader != null) { await AddLeaderHistory(dbc, c, 1, c.Leader); }
                if (c.Leader2 != null) { await AddLeaderHistory(dbc, c, 1, c.Leader2); }
                if (c.Leader3 != null) { await AddLeaderHistory(dbc, c, 1, c.Leader3); }
            }
            if (c.OfferedTerm2)
            {
                if (c.Leader != null) { await AddLeaderHistory(dbc, c, 2, c.Leader); }
                if (c.Leader2 != null) { await AddLeaderHistory(dbc, c, 2, c.Leader2); }
                if (c.Leader3 != null) { await AddLeaderHistory(dbc, c, 2, c.Leader3); }
            }
            if (c.OfferedTerm3)
            {
                if (c.Leader != null) { await AddLeaderHistory(dbc, c, 3, c.Leader); }
                if (c.Leader2 != null) { await AddLeaderHistory(dbc, c, 3, c.Leader2); }
                if (c.Leader3 != null) { await AddLeaderHistory(dbc, c, 3, c.Leader3); }
            }
            if (c.OfferedTerm4)
            {
                if (c.Leader != null) { await AddLeaderHistory(dbc, c, 4, c.Leader); }
                if (c.Leader2 != null) { await AddLeaderHistory(dbc, c, 4, c.Leader2); }
                if (c.Leader3 != null) { await AddLeaderHistory(dbc, c, 4, c.Leader3); }
            }
        }
        //Clerks History
        var enrolments = await dbc.Enrolment
            .Include(x => x.Course)
            .Include(x => x.Class).ThenInclude(x => x.OnDay)
            .Include(x => x.Class).ThenInclude(x => x.Occurrence)
            .Include(x => x.Person)
            .Where(x => x.IsCourseClerk && !x.Course.IsOffScheduleActivity)
            .ToListAsync();
        foreach (var e in enrolments)
        {
            if (e.Class == null)
            {
                var CourseClasses = classes.Where(x => x.CourseID == e.CourseID).ToList();
                if (CourseClasses.Count == 1) { e.Class = CourseClasses.First(); e.ClassID = e.Class.ID; }
            }
            var key = $"{e.PersonID}_{e.TermID}_{(e.ClassID == null ? Guid.Empty : e.ClassID)}";
            if (keys.Contains(key)) { continue; }
            keys.Add(key);
            LeaderHistory history = new()
            {
                ID = Guid.NewGuid(),
                PersonID = e.PersonID,
                Person = e.Person,
                Year = e.Term.Year,
                Term = e.Term.TermNumber,
                ClassID = (e.ClassID.HasValue) ? e.ClassID.Value : Guid.Empty,
                Course = e.Course.Name,
                Class = (e.Class is not null) ? e.Class.OccurrenceTextBrief : "All classes",
                TermID = e.TermID,
                Type = LeaderType.Clerk,
            };
            await dbc.LeaderHistory.AddAsync(history);
        }
        await dbc.SaveChangesAsync();
    }

    async Task AddLeaderHistory(U3ADbContextSeed dbc, Class c, int termNumber, Person person)
    {
        Term term = terms!.FirstOrDefault(x => x.Year == c.Course.Year && x.TermNumber == termNumber);
        if (term == null) { return; }
        Term currentTerm = terms.FirstOrDefault(x => x.IsDefaultTerm);
        if (term.Comparer > currentTerm.Comparer) { return; }
        var key = $"{person.ID}_{term.ID}_{c.ID}";
        if (keys.Contains(key)) { return; }
        keys.Add(key);
        LeaderHistory history = new()
        {
            ID = Guid.NewGuid(),
            PersonID = person.ID,
            Person = person,
            Year = term.Year,
            Term = term.TermNumber,
            ClassID = c.ID,
            Course = c.Course.Name,
            Class = c.OccurrenceTextBrief,
            TermID = term.ID,
            Type = LeaderType.Leader,
        };
        await dbc.LeaderHistory.AddAsync(history);
    }

    void DoCancel() { NavMan.NavigateTo("/"); }

}
