@page "/DatabaseUpdate"

<PageTitle>Update Database Schema</PageTitle>

@attribute [Authorize(Roles = "U3Admin.Administer")]

@inject NavigationManager NavMan
@inject IDbContextFactory<TenantDbContext> Tenantdbfactory
@inject IConfiguration config
@inject IJSRuntime js

@using U3A.Data

<div class="page-width">
    <h2 class="pb-2">Update Database Schema</h2>
    <div class="alert alert-info col-md-8">
        <div class="d-flex form-inline">
            <div class="form-control text-info">@(new MarkupString("This procedure will update database schema for all tenants. Are you sure?"))</div>
            <button type="button" class="btn btn-success" @onclick="DoUpdate">Yes</button>
            <button type="button" class="btn btn-light" @onclick="DoCancel">No</button>
        </div>
    </div>
    <ul class="my-2 col-12">
        @(new MarkupString(result))
    </ul>
    <h4>@(new MarkupString(msgComplete))</h4>
</div>
<style>
    .page-width {
        max-width: 1200px;
    }

</style>


@code {

    List<TenantInfo>? tenantInfo { get; set; }
    string result = string.Empty;
    string msgComplete = string.Empty;

    async Task DoUpdate()
    {
        result = string.Empty;
        msgComplete = string.Empty;
        using (var dbT = await Tenantdbfactory.CreateDbContextAsync())
        {
            await dbT.Database.MigrateAsync();
            result += $"<li>Database schema for [Tenant] has been updated</li>";
            tenantInfo = await dbT.TenantInfo.OrderBy(x => x.Identifier).ToListAsync();
        }
        foreach (var tenant in tenantInfo)
        {
            using (var dbc = new U3ADbContextSeed())
            {
                dbc.TenantInfo = tenant;
                await dbc.Database.MigrateAsync();
                await CreateSuperUser(dbc);
                await ApplyFix(dbc);
                result += $"<li>Database schema for [{tenant.Identifier}] has been updated</li>";
                await InvokeAsync(StateHasChanged);
            }
        }
        msgComplete = "Schema Update Complete";
    }

    async Task CreateSuperUser(U3ADbContextSeed dbc)
    {
        string SecurityAdminID = string.Empty;
        foreach (var name in constants.nameOfRoles)
        {
            if (!await dbc.Roles.AnyAsync(x => x.Name == name))
            {
                IdentityRole role = new()
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = name,
                    NormalizedName = name.ToUpper(),
                    ConcurrencyStamp = Guid.NewGuid().ToString(),
                };
                await dbc.Roles.AddAsync(role);
            }
        }

        if (!await dbc.Users.AnyAsync(x => x.Email == constants.superAdmin))
        {
            ApplicationUser user = new()
            {
                Id = Guid.NewGuid().ToString(),
                ConcurrencyStamp = Guid.NewGuid().ToString(),
                Email = constants.superAdmin,
                EmailConfirmed = true,
                NormalizedEmail = constants.superAdmin.ToUpper(),
                NormalizedUserName = constants.superAdmin.ToUpper(),
                PasswordHash = "AQAAAAEAACcQAAAAEGO9hnvP8x8fJPlDhs2gGYMhl9koCigXL2PPHidC9luB5nbMxW8fCFahxG/ZCA1OSw==",
                UserName = constants.superAdmin,
            };
            await dbc.Users.AddAsync(user);
            SecurityAdminID = (await dbc.Roles.FirstAsync(r => r.Name == constants.nameOfRoles[0])).Id;
            IdentityUserRole<string> userRole = new()
            {

                RoleId = SecurityAdminID,
                UserId = user.Id
            };
            await dbc.UserRoles.AddAsync(userRole);
        }
        await dbc.SaveChangesAsync();
    }

    async Task ApplyFix(U3ADbContextSeed dbc)
    {
        // Apply any specific fixes needed for the database schema here.
        await dbc.Database.ExecuteSqlRawAsync(
            @"update SystemSettings
                set MerchantFeeFixed = 0.25,
	                MerchantFeePercentage = 1.50
                where MerchantFeeFixed = 0 and MerchantFeePercentage = 0
"
        );
    }


    void DoCancel() { NavMan.NavigateTo("/"); }

}
