@page "/DoTenantSummary"

@using System.Web
@using U3A.UI.Common.Pages.Shared

@inject IDbContextFactory<TenantDbContext> tenantDbfactory
@inject IJSRuntime js
@inject NavigationManager navMan
@inject LocalTime lt

@attribute [Authorize]

<PageTitle>Tenant Summary</PageTitle>

@if (IsReady)
{
    <DxLoadingPanel @bind-Visible="PanelVisible"
                    IsContentBlocked="true"
                    ApplyBackgroundShading="true"
                    IndicatorAreaVisible="false"
                    Text="Fetching Data...">

        <div class="w-100 px-4">
            <h2 class="pb-2">Tenant Summary</h2>
            <p class="pb-2">
                Note: U3A Tenants in <em>Postmark Sandbox</em> are considered demonstration tenants only.
            </p>
            <div class="pb-2">
                <DxGrid @ref="grid" Data="@tenantInfo"
                        @bind-SelectedDataItems="@selectedItems"
                        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                        UnboundColumnData="GetUnboundColumnData"
                        VirtualScrollingEnabled="true"
                        ShowSearchBox="true"
                        ShowFilterRow="false"
                        ShowAllRows="true"
                        KeyFieldName="Id"
                        ValidationEnabled="true">
                    <ToolbarTemplate>
                        <GridToolbar LinkedGrid=@grid>
                            <CustomButtonContent>
                                <DxToolbarItem Context="a" BeginGroup="true" Alignment="ToolbarItemAlignment.Right">
                                    <Template>
                                        <div class="d-flex">
                                            <div class="flex-grow-0 pt-1 pe-2 text-accent fw-bold">From:</div>
                                            <DxDateEdit @bind-Date=@startDate CssClass="flex-grow-1" />
                                        </div>
                                    </Template>
                                </DxToolbarItem>
                                <DxToolbarItem Context="a" Alignment="ToolbarItemAlignment.Right">
                                    <Template>
                                        <div class="d-flex">
                                            <div class="flex-grow-0 pt-1 px-2 text-accent fw-bold">To:</div>
                                            <DxDateEdit @bind-Date=@endDate CssClass="flex-grow-1" />
                                        </div>
                                    </Template>
                                </DxToolbarItem>
                                <DxToolbarItem Text="Show Email"
                                               Click=@ShowEmail
                                               RenderStyle="ButtonRenderStyle.Primary"
                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                               Alignment="ToolbarItemAlignment.Right"
                                               Tooltip="Show email statistics for the period">
                                </DxToolbarItem>
                                <DxToolbarItem Text="Send Email"
                                               BeginGroup=true
                                               Click=@OnSendEmail
                                               RenderStyle="ButtonRenderStyle.Success"
                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                               Alignment="ToolbarItemAlignment.Right"
                                               Enabled="@(selectedItems != null)"
                                               Tooltip="Send email and/or SMS to participants">
                                </DxToolbarItem>
                            </CustomButtonContent>
                        </GridToolbar>
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridSelectionColumn AllowSelectAll="true" Width="4rem" />
                        <DxGridDataColumn Width="8rem" Caption="Tenant ID" AllowGroup="false">
                            <CellDisplayTemplate>
                                <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" CssClass="w-100"
                                          RenderStyle="ButtonRenderStyle.Primary" Text="@(((TenantInfo)context.DataItem).Identifier)"
                                          Click="() => OnNavigate(context.DataItem)"></DxButton>
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn Caption="Display Name" FieldName="Name" />
                        <DxGridDataColumn Caption="Website">
                            <CellDisplayTemplate>
                                <a href="@(((TenantInfo)context.DataItem).Website)">Website</a>
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn Caption="Multi-Campus?" FieldName="EnableMultiCampusExtension" />
                        <DxGridDataColumn Caption="EWAY Enabled" FieldName="EwayEnabled"
                                          UnboundType=GridUnboundColumnType.Boolean
                                          UnboundExpression="[UseEwayTestEnviroment] = 0" />
                        <DxGridDataColumn Caption="Postmark Enabled" FieldName="PostmarkEnabled"
                                          UnboundType=GridUnboundColumnType.Boolean
                                          UnboundExpression="[UsePostmarkTestEnviroment] = 0 && [PostmarkAPIKey] != null" />
                        <DxGridDataColumn Caption="Postmark Sandbox" FieldName="IsUsingPostmarkSandbox"
                                          UnboundType=GridUnboundColumnType.Boolean />
                        <DxGridDataColumn Caption="T1 Enrol Start" FieldName="Term1EnrolStart" DisplayFormat="ddd, dd-MMM-yyyy"
                                          UnboundType=GridUnboundColumnType.Integer Width="8rem" />
                        <DxGridDataColumn Caption=@($"Financial To {Year}") FieldName="FinancialMembers"
                                          UnboundType=GridUnboundColumnType.Integer Width="8rem" />
                        <DxGridDataColumn Caption="Email Sent" FieldName="EmailStatistics" Visible="@showPostmark"
                                          UnboundType=GridUnboundColumnType.Integer Width="8rem" />
                    </Columns>

                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="FinancialMembers" FooterColumnName="FinancialMembers" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="EmailStatistics" FooterColumnName="EmailStatistics" />
                    </TotalSummary>

                </DxGrid>
            </div>
        </div>
    </DxLoadingPanel>
}
<style>
    .page-width {
        max-width: 1200px;
    }

    .button-width {
        width: 100%;
    }

</style>

@code {
    IReadOnlyList<object>? selectedItems;
    List<TenantInfo>? tenantInfo { get; set; }
    Dictionary<string, int?> financialMembers = new();
    Dictionary<string, PostmarkOutboundOverviewStats> EmailStats = new();
    bool showPostmark;
    bool PanelVisible;
    DateTime startDate;
    DateTime endDate;
    DxGrid? grid;
    Dictionary<string, DateTime?> Term1EnrolmentStart { get; set; } = new();
    bool IsReady = false;
    int Year;

    protected override async Task OnInitializedAsync()
    {

        // wire up the data
        using (var dbc = await tenantDbfactory.CreateDbContextAsync())
        {
            try
            {
                tenantInfo = dbc.TenantInfo.AsEnumerable()
                            .OrderBy(x => x.IsUsingPostmarkSandbox)
                            .ThenBy(x => x.Identifier).ToList();
            }
            catch (Exception)
            {
                navMan.NavigateTo("/DatabaseUpdate");
            }
        }
        foreach (var tenant in tenantInfo!.Where(x => !x.UsePostmarkTestEnviroment))
        {
            using (var dbc = new U3ADbContext(tenant))
            {
                try
                {
                    var finMembers = dbc.Person.Count(x => x.FinancialTo >= DateTime.Today.Year);
                    financialMembers.Add(tenant.Id!, finMembers);
                    var lastTerm1 = await dbc.Term.OrderByDescending(x => x.Year)
                                            .ThenBy(x => x.TermNumber).FirstOrDefaultAsync();

                    if (lastTerm1 is not null)
                    {
                        Term1EnrolmentStart.Add(tenant.Id!, lastTerm1.EnrolmentStartDate);
                    }
                    else Term1EnrolmentStart.Add(tenant.Id!, null);
                }
                catch (Exception) { }
            }
        }
        IsReady = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var today = (await lt.GetLocalDateAsync());
            Year = today.Year;
            startDate = today.AddMonths((-today.Month) + 1).AddDays((-today.Day) + 1);
            endDate = today.AddDays(-today.Day);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void GetUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        var tenant = (TenantInfo)e.DataItem;
        if (e.FieldName == "FinancialMembers")
        {
            int? result = 0;
            if (financialMembers.TryGetValue(tenant.Id!, out result)) e.Value = result;
        }
        if (e.FieldName == "EmailStatistics")
        {
            PostmarkOutboundOverviewStats? result = default;
            if (EmailStats.TryGetValue(tenant.Id!, out result)) e.Value = result.Sent;
        }
        if (e.FieldName == "Term1EnrolStart")
        {
            DateTime? result = default;
            if (Term1EnrolmentStart.TryGetValue(tenant.Id!, out result)) e.Value = result;
        }

    }

    async Task ShowEmail()
    {
        showPostmark = true;
        EmailStats = new();
        PanelVisible = true;
        PostmarkClient? client = default;
        foreach (TenantInfo tenant in tenantInfo!.Where(x => !x.UsePostmarkTestEnviroment))
        {
            var UsePostmarkTestEnvironment = tenant.UsePostmarkTestEnviroment;
            if (UsePostmarkTestEnvironment && tenant.PostmarkSandboxAPIKey != null)
            {
                client = new PostmarkClient(tenant.PostmarkSandboxAPIKey);
            }
            else if (tenant.PostmarkAPIKey != null) { client = new PostmarkClient(tenant.PostmarkAPIKey); }
            if (client != null)
            {
                await GetEmailStatisticsAsync(tenant, client);
            }
        }
        grid.RefreshSummary();
        PanelVisible = false;
    }

    public async Task GetEmailStatisticsAsync(TenantInfo tenant, PostmarkClient client)
    {
        PostmarkOutboundOverviewStats stats;
        stats = await client.GetOutboundOverviewStatsAsync(null, startDate, endDate);
        EmailStats.Add(tenant.Id, stats);
    }

    public async Task OnSendEmail()
    {
        string mailto = $"mailto:?subject=U3Admin: Today's update&bcc=";
        foreach (TenantInfo tenant in selectedItems!)
        {
            using (var dbc = new U3ADbContext(tenant))
            {
                var settings = await dbc.SystemSettings.OrderBy(s => s.ID).FirstOrDefaultAsync();
                var recipients = settings!.U3AdminEmailRecipients.Trim();
                if (!recipients.EndsWith("\n")) { recipients.Concat("\n"); }
                var addresses = recipients.Split("\n");
                List<string> cleansedAddresses = new();
                foreach (var a in addresses)
                {
                    if (!string.IsNullOrWhiteSpace(a)) { cleansedAddresses.Add(a.Trim()); }
                }
                var max = cleansedAddresses.Take(5);
                mailto += $"{string.Join(";", max)};".Trim();
            }
        }
        navMan.NavigateTo(HttpUtility.UrlDecode(mailto.Remove(mailto.Length - 1)));
    }

    void OnNavigate(object tenant)
    {
        if (tenant != null)
        {
            navMan.NavigateTo($"https://{((TenantInfo)tenant).Identifier}.u3admin.org.au", true);
        }
        ;
    }

}