@page "/"

<PageTitle>U3Amin Administration</PageTitle>

@using Microsoft.AspNetCore.Components.Server.Circuits

@using System.IO
@using System.Web
@using System.Text
@using System.Collections.ObjectModel

@inject NavigationManager navMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject CircuitHandler circuitHandler
@inject LocalTime localTime

@if (@homePage == "")
{
    <LoadingIndicator />
}
else
{

    <MessageBox @ref="@messageBox" />
    <DxFormLayout CssClass="px-2">
        @if (!hasRole)
        {
            <U3A.UI.Forms.Pages.MembersPortal.MemberPortal />
        }
        else
        {
            <div class="input-group align-items-center mt-2 d-print-none">
                <div class="flex-grow-1 text-start me-2" ondblclick=@(() => OnCircuitClick())>@($"{openCircuits} users logged in at {now}.")</div>
                <ContextHelpTitle Title=@($"Ver: {GetAssemblyVersion()}")
                                  ButtonIconCssClass="bi bi-check2-circle"
                                  HelpTopic="2024-Version-History.html"
                                  ActivationStyle="@HelpActivationStyle.ButtonOnly" />
                <ContextHelpTitle Title="help"
                                  ButtonIconCssClass="bi bi-question"
                                  HelpTopic="Introduction.html"
                                  IncludeTableOfContents=true
                                  ActivationStyle="@HelpActivationStyle.ButtonOnlyNoMessges" />
                <DxButton Text="Support"
                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                          SizeMode="SizeMode.Large"
                          NavigateUrl="Public/Support"
                          CssClass="bi bi-person" />
            </div>
            <DxTabs CssClass="vw-100">
                <DxTabPage Text="Member Summary">
                    <GeneralSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Cash Receipts">
                    <ReceiptSummaryChart />
                </DxTabPage>
                <DxTabPage Text="New Members">
                    <NewMemberSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Enrolments">
                    <EnrolmentSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Attendance">
                    <AttendanceChart />
                </DxTabPage>
                <DxTabPage Text="Website">
                    <div class="">
                        <iframe src="@homePage" class="shadow card p-1 iframe-style"></iframe>
                    </div>
                </DxTabPage>
                <DxTabPage Text="u3admin.org.au">
                    <iframe src="https://u3admin.org.au" class="shadow card p-1 iframe-style"></iframe>
                </DxTabPage>
            </DxTabs>
            <footer class="footer vw-100 text-muted mt-4">
                <div align="center">
                    &copy; @(DateTime.Today.Year) - U3Admin.org.au
                </div>
            </footer>
        }
    </DxFormLayout>
}

<style>

    .iframe-style {
        width: 85vw;
        min-height: 40dvh;
        height: calc(100dvh - @(Workstation.UseTopMenu ? "10rem" : "7.5rem"));
        border-style: none;
        padding-bottom: 5px;
    }

</style>


@code {

    [CascadingParameter(Name = "OpenCircuits")]
    public int openCircuits { get; set; }
    [CascadingParameter]
    public LoginState? LoginState { get; set; }
    [CascadingParameter(Name = "HasRole")]
    public bool hasRole { get; set; }

    U3ADbContext? dbc { get; set; }
    MessageBox? messageBox;
    string homePage = "";
    DateTime now;

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        homePage = dbc.TenantInfo.Website;
        now = await localTime.GetLocalTimeAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ParseQueryString();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task ParseQueryString()
    {
        // Top prioriy: handle cancelled online payments
        var colQueryString = HttpUtility.ParseQueryString(new Uri(navMan.Uri).Query);
        if (colQueryString.Count > 1)
        {
            if (colQueryString.GetKey(0) == "Eway" && colQueryString[0] == "Fail")
            {
                string accessCode = colQueryString[1]!;
                var service = new EwayPaymentService();
                await service.CancelPaymentAsync(dbc!, accessCode);
            }
        }

        if (!hasRole) { return; }

        if (colQueryString.Count > 0)
        {
            if (colQueryString.GetKey(0) == "Eway")
            {
                navMan.NavigateTo("/AdminMemberPortal");
            }
            else
            {
                var page = colQueryString.GetValues("Page");
                if (page != null && page.Count() > 0)
                {
                    var path = page[0];
                    if (path.StartsWith("/EnrolClass="))
                    {
                        await messageBox!.ShowOkOnlyAsync("Not Available", "QR scanning is only available in the Member Portal. Login with an email address not assigned to an administrative role.");
                    }
                    else
                    {
                        if (path != "/~/" && path != "~/")
                        {
                            navMan.NavigateTo(path);
                        }
                        else
                        {
                            navMan.NavigateTo("/");
                        }
                    }
                }
            }
        }
    }

    public async Task OnCircuitClick()
    {
        StringBuilder msg = new();
        msg.AppendLine("<table class='table'>");
        msg.AppendLine("<thead><tr><td>UpTime</td><td>Status</td><td>Login</td><td>Tenant</td><td>Circuit</td></tr></thead><tbody>");
        foreach (var kvp in (circuitHandler as CircuitHandlerService)!.CircuitDetails)
        {
            var cd = kvp.Value;
            msg.AppendLine($"<tr><td>{cd.UpTime}</td><td>{cd.DownTime}</td><td>{cd.Name}</td><td>{cd.Tenant}</td><td>{cd.Id}</td></tr>");
        }
        msg.AppendLine("</tbody></table");
        await messageBox!.SetPopupWidth("50rem");
        await messageBox.ShowOkOnlyAsync("Logins", msg.ToString());
    }



    public string GetAssemblyVersion()
    {
        var version = GetType().Assembly.GetName().Version!.ToString();
        var splits = version.Split(".");
        return $"{splits[0]}.{splits[1]}.{splits[2]}";
    }

}
