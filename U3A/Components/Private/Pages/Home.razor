@page "/"

<PageTitle>U3Amin Administration</PageTitle>

@using Microsoft.AspNetCore.Components.Server.Circuits

@using System.IO
@using System.Web
@using System.Text
@using System.Collections.ObjectModel

@inject NavigationManager navMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject CircuitHandler circuitHandler


@if (@homePage == "")
{
    <LoadingIndicator />
}
else
{

    <MessageBox @ref="@messageBox" />
    <DxFormLayout CssClass="px-4">
        @if (!hasRole)
        {
            <U3A.UI.Forms.Pages.MembersPortal.MemberPortal />
        }
        else
        {
            <div class="input-group align-items-center">
                <div class="flex-grow-1 text-start me-2" ondblclick=@(() => OnCircuitClick())>@($"There are {openCircuits} users logged in.")</div>
                <ContextHelpTitle Title=@($"Ver: {GetAssemblyVersion()}")
                                  ButtonIconCssClass="bi bi-check2-circle"
                                  HelpTopic="Version-History.html"
                                  ActivationStyle="HelpActivationStyle.ButtonOnly" />
                <ContextHelpTitle Title="help"                                  
                                  ButtonIconCssClass="bi bi-question"
                                  HelpTopic="Introduction.html"
                                  IncludeTableOfContents=true
                                  ActivationStyle="HelpActivationStyle.ButtonOnly" />
            </div>
            <DxTabs CssClass="mb-2 vw-100">
                <DxTabPage Text="Member Summary">
                    <GeneralSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Cash Receipts">
                    <ReceiptSummaryChart />
                </DxTabPage>
                <DxTabPage Text="New Members">
                    <NewMemberSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Enrolments">
                    <EnrolmentSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Attendance">
                    <AttendanceChart />
                </DxTabPage>
                <DxTabPage Text="Website">
                    <div class="">
                        <iframe src="@homePage" class="shadow card p-1 iframe-height"></iframe>
                    </div>
                </DxTabPage>
                <DxTabPage Text="u3admin.org.au">
                        <iframe src="https://u3admin.org.au" class="shadow card p-1 iframe-height"></iframe>
                </DxTabPage>
            </DxTabs>
            <footer class="mt-4 footer vw-100 text-muted">
                <div align="center">
                    &copy; @(DateTime.Today.Year) - U3Admin.org.au
                    <a href="Public/Support">Click for support</a>
                </div>
            </footer>
        }
    </DxFormLayout>
}

<style>

    .iframe-height {
        width: 85vw;
        min-height: 40vh;
        height: 95vh;
        border-style: none;
        padding-bottom: 5px;
    }

</style>


@code {

    [CascadingParameter(Name = "OpenCircuits")]
    public int openCircuits { get; set; }
    [CascadingParameter]
    public LoginState? LoginState { get; set; }
    [CascadingParameter(Name = "HasRole")]
    public bool hasRole { get; set; }

    U3ADbContext? dbc { get; set; }
    MessageBox? messageBox;
    string homePage = "";

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        homePage = dbc.TenantInfo.Website;
        FinalisePaymentIfReqd();
        await base.OnInitializedAsync();
    }

    void FinalisePaymentIfReqd()
    {
        var queryStringCollection = HttpUtility.ParseQueryString(new Uri(navMan.Uri).Query);
        if (queryStringCollection.Count > 0) {
            if (queryStringCollection.GetKey(0) == "Eway")
            {
                navMan.NavigateTo("/AdminMemberPortal");
            }
        }
    }

    public async Task OnCircuitClick()
    {
        StringBuilder msg = new();
        msg.AppendLine("<table class='table'>");
        msg.AppendLine("<thead><tr><td>UpTime</td><td>Status</td><td>Login</td><td>Circuit</td></tr></thead><tbody>");
        foreach (var kvp in (circuitHandler as CircuitHandlerService)!.CircuitDetails)
        {
                var cd = kvp.Value;
                msg.AppendLine($"<tr><td>{cd.UpTime}</td><td>{cd.DownTime}</td><td>{cd.Name}</td><td>{cd.Id}</td></tr>");
        }
        msg.AppendLine("</tbody></table");
        await messageBox!.SetPopupWidth("40rem");
        await messageBox.ShowOkOnlyAsync("Logins", msg.ToString());
    }



    public string GetAssemblyVersion()
    {
        var version = GetType().Assembly.GetName().Version!.ToString();
        var splits = version.Split(".");
        return $"{splits[0]}.{splits[1]}.{splits[2]}";
    }

}
