@page "/"

@using Microsoft.AspNetCore.Components.Server.Circuits

@using System.IO
@using System.Web
@using System.Text
@using System.Globalization
@using System.Collections.ObjectModel

@inject NavigationManager navMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject CircuitHandler circuitHandler
@inject WorkStation ws
@inject IJSRuntime js


@implements IDisposable

@if (@homePage == "")
{
    <LoadingIndicator />
}
else
{
    <DxFlyout @bind-IsOpen=@isFlyoutOpen
              CloseOnOutsideClick="false"
              PositionTarget="#helpButton"
              Position="FlyoutPosition.Bottom"
              Width="15rem"
              HeaderVisible="true"
              HeaderText="🎁 A New Software Update"
              BodyText="Our software has been updated. Click the button above to see what has changed."
              CssClass="text-info" />

    <DxWindow HeaderText="Open Circuits" Width="800px" ShowFooter="true"
              ShowCloseButton="true"
              CloseOnEscape="true"
              @ref="@circuitDisplay"
              @bind-Visible=@showPopup>
        <BodyTemplate>
            <FullScreen DisplayOffset="20" HideToggle="true">
                <ContentTemplate>
                    <DxGrid Data="@circuitDetails"
                            ShowGroupPanel="true"
                            VirtualScrollingEnabled="true"
                            AutoExpandAllGroupRows="true"
                            FooterDisplayMode="GridFooterDisplayMode.Always">
                        <Columns>
                            <DxGridDataColumn Fieldname="Status" GroupIndex="0" />
                            <DxGridDataColumn Fieldname="UpTime" SortIndex="0" />
                            <DxGridDataColumn Fieldname="DownTime" />
                            <DxGridDataColumn Fieldname="Name" Caption="Login" />
                            <DxGridDataColumn Fieldname="Tenant" />
                        </Columns>
                        <GroupSummary>
                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="UpTime" FooterColumnName="UpTime" />
                        </GroupSummary>
                        <TotalSummary>
                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="UpTime" FooterColumnName="UpTime" />
                        </TotalSummary>
                    </DxGrid>
                </ContentTemplate>
            </FullScreen>
        </BodyTemplate>
        <FooterTemplate>
            <DxButton Text="Refresh" CssClass="m-1"
                      Click="() => {GetCircuitData();StateHasChanged();}" />
        </FooterTemplate>
    </DxWindow>
    <MessageBox @ref="@messageBox" />

    <DxFormLayout CssClass="@($"px-2 mt-{ws.SizeMode + 2}")">
        @if (!hasRole)
        {
            <PageTitle>@($"{tenantId}: Member Portal")</PageTitle>
            <U3A.UI.Forms.Pages.MembersPortal.MemberPortal />
        }
        else
        {
            <PageTitle>@($"{tenantId}: Site Administration")</PageTitle>
            <div class="@($"w-100 d-flex flex-row-reverse d-print-none mt-{ws.SizeMode + 2}")">
                @if (isSmallScreen)
                {
                    <div class="mt-3" />
                }
                else
                {
                    <ContextHelpTitle Title=""
                                      HelpTopic="Introduction.html"
                                      IncludeTableOfContents=true
                                      ActivationStyle="@HelpActivationStyle.ButtonOnlyNoMessges" />
                    <DxButton Text="Support"
                              RenderStyleMode="ButtonRenderStyleMode.Outline"
                              NavigateUrl="Public/Support"
                              CssClass="ms-1"
                              IconCssClass="h5 text-primary bi bi-person-raised-hand" />
                    <ContextHelpTitle Title=@($"Ver: {GetAssemblyVersion()}")
                                      IsVersionButton=true
                                      ShowNewSoftwareUpdateFlyout=@((value) => {isFlyoutOpen = value;})
                                      ButtonIconCssClass="h5 text-primary bi bi-check2-circle"
                                      HelpTopic=@($"{versionYear}-Version-History.html")
                                      ActivationStyle="@HelpActivationStyle.ButtonOnly"
                                      Closed="() => isFlyoutOpen=false" />
                    <span class="d-flex flex-row align-items-center">
                        <img class="h5 text-primary bi bi-people" />
                        <div class="text-start mx-1" ondblclick=@(() => OnCircuitClick())>@($"{openCircuits} users logged in.")</div>
                    </span>
                }
            </div>
            <DxTabs CssClass="w-100">
                <DxTabPage Text="Member Summary">
                    <GeneralSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Cash Receipts">
                    <ReceiptSummaryChart />
                </DxTabPage>
                <DxTabPage Text="New Members">
                    <NewMemberSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Attrition">
                    <AttritionDetailsChart />
                </DxTabPage>
                <DxTabPage Text="Participation">
                    <MemberParticipationChart />
                </DxTabPage>
                <DxTabPage Text="Enrolments">
                    <EnrolmentSummaryChart />
                </DxTabPage>
                <DxTabPage Text="Attendance">
                    <AttendanceChart />
                </DxTabPage>
                <DxTabPage Text="u3admin.org.au">
                    <iframe src="https://u3admin.org.au" class="shadow card p-1 iframe-style"></iframe>
                </DxTabPage>
            </DxTabs>
            <footer class="footer vw-100 text-muted mt-1">
                <div align="center">
                    &copy; @(DateTime.Today.Year) - U3Admin.org.au
                </div>
            </footer>
        }
    </DxFormLayout>
}

<style>

    .iframe-style {
        width: 85vw;
        min-height: 40dvh;
        height: calc(100dvh - @(ws.UseTopMenu ? "10rem" : "7.5rem") );
        border-style: none;
        padding-bottom: 5px;
    }

</style>


@code {

    [CascadingParameter(Name = "OpenCircuits")]
    public int openCircuits { get; set; }
    [CascadingParameter]
    public LoginState? LoginState { get; set; }
    [CascadingParameter(Name = "HasRole")]
    public bool hasRole { get; set; }

    U3ADbContext? dbc { get; set; }
    MessageBox? messageBox;
    string homePage = "";
    DateTime now;
    string? qrMessage = null;
    string? versionYear;
    DxWindow? circuitDisplay;
    List<CircuitDetail>? circuitDetails;
    bool showPopup;
    string tenantId;
    bool isFlyoutOpen;
    bool isSmallScreen = true;

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        tenantId = textInfo.ToTitleCase(dbc.TenantInfo.Identifier!);
        now = dbc.GetLocalTime();
        isSmallScreen = (ws.ScreenSize == ScreenSizes.XSmall);
        ws.ScreenSizeChanged += (s, e) =>
            {
                isSmallScreen = (ws.ScreenSize == ScreenSizes.XSmall);
                StateHasChanged();
            };
        homePage = dbc.TenantInfo.Website;
    }

    protected override async Task OnParametersSetAsync()
    {
        await ParseQueryString();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isSmallScreen = (ws.ScreenSize == ScreenSizes.XSmall);
        if (qrMessage != null)
        {
            await messageBox!.ShowOkOnlyAsync("Not Available", qrMessage);
            qrMessage = null;
        }
        if (showPopup && circuitDetails?.Count != openCircuits)
        {
            GetCircuitData();
            StateHasChanged();
        }
    }

    async Task ParseQueryString()
    {
        // Top priority: handle cancelled online payments
        var colQueryString = HttpUtility.ParseQueryString(new Uri(navMan.Uri).Query);
        if (colQueryString.Count > 1)
        {
            if (colQueryString.GetKey(0) == "Eway" && colQueryString[0] == "Fail")
            {
                string accessCode = colQueryString[1]!;
                var service = new EwayPaymentService();
                await service.CancelPaymentAsync(dbc!, accessCode);
            }
        }

        if (!hasRole) { return; }

        if (colQueryString.Count > 0)
        {
            if (colQueryString.GetKey(0) == "Eway")
            {
                navMan.NavigateTo("/AdminMemberPortal");
            }
            else
            {
                var page = colQueryString.GetValues("Page");
                if (page != null && page.Count() > 0)
                {
                    var path = page[0];
                    if (path.StartsWith("/EnrolClass="))
                    {
                        qrMessage = "QR scanning is only available in the Member Portal. Login with an email address not assigned to an administrative role.";
                    }
                    else
                    {
                        if (path != "/~/" && path != "~/")
                        {
                            navMan.NavigateTo(path);
                        }
                        else
                        {
                            navMan.NavigateTo("/");
                        }
                    }
                }
            }
        }
    }

    void OnCircuitClick()
    {
        GetCircuitData();
        showPopup = true;
    }

    void GetCircuitData()
    {
        circuitDetails = (circuitHandler as CircuitHandlerService)!.CircuitDetails.ToList();
    }

    public string GetAssemblyVersion()
    {
        var version = GetType().Assembly.GetName().Version!.ToString();
        var splits = version.Split(".");
        versionYear = splits[0].Trim();
        return $"{splits[0]}.{splits[1]}.{splits[2]}";
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
