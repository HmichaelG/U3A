@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using U3A.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager navMan

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<StatusMessage />
<h3>Two-factor authentication (2FA)</h3>
@if (canTrack)
{
    if (is2faEnabled)
    {
        @*         if (recoveryCodesLeft == 0)
        {
            <div class="alert alert-danger">
                <strong>You have no recovery codes left.</strong>
                <p>You must <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
            </div>
        }
        else if (recoveryCodesLeft == 1)
        {
            <div class="alert alert-danger">
                <strong>You have 1 recovery code left.</strong>
                <p>You can <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </div>
        }
        else if (recoveryCodesLeft <= 3)
        {
            <div class="alert alert-warning">
                <strong>You have @recoveryCodesLeft recovery codes left.</strong>
                <p>You should <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </div>
        }
 *@
        if (isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken />
                <button type="submit" class=" mb-4 col col-12 btn btn-outline-primary">
                    <div class="h5">Remove 'Remember Me'</div>
                    Require 2FA token entry on next &amp; future logins
                </button>
            </form>
        }

        <form style="display: inline-block" @formname="disable-2fa" @onsubmit="OnSubmitDisable2faAsync" method="post">
            <AntiforgeryToken />
            <button type="submit" class=" mb-4 col col-12 btn btn-outline-primary">
                <div class="h5">Disable 2FA</div>
                Discontinue Two-Factor Authentication &amp; remove enhanced security.
            </button>
        </form>
        @*         <a href="Account/Manage/Disable2fa" class="mb-4 btn btn-outline-primary">
            <div class="h5">Disable 2FA</div>
            Discontinue using Two-Factor Authentication for enhanced security.
        </a>
 *@        @* <a href="Account/Manage/GenerateRecoveryCodes" class="btn btn-primary">Reset recovery codes</a> *@
    }

    @if (!hasAuthenticator)
    {
        <a href="Account/Manage/EnableAuthenticator" class="mb-4 btn btn-outline-primary">
            <div class="h5">Enable 2FA</div>
            Enable Two-Factor Authentication by using an Authenticator app to enhance security.
        </a>

        <p>Click the button below for an introduction to Two-Factor Authentication using
            the Microsoft Authenticator app.
        </p>
        <a href="https://learn.microsoft.com/en-us/shows/Azure-Active-Directory-Videos-Demos/Microsoft-Authenticator" class="mb-2 btn btn-outline-primary">
            <div class="my-2 h5">Watch the video</div>
        </a>

    }
    @*     else
    {
        <a href="Account/Manage/EnableAuthenticator" class="mt-3 btn btn-primary">Set up authenticator app</a>
        <a href="Account/Manage/ResetAuthenticator" class="my-3 btn btn-primary">Reset authenticator app</a>
    }
 *@
    <a type="button" href="@navMan.BaseUri" class="w-100 btn btn-secondary">Return to menu</a>
}
else
{
    <div class="alert alert-danger">
        <strong>Privacy and cookie policy have not been accepted.</strong>
        <p>You must accept the policy before you can enable two-factor authentication.</p>
    </div>
}

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;
    private ApplicationUser? user = null;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasAuthenticator = await UserManager.GetTwoFactorEnabledAsync(user);
        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "'Remember Me' has been removed from this browser. When you login again from this browser you will not be prompted for your 2FA code.",
            HttpContext);
    }
    private async Task OnSubmitDisable2faAsync()
    {
        ApplicationUser user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var disable2faResult = await UserManager.SetTwoFactorEnabledAsync(user, false);
        if (!disable2faResult.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred disabling 2FA.");
        }

        var userId = await UserManager.GetUserIdAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus(
            "Two-Factor Authentication has been disabled. Standard password security remains in use.",
            HttpContext);

    }
}
