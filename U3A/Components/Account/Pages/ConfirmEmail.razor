@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using U3A.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager nvaMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<PageTitle>Confirm email</PageTitle>

<h1>Confirm email</h1>
<StatusMessage Message="@statusMessage" />

<DxButton Text="Return to menu"
CssClass="col-12 mt-2"
SizeMode="SizeMode.Large"
onclick="location.href = '/';"
RenderStyle="ButtonRenderStyle.Secondary"
RenderStyleMode="ButtonRenderStyleMode.Outline" />


@code {
    private string? statusMessage;
    private ApplicationUser? user;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        user = await UserManager.FindByIdAsync(UserId!);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId!}";
        }
        else
        {
            var originalEmail = user.Email;
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code!));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
            await UpdateUserAsync();
        }
    }
    private async Task UpdateUserAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            var appUser = await dbc.Users.FindAsync(user!.Id);
            if (appUser != null)
            {
                appUser.LastUpdated = DateTime.UtcNow;
                await dbc.SaveChangesAsync();
            }
        }
    }
}
