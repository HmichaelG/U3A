@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Identity
@using U3A.Services
@using U3A.Model

 @implements IDisposable;

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject LocalTime lt


<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall"
                    @bind-IsActive="@IsXtraSmallLayout" />
<DxLayoutBreakpoint DeviceSize="DeviceSize.Small"
                    @bind-IsActive="@IsSmallLayout" />
<DxLayoutBreakpoint DeviceSize="DeviceSize.Medium"
                    @bind-IsActive="@IsMediumLayout" />
<DxLayoutBreakpoint DeviceSize="DeviceSize.Large"
                    @bind-IsActive="@IsLargeLayout" />
<DxLayoutBreakpoint DeviceSize="DeviceSize.XLarge"
                    @bind-IsActive="@IsXtraLargeLayout" />

<DxGridLayout CssClass="">
    <Rows>
        <DxGridLayoutRow Areas="Left-Blank header Right-Blank" Height="auto" />
        <DxGridLayoutRow Areas="Left-Blank content Right-Blank" />
    </Rows>
    <Columns>
        @{
            if (IsXtraLargeLayout)
            {
                <DxGridLayoutColumn Width="10%" />
                <DxGridLayoutColumn Width="80%" />
                <DxGridLayoutColumn Width="10%" />
            }
            else
            {
                <DxGridLayoutColumn Width="0%" />
                <DxGridLayoutColumn Width="100%" />
                <DxGridLayoutColumn Width="0%" />
            }
        }
    </Columns>
    <Items>
        <DxGridLayoutItem Area="Left-Blank" CssClass="d-print-none vh-100">
        </DxGridLayoutItem>
        <DxGridLayoutItem Area="header" CssClass="py-1">
            <Template>
                @if (hasRole)
                {
                    <div class="fixed-top">
                        <MainMenu />
                    </div>
                }
                else
                {
                    <PortalHeader NoU3AGroup=true />
                }
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Area="content" CssClass="main">
            <Template>
                <ErrorBoundary @ref="@errorBoundary">
                    <ChildContent>
                        <div class="@((hasRole) ? "content-padding" : "" )">
                            @if (!string.IsNullOrWhiteSpace(messageText))
                            {
                                <div class="alert alert-danger text-danger text-center mx-auto">
                                    @(new MarkupString(messageText))
                                </div>
                            }
                            @Body
                        </div>
                    </ChildContent>
                    <ErrorContent>
                        <p class="u3admin-error-boundary mt-5">
                            @if (constants.IS_DEVELOPMENT)
                            {
                                <div class="w-50">@context.ToString()</div>
                            }
                            Oops! Something went wrong. An unexpected error has occurred.<br />
                            When reporting this issue please include the date and time: @(DateTime.UtcNow) UTC ( @(lt.GetLocalTimeAsync()) Local ).
                            <button class="btn btn-warning" @onclick="ResetError">Reset</button>
                        </p>
                    </ErrorContent>
                </ErrorBoundary>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Area="Right-Blank" CssClass="d-print-none vh-100" />
    </Items>
</DxGridLayout>


<style>
    .content-padding {
        padding-top: 3rem !important;
    }
</style>

@code {
    [Parameter]
    public RenderFragment? Body { get; set; } = null;
    [CascadingParameter(Name = "HasRole")]
    public bool hasRole { get; set; }

    ErrorBoundary? errorBoundary;
    IEnumerable<IdentityRole>? Roles { get; set; }
    bool IsXtraSmallLayout { get; set; }
    bool IsSmallLayout { get; set; }
    bool IsMediumLayout { get; set; }
    bool IsLargeLayout { get; set; }
    bool IsXtraLargeLayout { get; set; }
    U3ADbContext? dbc { get; set; }
    string? messageText;


    protected override async Task OnInitializedAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            Roles = dbc.Roles.ToList();
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            foreach (var r in Roles)
            {
                if (authenticationState.User.IsInRole(r.Name!))
                {
                    hasRole = true;
                    break;
                }
            }
            var authEmail = authenticationState.User.Identity!.Name;
            if (authEmail == constants.superAdmin) hasRole = true;
        }
        NavigationManager.LocationChanged += OnLocationChanged;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var file = $"{System.IO.Directory.GetCurrentDirectory()}{@"\wwwroot\message.html"}";
        messageText = string.Empty;
        if (File.Exists(file))
        {
            messageText = await File.ReadAllTextAsync(file);
            if (firstRender) StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ResetError()
    {
        errorBoundary?.Recover();
        NavigationManager.NavigateTo("/", true);
    }

    void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (IsMediumLayout)
        {
            InvokeAsync(StateHasChanged).SafeFireAndForget();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        dbc?.Dispose();
    }

}

