@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Identity
@using U3A.Services
@using U3A.Model

@implements IDisposable;

@inject NavigationManager navMan
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject LocalTime lt
@inject IJSRuntime js
@inject WorkstationService ws

@rendermode InteractiveServer

<DxButton id="main-menu-button" Visible="true" Text="@((!isDrawerOpen) ? "Menu" : "")"
          Click="@(() => isDrawerOpen = !isDrawerOpen)"
          tooltip="Click to show/hide menu"
          CssClass="sidebar-toggle-button"
          IconCssClass="bi bi-list menu-icon"
          RenderStyle="ButtonRenderStyle.None" />

<style>
    .sidebar-toggle-button {
        z-index: 1040;
        left: 0;
        top: 0;
        margin: 0.2rem;
        position: absolute;
    }
</style>

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <DxDrawer @bind-IsOpen="@isDrawerOpen"
              CssClass="drawer-style"
              Mode=@drawerMode
              CloseOnTargetContentClick="true"
              Position="DrawerPosition.Left"
              PanelWidth="17.5rem">
        <BodyTemplate>
            <SideBar />
        </BodyTemplate>
        <TargetContent>
            <DxGridLayout CssClass="">
                <Rows>
                    <DxGridLayoutRow Areas="Left-Blank content Right-Blank" Height="auto" />
                </Rows>
                <Columns>
                    @{
                        if (isSmallScreen)
                        {
                            <DxGridLayoutColumn Width="1%" />
                            <DxGridLayoutColumn Width="99%" />
                            <DxGridLayoutColumn Width="0%" />
                        }
                        else
                        {
                            <DxGridLayoutColumn Width="@((isDrawerOpen) ? "1%" : "5%")" />
                            <DxGridLayoutColumn Width="@((isDrawerOpen) ? "98%" : "90%")" />
                            <DxGridLayoutColumn Width="@((isDrawerOpen) ? "1%" : "5%")" />
                        }
                    }
                </Columns>
                <Items>
                    <DxGridLayoutItem Area="Left-Blank" />
                    <DxGridLayoutItem Area="content" CssClass="mt-1 main">
                        <Template>
                            <ErrorBoundary @ref="@errorBoundary">
                                <ChildContent>
                                    <div class="pt-1">
                                        @if (!string.IsNullOrWhiteSpace(messageText))
                                        {
                                            <div class="alert alert-danger text-fl-danger text-center mx-auto">
                                                @(new MarkupString(messageText))
                                            </div>
                                        }
                                        @Body
                                    </div>
                                </ChildContent>
                                <ErrorContent>
                                    <p class="u3admin-error-boundary mt-5">
                                        @if (constants.IS_DEVELOPMENT)
                                        {
                                            <div class="w-50">@context.ToString()</div>
                                        }
                                        Oops! Something went wrong. An unexpected error has occurred.<br />
                                        When reporting this issue please include the date and time: @(DateTime.UtcNow) UTC ( @(lt.GetLocalTimeAsync()) Local ).
                                        <button class="btn btn-warning" @onclick="ResetError">Reset</button>
                                    </p>
                                </ErrorContent>
                            </ErrorBoundary>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Area="Right-Blank" CssClass="d-print-none vh-100" />
                </Items>
            </DxGridLayout>
        </TargetContent>
    </DxDrawer>
}

@code {
    [Parameter]
    public RenderFragment? Body { get; set; } = null;
    [CascadingParameter(Name = "HasRole")]
    public bool hasRole { get; set; }

    ErrorBoundary? errorBoundary;
    IEnumerable<IdentityRole>? Roles { get; set; }
    U3ADbContext? dbc { get; set; }
    string? messageText;
    bool isDrawerOpen;
    DrawerMode drawerMode;
    bool isSmallScreen;
    bool isReady;
    private DotNetObjectReference<MainLayoutSideMenu>? objRef;
    public string Orientation { get; set; } = "unknown";
    bool screenSizeChanged;

    protected override async Task OnInitializedAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            Roles = dbc.Roles.ToList();
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            foreach (var r in Roles)
            {
                if (authenticationState.User.IsInRole(r.Name!))
                {
                    hasRole = true;
                    break;
                }
            }
            var authEmail = authenticationState.User.Identity!.Name;
            if (authEmail == constants.superAdmin) hasRole = true;
        }
        ws.ScreenSizeChanged += (s, e) =>
        {
            setupMenuOnSizeChange();
        };
        navMan.LocationChanged += (s, e) =>
        {
            setupMenuOnLocationChange();
        };
        isReady = true;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("hoverClickMenu.attachAdaptiveHover", "main-menu-button");
            await js.InvokeVoidAsync("hoverClickMenu.attachHomeKeyHandler", "main-menu-button");
            setupMenuOnLocationChange();
        }
        var wwwroot = @"\wwwroot\message.html";
        var file = $"{System.IO.Directory.GetCurrentDirectory()}{wwwroot}";
        messageText = string.Empty;
        if (File.Exists(file))
        {
            messageText = await File.ReadAllTextAsync(file);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ResetError()
    {
        errorBoundary?.Recover();
        navMan.NavigateTo("/", true);
    }

    bool? currentDrawerState;
    DrawerMode? currentDrawerMode;
    private void setupMenu()
    {
        bool hasChanges = false;
        isSmallScreen = !ws.IsLargeScreen;
        isDrawerOpen = (isSmallScreen) ? screenSizeChanged : true;
        drawerMode = (isSmallScreen) ? DrawerMode.Overlap : DrawerMode.Shrink;
        if (currentDrawerMode == null || currentDrawerState == null) hasChanges = true;
        if (currentDrawerMode != null && currentDrawerMode.Value != drawerMode) hasChanges = true;
        if (currentDrawerState != null && currentDrawerState.Value != isDrawerOpen) hasChanges = true;
        if (hasChanges) StateHasChanged();
        currentDrawerMode = drawerMode;
        currentDrawerState = isDrawerOpen;
    }

    private void setupMenuOnLocationChange()
    {
        setupMenu();
        isDrawerOpen = (isSmallScreen) ? false : isDrawerOpen;
        StateHasChanged();
    }

    void setupMenuOnSizeChange()
    {
        screenSizeChanged = true;
        setupMenu();
        screenSizeChanged = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}

