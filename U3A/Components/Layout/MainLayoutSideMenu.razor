@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Identity
@using U3A.Services

@implements IDisposable;

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<div class="page overflow-auto">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            <DxGridLayoutRow Areas="header header" Height="auto"></DxGridLayoutRow>
            <DxGridLayoutRow Areas="sidebar content"></DxGridLayoutRow>
        </Rows>
        <Columns>
            <DxGridLayoutColumn Width="auto" />
            <DxGridLayoutColumn />
        </Columns>
        <Items>
            <DxGridLayoutItem Area="sidebar" CssClass="layout-sidebar">
                <Template>
                    <SideBar />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="content" CssClass="w-100 content px-4">
                <Template>
                    <ErrorBoundary @ref="@errorBoundary">
                        <ChildContent>
                            @if (!string.IsNullOrWhiteSpace(messageText))
                            {
                                <div class="alert alert-danger text-center mx-auto">
                                    @(new MarkupString(messageText))
                                </div>
                            }
                            @Body
                        </ChildContent>
                        <ErrorContent>
                            <p class="u3admin-error-boundary mt-5">
                                Oops! Something went wrong. An unexpected error has occurred.<br />
                                When reporting this issue please include the date and time: @(DateTime.Now.ToUniversalTime()) UTC.
                                <button class="btn btn-warning" @onclick="ResetError">Reset</button>
                            </p>
                        </ErrorContent>
                    </ErrorBoundary>
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div>



@code {

    [Parameter]
    public RenderFragment? Body { get; set; } = null;

    ErrorBoundary? errorBoundary;
    U3ADbContext? dbc { get; set; }
    string? messageText;
    string? OrganisationName;

    bool hasRole = false;

    protected override async Task OnInitializedAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            OrganisationName = dbc.TenantInfo.Name;
            var roles = dbc.Roles.ToList();
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            foreach (var r in roles)
            {
                if (authenticationState.User.IsInRole(r.Name))
                {
                    hasRole = true;
                    break;
                }
            }
            var authEmail = authenticationState.User.Identity.Name;
            if (authEmail == constants.superAdmin) hasRole = true;
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var file = $"{System.IO.Directory.GetCurrentDirectory()}{@"\wwwroot\message.html"}";
        messageText = string.Empty;
        if (File.Exists(file))
        {
            messageText = await File.ReadAllTextAsync(file);
            if (firstRender) StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ResetError()
    {
        errorBoundary?.Recover();
        NavigationManager.NavigateTo("/", true);
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}

