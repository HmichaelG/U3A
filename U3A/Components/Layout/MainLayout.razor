@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Server.Circuits
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using U3A.Data
@using Serilog

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject CircuitHandler circuitHandler
@inject NavigationManager navMan
@inject IJSRuntime js
@inject WorkstationService ws
@inject DxThemesService themeService
@inject IThemeChangeService themeChangeService
@implements IDisposable

@if (isInteractive)
{
    <DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" IsActive="isXSmall" IsActiveChanged="OnXSmallChanged" />
    <DxLayoutBreakpoint DeviceSize="DeviceSize.Small" IsActive="isSmall" IsActiveChanged="OnSmallChanged" />
    <DxLayoutBreakpoint DeviceSize="DeviceSize.Medium" IsActive="isMedium" IsActiveChanged="OnMediumChanged" />
    <DxLayoutBreakpoint DeviceSize="DeviceSize.Large" IsActive="isLarge" IsActiveChanged="OnLargeChanged" />
    <DxLayoutBreakpoint DeviceSize="DeviceSize.XLarge" IsActive="isXLarge" IsActiveChanged="OnXLargeChanged" />

    @if (isReady)
    {
        <div class="container-fluid">
            <DxFormLayout SizeMode="@sizeMode">

                <CascadingValue Value=@openCircuits Name="OpenCircuits">
                    <CascadingValue Value="@loginState">
                        <CascadingValue Value="@hasRole" Name="HasRole">
                            @if (hasRole)
                            {
                                if (useTopMenu.HasValue)
                                {
                                    if (useTopMenu.Value)
                                    {
                                        <MainLayoutTopMenu Body="@Body" />
                                    }
                                    else
                                    {
                                        <MainLayoutSideMenu Body="@Body" />
                                    }
                                }
                            }
                            else
                            {
                                <MainLayoutTopMenu Body="@Body" />
                            }
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </DxFormLayout>
        </div>
    }
}
else
{
    <NotInteractive />
}
<style>
    .container-main {
        width: 100%;
        padding-right: var(--bs-gutter-x, 0.50rem);
        padding-left: var(--bs-gutter-x, 0.50rem);
        margin-right: auto;
        margin-left: auto;
    }
</style>

@code {

    int openCircuits { get; set; }
    bool hasRole { get; set; }
    bool? useTopMenu = null; // default is sidebar
    LoginState? loginState { get; set; }

    bool isXSmall = false;
    bool isSmall = false;
    bool isMedium = false;
    bool isLarge = false;
    bool isXLarge = false;

    U3ADbContext? dbc { get; set; }
    string? currentUrl;
    bool isInteractive = false;
    SizeMode sizeMode;
    private DotNetObjectReference<MainLayout>? objRef;
    string Orientation { get; set; } = "unknown";
    bool isReady;


    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();

        var hasSecurityAdmin = false;
        // Ensure all roles are created
        if (RoleManager != null)
        {
            foreach (string n in constants.nameOfRoles)
            {
                if (await RoleManager.FindByNameAsync(n) == null)
                {
                    await RoleManager.CreateAsync(new IdentityRole() { Name = n });
                }
            }
            // Do we have a user in the security admin role
            var role = await dbc.Roles.AsNoTracking().Where(x => x.Name == constants.nameOfRoles[0]).FirstAsync(); //super admin
            hasSecurityAdmin = await dbc.UserRoles.AsNoTracking().AnyAsync(r => r.RoleId == role.Id);
            if (!hasSecurityAdmin)
            {
                //a hasher to hash the password before seeding the user to the db
                var hasher = new PasswordHasher<IdentityUser>();
                // Get the security admin or create if not exists
                var sAdmin = await UserManager.FindByEmailAsync(constants.superAdmin);
                if (sAdmin == null)
                {
                    sAdmin = new ApplicationUser()
                    {
                        Email = constants.superAdmin,
                        UserName = constants.superAdmin,
                        EmailConfirmed = true,
                    };
                    sAdmin.PasswordHash = hasher.HashPassword(sAdmin, "U3A Rocks!!");
                    await UserManager.CreateAsync(sAdmin);
                }
                // Add security admin permission
                await UserManager.AddToRoleAsync(sAdmin, constants.nameOfRoles[0]);
            }
        }
        var roles = dbc.Roles;
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        foreach (var r in roles)
        {
            if (r != null)
            {
                if (authenticationState.User.IsInRole(r.Name!))
                {
                    hasRole = true;
                    break;
                }
            }
        }
        var authEmail = authenticationState.User.Identity!.Name;
        if (authEmail == constants.superAdmin) hasRole = true;
        loginState = new LoginState(authEmail!, U3Adbfactory);

        var ch = circuitHandler as CircuitHandlerService;
        ch!.CircuitsChanged += HandleCircuitsChanged!;
        openCircuits = ch.CircuitDetails.Count();
        currentUrl = navMan.ToBaseRelativePath(navMan.Uri);
        isReady = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isInteractive = RendererInfo.IsInteractive;
        if (firstRender)
        {
            await GetWorkstationDetails();
            objRef = DotNetObjectReference.Create(this);
            await js.InvokeVoidAsync("registerOrientationChange", objRef);
        }
    }

    [JSInvokable]
    public void OnOrientationChanged(string orientation)
    {
        navMan.NavigateTo(navMan.Uri, forceLoad: true);
    }

    async Task OnXSmallChanged(bool isActive) => await processSizeChange(ScreenSizes.XSmall);
    async Task OnSmallChanged(bool isActive) => await processSizeChange(ScreenSizes.Small);
    async Task OnMediumChanged(bool isActive) => await processSizeChange(ScreenSizes.Medium);
    async Task OnLargeChanged(bool isActive) => await processSizeChange(ScreenSizes.Large);
    async Task OnXLargeChanged(bool isActive) => await processSizeChange(ScreenSizes.XLarge);

    int seq = 0;
    async Task processSizeChange(ScreenSizes size)
    {
        await ws.SetScreenSizeAsync(size);
        StateHasChanged();
        seq++;
        Log.Information($"{seq}: Screen size changed to: {size}", size);
    }

    bool hasGetWorkstationProcessed = false;
    private async Task GetWorkstationDetails()
    {
        if (hasGetWorkstationProcessed) return;
        await ws.GetWorkstationDetail();
        useTopMenu = ws.UseTopMenu;
        switch (ws.SizeMode)
        {
            case 1:
                sizeMode = SizeMode.Medium;
                break;
            case 2:
                sizeMode = SizeMode.Large;
                break;
            default:
                sizeMode = SizeMode.Small;
                break;
        }
        StateHasChanged();
        hasGetWorkstationProcessed = true;
    }

    public void HandleCircuitsChanged(object sender, EventArgs args)
    {
        openCircuits = (circuitHandler as CircuitHandlerService)!.CircuitDetails.Count();
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
        (circuitHandler as CircuitHandlerService)!.CircuitsChanged -= HandleCircuitsChanged!;
        dbc?.Dispose();
    }


}
