@page "/public/ClassSchedulePreview"

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService
@inject IJSRuntime js
@inject NavigationManager NavMan
@inject IConfiguration config
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject WorkstationService ws

@using System.Web
@using Microsoft.AspNetCore.Builder
@using Microsoft.Extensions.Configuration;
@using System.Text.RegularExpressions;
@using System.Diagnostics
@using U3A.Services.APIClient

@layout BasicLayout

<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@IsMobileLayout" />

@if (!IsReady)
{
	<LoadingIndicator />
}
else
{
	<PortalHeader ShowBackButton="true" NoU3AGroup="true" />
	<div class="container col mx-1 col-md-10 col-lg-8 col-xl-6 mx-md-auto">
		<div class="h6 pt-2 col-12" align="center">
			@term?.TermSummary
		</div>
		@if (isNotInEnrolmentPeriod)
		{
			<p class="alert alert-danger col-12 my-2" align="center">
				@(enrolmentLockoutText)
			</p>
		}
		<div class="list-detail mx-auto">
			<DxTextBox @ref=@filterTextBox
					   CssClass="filter-text-box flex-grow-1"
					   ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
					   Text="@filterText"
					   TextChanged="@(async (newValue) => await OnFilterTextChanged(newValue))"
					   BindValueMode="BindValueMode.OnInput"
					   InputDelay="500"
					   NullText="Search">
			</DxTextBox>
		</div>
		<DxGrid Data="@ListboxData" id="listBox" @ref=@listGrid
				KeyFieldName="ID"
				ShowAllRows=true
				VirtualScrollingEnabled=true
				AllowSelectRowByClick=false
				AllowGroup=false
				AllowSort=false
				PagerVisible=false
				CssClass="mt-1 listbox-scroll">
			<Columns>
				<DxGridDataColumn>
					<HeaderCaptionTemplate>
						<DxTabs @ref="dxTabs"
								TabClick="@OnTabClick"
								@bind-ActiveTabIndex=@activeTabIndex CssClass="">
							<DxTabPage Text="All" />
							<DxTabPage Text="Mon" />
							<DxTabPage Text="Tue" />
							<DxTabPage Text="Wed" />
							<DxTabPage Text="Thu" />
							<DxTabPage Text="Fri" />
							<DxTabPage Text="W/E" />
						</DxTabs>
					</HeaderCaptionTemplate>
					<CellDisplayTemplate>
						@{
							var c = (Class)context.DataItem;

							<DxFormLayout>
								<DxFormLayoutGroup Context="titleContext" Decoration="FormLayoutGroupDecoration.None">
									<Items>
										<div class="container mt-2 py-1 border bg-fl-neutral-subtle">
											<div class="d-flex">
												@if (c.Course.IsFeaturedCourse)
												{
													<div class="me-2 flex-grow-0 badge bg-fl-primary">Featured</div>
												}
												<div class="flex-grow-1 text-fl-primary">@(HighlightSearchText(ClassTitle(c)))</div>
											</div>
										</div>

										<div class="description-style">
											<ExpandableText Key="@c.ID"
															Expanded="@(expandStates.TryGetValue(c.ID, out var ex) && ex)"
															ExpandedChanged="@(async (isExpanded) =>
																					 {
																						 expandStates[c.ID] = isExpanded;
																						 if (!isExpanded)
																						 {
																							 ScrollListboxToIndex(context.VisibleIndex);
																						 }
																					 })">
										<ChildContent>
											<div class="w-100 text-fl-info text-center h6" hidden="@(string.IsNullOrWhiteSpace(c.Course.OfferedBy))">
												@($"Offered By: {c.Course.OfferedBy}")
											</div>
											@{
														string? message = null;
														if (c.TermNumber != term!.TermNumber) { message = $"Enrol for {c.OfferedSummaryAdjusted}"; }
														if (c.TermNumber == prevTerm!.TermNumber) { message = $"This is a Term {prevTerm.TermNumber} class"; }
														if (c.TotalActiveStudents >= c.Course.MaximumStudents) { message = "Class is Full"; }
														if (message != null)
														{
															<div class="h6 watermark">
																@message
															</div>
														}
													}
													<div hidden="@(c.Course.CourseFeePerYear == 0)"
														 class="w-100 text-center text-fl-info">
														<strong>Course Fee: @($"{c.Course.CourseFeePerYear.ToString("c2")} {c.Course.CourseFeePerYearDescription}")</strong>
													</div>
													<div hidden="@(!c.Course.HasTermFees)"
														 class="w-100 text-center text-fl-info">
														<strong>@($"{c.Course.TermFeesText} {c.Course.CourseFeePerTermDescription}")</strong>
													</div>
													<div hidden="@(!c.Course.HasFees)" class="mb-2" />
													@(HighlightSearchText((ws.Theme == "light") ? c.Course.DisplayDescription : c.Course.DisplayDescriptionDarkMode, isHTMLtext: true))
												</ChildContent>
											</ExpandableText>
										</div>

										<div class="col-small"><strong>Offered</strong></div>
										<div class="col-large">@c.OfferedSummary</div>
										<div class="col-small"><strong>Type</strong></div>
										<div class="col-large">@HighlightSearchText(c.Course.CourseType.Name)</div>
										<div class="col-small"><strong>Class</strong></div>
										<div class="col-large">@(GetClassDetails(c))</div>
										@if (c.Course.ClassSummaries.Count <= 1)
										{
											<div class="col-small"><strong>Venue</strong></div>
											<div class="col-large">@HighlightSearchText(c!.Venue!.Name)</div>
											<div class="offset-small col-large">@c.Venue?.Address</div>
										}

										<div class="row col col-12 mt-2">
											<div class="col-3 px-1 text-center"><strong>Max</strong></div>
											<div class="col-3 px-1 text-center"><strong>Min</strong></div>
											<div class="col-3 px-1 text-center"><strong>Enrolled</strong></div>
											<div class="col-3 px-1 text-center"><strong>Waitlist</strong></div>
											<div class="col-3 px-1 text-center">@c.Course.MaximumStudents</div>
											<div class="col-3 px-1 text-center">@c.Course.RequiredStudents</div>
											<div class="col-3 px-1 text-center">@c.TotalActiveStudents</div>
											<div class="col-3 px-1 text-center">@c.TotalWaitlistedStudents</div>
										</div>

										@{
											string? message = null;
											if (!c.Course.AllowAutoEnrol) { message = c.Course.AutoEnrolDisabledReason ?? "Class is Closed"; }
											if (message != null)
											{
												<div class="watermark">
													@message
												</div>
											}
										}
									</Items>
								</DxFormLayoutGroup>
							</DxFormLayout>
						}

					</CellDisplayTemplate>
				</DxGridDataColumn>
			</Columns>
		</DxGrid>

		<div class="align-items-end">
			<div class="h6 col-12 text-fl-primary" align="center">
				@(new MarkupString(selectionCountText))
			</div>

			<div class="input-group">
				<DxButton CssClass="flex-grow-1"
						  IconCssClass="menu-icon bi-door-open"
						  Text="Return to Portal"
						  RenderStyle="@ButtonRenderStyle.Secondary" Click="@OnReturnToMenu" />
			</div>
		</div>
	</div>
}
<style>
	.filter-text-box {
		margin: auto;
		background: url(images/search.svg) no-repeat scroll 5px 5px;
		padding-left: 30px;
	}

	.combo-list-box {
		margin: auto;
		background: url(images/list-ul.svg) no-repeat scroll 5px 5px;
		padding-left: 30px;
	}

	.weblink-button {
		width: 80%;
		margin: auto
	}

	.highlight {
		background-color: yellow !important;
	}

	.listbox-scroll {
		height: calc(100dvh - 10rem );
	}

	.title-style {
		width: 100%;
		padding: 1rem;
		font-weight: 700;
		line-height: 1.2;
	}

	.description-style {
		width: 100%;
		margin: 1rem;
		padding: 0.25rem;
		border-radius: 0.25rem;
	}

	.col-small {
		-webkit-box-flex: 0;
		-webkit-flex: 0 0 auto;
		-ms-flex: 0 0 auto;
		flex: 0 0 auto;
		width: 22%;
		padding-left: 1rem;
		color: var(--bs-primary);
	}

	.col-large {
		-webkit-box-flex: 0;
		-webkit-flex: 0 0 auto;
		-ms-flex: 0 0 auto;
		flex: 0 0 auto;
		width: 78%;
	}

	.offset-small {
		margin-left: 22%;
	}

	.watermark {
		width: 100%;
		text-align: center;
		color: magenta;
	}
</style>
@code {

	Term? term;
	Term? prevTerm;
	List<Class>? ListboxData;
	List<Class>? Classes;
	List<Class> selectedClasses = new List<Class>();
	List<Class> deletedClasses = new List<Class>();
	int activeTabIndex = 0;

	DxTabs? dxTabs;
	DxGrid? listGrid;
	DxTextBox? filterTextBox;

	string selectionCountText = string.Empty;
	string? googleMapAPIKey;
	bool IsMobileLayout;

	bool isFinancial;
	bool isNotInEnrolmentPeriod = false;
	bool IsReady = false;
	SystemSettings? settings;
	DateTime today;
	MarkupString? enrolmentLockoutText;
	List<Guid>? newEnrolmentGuids;
	private readonly Dictionary<Guid, bool> expandStates = new();

	// Search filter function
	string? _filterText = null;
	string? filterText
	{
		get { return _filterText; }
		set
		{
			_filterText = value;
			ListboxData = (string.IsNullOrWhiteSpace(_filterText))
							? ResetFilter()
							: FilterClassByName();
		}
	}

	private async Task OnFilterTextChanged(string text)
	{
		if (filterTextBox == null) return;
		await filterTextBox.FocusAsync();
		filterText = text;
	}

	List<Class>? FilterClassByName()
	{
		var result = new List<Class>();
		if (_filterText == null) return ResetFilter();
		if (_filterText.Length < 2) return ResetFilter();
		if (Classes == null) return ResetFilter();
		result = Classes.FindAll(x => searchText(x).IndexOf(_filterText, StringComparison.CurrentCultureIgnoreCase) >= 0);
		return result;
	}

	MarkupString HighlightSearchText(string searchText, bool isHTMLtext = false)
	{
		if (searchText == null) return new MarkupString(string.Empty);
		if (string.IsNullOrWhiteSpace(_filterText) || _filterText.Length < 2) return new MarkupString(searchText);
		var pattern = Regex.Escape(_filterText);
		//if (isHTMLtext) { pattern = $@"<[^>]*>|{pattern}"; }    // ignore HTML angle brackets
		Regex regex = new Regex(pattern, RegexOptions.IgnoreCase);
		MatchCollection matches = regex.Matches(searchText);
		foreach (Match match in matches.Reverse())
		{
			foreach (Group group in match.Groups)
			{
				foreach (Capture capture in group.Captures.Reverse())
				{
					searchText = searchText.Insert(capture.Index + capture.Length, "</span>");
					searchText = searchText.Insert(capture.Index, "<span class='highlight'>");
				}
			}
		}
		return new MarkupString(searchText);
	}

	string searchText(Class c)
	{
		return $"{c.Course.ConversionID} {c.Course.Name} {c.Course.CourseType.Name} {c.Leader?.FullName} {c.Venue?.Name} {c.GuestLeader} {c.OnDay.Day} {c.Course.DisplayDescription}";
	}

	List<Class>? ResetFilter()
	{
		if (dxTabs == null || activeTabIndex == 0)
		{
			return Classes;
		}
		else
		{
			if (Classes == null) return null;
			if (activeTabIndex < 6)
			{
				//Monday - Friday
				return Classes.Where(x => x.OnDayID == activeTabIndex).ToList();
			}
			else
			{
				//Weekend
				return Classes.Where(x => x.OnDayID == activeTabIndex ||
											x.OnDayID == 0).ToList();
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		newEnrolmentGuids = new List<Guid>();

		deletedClasses = new List<Class>();
		activeTabIndex = 0;
		using (var dbc = await U3Adbfactory.CreateDbContextAsync())
		{
			today = dbc.GetLocalTime().Date;
			using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
			{
				// wire up the data
				settings = await dbc.SystemSettings.OrderBy(x => x.ID).FirstOrDefaultAsync();
				if (settings == null) { throw new Exception("System settings not found in database."); }
				term = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
				if (term == null)
				{
					var currentTerm = await BusinessRule.CurrentTermAsync(dbc);
					if (currentTerm is null) { throw new Exception("The current term is not defined."); }
					if (dbc.GetLocalTime().Date < currentTerm.EnrolmentStartDate)
					{
						SetUnavailable(currentTerm);
					}
					else
					{
						// Fallback to read-only mode if enrolment term is null
						var nextTerm = await BusinessRule.GetNextTermAsync(dbc);
						if (nextTerm != null)
						{
							term = currentTerm = nextTerm;
							SetUnavailable(nextTerm);
						}
					}
				}
				if (term != null)
				{
					prevTerm = await BusinessRule.GetPreviousTermAsync(dbc, term.Year, term.TermNumber) ?? term;
					var excludeOffScheduleActivities = true;

					// Fast lookup from Schedule cache
					isFinancial = false;
					Classes = await BusinessRule.RestoreClassesFromScheduleAsync(dbc, dbcT, tenantService, term, settings, excludeOffScheduleActivities, isFinancial);
				}
			}
		}
		googleMapAPIKey = config.GetValue<string>("GoogleMapAPIKey");
		if (string.IsNullOrWhiteSpace(googleMapAPIKey)) googleMapAPIKey = config.GetConnectionString("GoogleMapAPIKey");

		IsReady = true;
		await ShowSelectedClasses(scrollToTop: true);
	}

	void SetUnavailable(Term? term)
	{
		if (term is not null)
		{
			var sOpeningTime = term.EnrolmentStartDate.ToString("dddd, dd-MMM-yyyy");
			enrolmentLockoutText = new MarkupString($@"<h6><strong>{term.Year} Term-{term.TermNumber}</strong> membership and course enrolments will open</br>{sOpeningTime}.</h6>");
		}
		isNotInEnrolmentPeriod = true;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			filterText = null;
		}
	}

	MarkupString GetClassDetails(Class c)
	{
		var result = new MarkupString(c.ClassDetailWithoutVenue);
		if (c.Course.ClassSummaries.Count > 1)
		{
			string text = string.Empty;
			foreach (var thisClass in c.Course.ClassSummaries)
			{
				text = $"{text}{thisClass}<br/>";
			}
			if (text != string.Empty) result = new MarkupString(text);
		}
		return result;
	}


	async Task GetNextCourseContact(Class context)
	{
		IsReady = false;
		await InvokeAsync(StateHasChanged);
		var c = selectedClasses.FirstOrDefault(x => x.ID == context.ID);
		if (c != null)
		{
			c.GetNextCourseContact();
			ListboxData = selectedClasses;
		}
		IsReady = true;
	}

	async Task ShowSelectedClasses(bool scrollToTop)
	{
		var savedFilter = filterText;
		await GetData();
		filterText = null;
		if (!string.IsNullOrWhiteSpace(savedFilter)) { await OnFilterTextChanged(savedFilter); }
		if (scrollToTop)
		{
			ScrollListboxToTop();
		}
	}

	async Task GetData()
	{
		List<Class> c = [];
		if (Classes is null) return;
		if (term is not null)
		{
			c = Classes.Where(x => x.TermNumber >= term.TermNumber).ToList();
			// only show this term's classes & inter-term classes from last term.
			if (prevTerm is not null)
			{
				using (var dbc = await U3Adbfactory.CreateDbContextAsync())
				{
					c.AddRange(Classes.Where(x => x.TermNumber == prevTerm.TermNumber
													&& BusinessRule.IsClassEndDateInInterTermPeriod(dbc, x, prevTerm, prevTerm.EndDate, term.StartDate)).ToList());
				}
			}
		}
		ListboxData = c.Distinct<Class>().ToList();
	}

	void ScrollListboxToTop()
	{
		ScrollListboxToIndex(0);
	}
	void ScrollListboxToIndex(int index)
	{
		if (index < 0 || index >= ListboxData!.Count - 1) return;
		listGrid?.MakeRowVisible(index);
	}

	void OnTabClick(TabClickEventArgs e)
	{
		activeTabIndex = e.TabIndex;
		filterText = null; // force a list reset
		ScrollListboxToTop();
	}

	void OnMapLink(MouseEventArgs args)
	{
		NavMan.NavigateTo("https://www.google.com/maps/embed/v1/place?key=AIzaSyCWgrdB2BvU2ShE9Q5xOSBcTdigmAzUm4k&q=Space+Needle,Seattle+WA", true);
	}

	string ClassTitle(Class c)
	{
		string result = string.Empty;
		if (c.OccurrenceID == null) { return result; }
		if ((OccurrenceType)c.OccurrenceID == OccurrenceType.Unscheduled)
		{
			result = "Unscheduled";
		}
		else { result = c.OnDay.Day.Trim(); }
		return $"{result}: {c.Course.Name}";
	}

	void OnReturnToMenu()
	{
		NavMan.NavigateTo("/public");
	}

}
