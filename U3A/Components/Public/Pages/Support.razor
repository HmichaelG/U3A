@page "/Public/Support"

@using U3A.Model
@using U3A.Services;
@using System.Text;

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager navMan
@inject ReCaptchaV2API reCaptchaAPI
@inject IJSRuntime js

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <MessageBox @ref=@successMessageBox>
        <TextTemplate>
            <p>
                Your request has been sent to your U3A's support representative and will be responded to.
                Please be aware that we are all volunteers and there may be a short delay in attending to your request.
            </p>
        </TextTemplate>
    </MessageBox>
    <MessageBox @ref=@failedMessageBox>
        <TextTemplate>
            <p>
                Your support request has failed reCAPTCHA verification.
                If you are not a robot, please feel free to try again.
            </p>
        </TextTemplate>
    </MessageBox>
    <MessageBox @ref=@errorMessageBox />

    <DxLoadingPanel @bind-Visible="@isBusy"
                    IsContentBlocked="true"
                    ApplyBackgroundShading="true"
                    IndicatorAreaVisible="false"
                    Text="Sending support request">

        <EditForm Model="@supportModel" class="card card-body col-12 p-2 col-sm-10 col-lg-6 mx-auto"
                  OnValidSubmit=@ValidFormSubmitted
                  Context="editContext">
            <h3>Request Support</h3>
            <p>
                Please enter or confirm your contact details and provide a clear, concise
                description of your issue.
                </p>
                <p>
                A dedicated member from @(settings?.U3AGroup) will be in contact soon.
                Please remember we are <b>volunteers</b> and thank you for your patience and understanding.
                We ask that you remain <b>courteous & respectful</b> in your communication.
            </p>
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem Caption="Your Name" ColSpanMd="12">
                    <DxTextBox @bind-Text="@supportModel!.Name" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Your Home Phone" ColSpanMd="12">
                    <DxTextBox @bind-Text="@supportModel!.Phone" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Your Mobile Number" ColSpanMd="12">
                    <DxTextBox @bind-Text="@supportModel!.Mobile" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Your Email Address" ColSpanMd="12">
                    <DxTextBox @bind-Text="@supportModel!.Email" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Issue Description" ColSpanMd="12">
                    <DxMemo Rows="8" @bind-Text="@supportModel!.Description" CssClass="w-100" />
                </DxFormLayoutItem>
                <div class="flex mt-2 mx-auto">
                    <ReCAPTCHA @ref="@reCAPTCHAComponent" SiteKey="6LcT11spAAAAAEc0vtGQmtI2Kv5jII5kB2pz5Gnn" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                </div>
                <footer class="input-group px-2 mt-2" id="footer">
                    <DxButton Enabled="@enableSubmitButton"
                              CssClass="flex-grow-1" IconCssClass="bi bi-save" SubmitFormOnClick="true" Text="Submit" />
                    <DxButton CssClass="flex-grow-1" IconCssClass="bi bi-x-circle" SubmitFormOnClick="false" Text="Cancel" RenderStyle="@ButtonRenderStyle.Secondary" onclick="history.back();" />
                </footer>
            </DxFormLayout>
        </EditForm>
    </DxLoadingPanel>
}

@code {
    [CascadingParameter]
    public LoginState? LoginState { get; set; }

    bool isReady;

    SystemSettings? settings;
    MessageBox? successMessageBox;
    MessageBox? failedMessageBox;
    MessageBox? errorMessageBox;
    SupportModel? supportModel;

    private ReCAPTCHA? reCAPTCHAComponent;
    private bool ValidReCAPTCHA = false;
    private bool ServerVerificatiing = false;
    private bool enableSubmitButton => ValidReCAPTCHA && !ServerVerificatiing;

    protected override async Task OnInitializedAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            settings = await dbc.SystemSettings.OrderBy(x => x.ID).FirstOrDefaultAsync();
        }
        supportModel = new();
        if (LoginState != null)
        {
            if (LoginState.SelectedPerson != null)
            {
                supportModel!.Name = LoginState.SelectedPerson.FullName;
                supportModel.Phone = LoginState.SelectedPerson.HomePhone!;
                supportModel.Mobile = LoginState.SelectedPerson.Mobile!;
                supportModel.Email = LoginState.SelectedPerson.Email;
            }
        }
        isReady = true;
    }


    bool isBusy;
    async Task ValidFormSubmitted(EditContext editContext)
    {
        if (isBusy) return;
        isBusy = true;
        if (await IsValidReCAPTCHAok())
        {
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                var emailSender = await EmailFactory.GetEmailSenderAsync(dbc);
                var sendTo = settings!.SupportEmailAddesss ?? settings.SendEmailAddesss;
                var msg = BuildMessage();
                var subject = $"!!!HEADS UP!!! {supportModel!.Name} requires your support.";
                await emailSender!.SendEmailAsync(
                                EmailType.Transactional,
                                "system@u3admin.org.au",
                                "System Postman",
                                sendTo,
                                "System Support & Assistance",
                                subject,
                                msg,
                                string.Empty
                                );
            }
            isBusy = false;
            await InvokeAsync(StateHasChanged);
            await successMessageBox!.ShowOkOnlyAsync("Support Request Sent");
            navMan.NavigateTo("/", true);
        }
        else
        {
            isBusy = false;
            await InvokeAsync(StateHasChanged);
            await failedMessageBox!.ShowOkOnlyAsync("Support Request Failed");
        }
    }

    string BuildMessage()
    {
        var txt = new StringBuilder();

        txt.AppendLine(@"<table style='width: 100%; border: 1pt solid black;'>");
        txt.AppendLine(@"<tr>
                                    <th colspan='2' style='text-align: left;
                                            padding-left: 10pt;
                                            border-bottom: 1pt solid black;'>
                                            Support request detail</th>
                                </tr>");
        txt.AppendLine($@"<tr>
                                    <td style='text-align: left;
                                            padding-left: 10pt;'>
                                            <strong>Name</strong></td>
                                    <td>{supportModel!.Name}</td>
                                    </tr>");
        txt.AppendLine($@"<tr>
                                    <td style='text-align: left;
                                            padding-left: 10pt;'>
                                            <strong>Email</strong></td>
                                    <td>{supportModel.Email}</td>
                                    </tr>");
        txt.AppendLine($@"<tr>
                                    <td style='text-align: left;
                                            padding-left: 10pt;'>
                                            <strong>Phone Number</strong></td>
                                    <td>{supportModel.Phone}</td>
                                    </tr>");
        txt.AppendLine($@"<tr>
                                    <td style='text-align: left;
                                            padding-left: 10pt;'>
                                            <strong>Mobile Number</strong></td>
                                    <td>{supportModel.Mobile}</td>
                                    </tr>");
        txt.AppendLine($@"<tr>
                                    <td style='text-align: left;
                                            padding-left: 10pt;'>
                                            <strong>Message</strong></td>
                                    <td>{supportModel.Description}</td>
                                    </tr>");
        txt.AppendLine($@"<tr>
                                    <td colspan='3' >
                                    </td>
                                    </tr>");
        txt.AppendLine("</table>");
        txt.AppendLine("<p>Please do not reply directly to this email as it is not being monitored.");
        return txt.ToString();
    }
    void OnCaptchaChanged(string newWord)
    {
        supportModel!.Captcha = newWord;
        supportModel.CaptchaResponse = "";
    }


    private void OnSuccess()
    {
        ValidReCAPTCHA = true;
    }

    private void OnExpired()
    {
        ValidReCAPTCHA = false;
    }

    private async Task<bool> IsValidReCAPTCHAok()
    {
        bool ok = false;
        if (ValidReCAPTCHA)
        {
            var response = await reCAPTCHAComponent!.GetResponseAsync();
            try
            {
                ServerVerificatiing = true;
                StateHasChanged();
                var result = await reCaptchaAPI.Post(response);
                if (result.Success)
                {
                    ok = true;
                }
            }
            catch (HttpRequestException e)
            {
                await errorMessageBox!.ShowOkOnlyAsync("System Error", e.Message);
            }
            finally
            {
                ServerVerificatiing = false;
                StateHasChanged();
            }
        }
        return ok;
    }


}