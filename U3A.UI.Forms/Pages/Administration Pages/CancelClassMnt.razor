@page "/CancelClassMnt"

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <MessageBox @ref="@messageBox" />
    <SelectDocumentTemplatePopup @ref="@selectDocumentTemplatePopup" dbContext="@dbc"
                                 DocumentTemplates="@DocumentTemplates" SendTo="@SendTo" />
    <Progress @ref="@ProgressBar" />
    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

    <div class="container">
        <ContextHelpTitle Title="Cancel Class" HelpTopic="cancel-class.html"></ContextHelpTitle>
        <div class="h6">
            Cancel a class for one or a range of dates.
        </div>
        <DxFormLayout>
            <DxTabs CssClass="mt-2">
                <DxTabPage Text="Cancel Class">
                    <ChildContent>
                        <DxFormLayoutGroup Caption="Cancellation Details">
                            <DxFormLayoutItem Caption="Term" ColSpanMd="12">
                                <DxComboBox Data="@terms" NullText="Select the Term required..."
                                            SearchMode="ListSearchMode.AutoSearch"
                                            TextFieldName="@nameof(Term.TermSummary)"
                                            Value="@selectedTerm"
                                            ValueChanged="@((Term term) => SelectedTermChanged(term))" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Course" ColSpanMd="12">
                                <DxComboBox Data="@courses"
                                            Enabled="@courseComboEnabled"
                                            NullText="Select the Course required..."
                                            SearchMode="ListSearchMode.AutoSearch"
                                            ListRenderMode="ListRenderMode.Virtual"
                                            TextFieldName="@nameof(Course.Name)"
                                            Value="@selectedCourse"
                                            ValueChanged="@((Course course) => SelectedCourseChanged(course))">
                                </DxComboBox>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Class To Cancel" ColSpanMd="12">
                                <DxComboBox @ref="@ClassComboBox" Data="@classes" Enabled="@classComboEnabled" NullText="Select the Class required..."
                                            TextFieldName="@nameof(Class.ClassSummary)"
                                            Value="@selectedClass"
                                            ValueChanged="@((Class selectedClass) => SelectedClassChanged(selectedClass))" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>

                        <FullScreen DisplayOffset="18">
                            <ContentTemplate>
                                <DxGrid @ref="mainGrid" Data="@Cancellations"
                                        ShowFilterRow="false"
                                        ShowAllRows="true"
                                        KeyFieldName="ID"
                                        ValidationEnabled="true"
                                        SelectionMode="GridSelectionMode.Multiple"
                                        AllowSelectRowByClick="true"
                                        @bind-SelectedDataItems="SelectedDataItems"
                                        CustomizeEditModel="Grid_CustomizeEditModel"
                                        EditMode="GridEditMode.PopupEditForm"
                                        DataItemDeleting="Grid_DataItemDeleting"
                                        EditModelSaving="Grid_EditModelSaving">
                                    <ToolbarTemplate>
                                        <GridToolbar LinkedGrid=@mainGrid>
                                            <CustomButtonContent>
                                                <DxToolbarItem Text="Add Cancellation"
                                                               Tooltip="Add a date or range of dates to cancel"
                                                               IconCssClass="bi bi-calendar"
                                                               Enabled=@(selectedClass != null)
                                                               Click="@OnAddCancellation"
                                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                                               RenderStyle="ButtonRenderStyle.Primary" />
                                                <DxToolbarItem Text="Communicate"
                                                               Click="@OnCommunicate"
                                                               Enabled=@(selectedClass != null)
                                                               IconCssClass="bi bi-envelope"
                                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                                               RenderStyle="ButtonRenderStyle.Primary" />
                                            </CustomButtonContent>
                                        </GridToolbar>
                                    </ToolbarTemplate>
                                    <Columns>
                                        <DxGridSelectionColumn Width="2rem" />
                                        <DxGridCommandColumnEx @ref="GridCommandColumn" Width="8rem"
                                                               EditButtonVisible="true" DeleteButtonVisible="true" NewButtonVisible="true" />
                                        <DxGridDataColumn Width="6rem" Caption="Start Date" FieldName="StartDate" />
                                        <DxGridDataColumn Width="6rem" Caption="End Date" FieldName="EndDate" />
                                        <DxGridDataColumn Caption="Reason" FieldName="Reason" />
                                    </Columns>

                                    <EditFormTemplate Context="EditFormContext">
                                        @{
                                            var editItem = (CancelClass)EditFormContext.EditModel;
                                        }
                                        <DxFormLayout>
                                            <DxFormLayoutItem ColSpanMd="12">
                                                <ValidationSummary />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Start Date" ColSpanMd="12">
                                                <DxDateEdit @bind-Date="@editItem.StartDate" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="End Date" ColSpanMd="12">
                                                <DxDateEdit @bind-Date="@editItem.EndDate" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Reason" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.Reason" />
                                            </DxFormLayoutItem>
                                        </DxFormLayout>
                                    </EditFormTemplate>
                                </DxGrid>
                            </ContentTemplate>
                        </FullScreen>
                    </ChildContent>
                </DxTabPage>

                <DxTabPage Text="Current Cancellations">
                    <ChildContent>
                        <FullScreen>
                            <ContentTemplate>
                                <DxGrid @ref="displayGrid" Data="@CancellationsThisTerm"
                                        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                                        ValidationEnabled="true"
                                        ShowFilterRow="false"
                                        ShowAllRows="true"
                                        AutoExpandAllGroupRows="true"
                                        KeyFieldName="ID"
                                        AllowSelectRowByClick="true"
                                        SelectionMode="GridSelectionMode.Single"
                                        EditMode="GridEditMode.PopupEditForm"
                                        DataItemDeleting="DisplayGrid_DataItemDeleting"
                                        EditModelSaving="DisplayGrid_EditModelSaving">
                                    <ToolbarTemplate>
                                        <GridToolbar LinkedGrid=@displayGrid />
                                    </ToolbarTemplate>
                                    <Columns>
                                        <DxGridCommandColumnEx @ref="GridCommandColumn" Width="8rem"
                                                               EditButtonVisible="true" DeleteButtonVisible="true" NewButtonVisible="false" />
                                        <DxGridDataColumn Caption="Course" FieldName="Class.Course.Name" GroupIndex="0" />
                                        <DxGridDataColumn Caption="Class" FieldName="Class.ClassSummary" GroupIndex="1" />
                                        <DxGridDataColumn Width="6rem" Caption="Start Date" FieldName="StartDate" />
                                        <DxGridDataColumn Width="6rem" Caption="End Date" FieldName="EndDate" />
                                        <DxGridDataColumn Caption="Reason" FieldName="Reason" />
                                    </Columns>
                                    <EditFormTemplate Context="EditFormContext">
                                        @{
                                            var editItem = (CancelClass)EditFormContext.EditModel;
                                        }
                                        <DxFormLayout>
                                            <DxFormLayoutItem ColSpanMd="12">
                                                <ValidationSummary />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Start Date" ColSpanMd="12">
                                                <DxDateEdit @bind-Date="@editItem.StartDate" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="End Date" ColSpanMd="12">
                                                <DxDateEdit @bind-Date="@editItem.EndDate" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Reason" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.Reason" />
                                            </DxFormLayoutItem>
                                        </DxFormLayout>
                                    </EditFormTemplate>
                                </DxGrid>
                            </ContentTemplate>
                        </FullScreen>
                    </ChildContent>
                </DxTabPage>
            </DxTabs>
        </DxFormLayout>
    </div>

}


@code {
    bool IsReady;
    private List<CancelClass>? Cancellations { get; set; }
    private List<CancelClass>? CancellationsThisTerm { get; set; }

    private List<Term>? terms { get; set; }
    private Term? selectedTerm { get; set; }

    private List<Course>? courses { get; set; }
    private Course? selectedCourse { get; set; }

    private List<Class>? classes { get; set; }
    private Class? selectedClass { get; set; }

    string? HeaderContent;
    string? MessageContent;
    MessageBox? messageBox { get; set; }
    bool MessageBoxShowCancelButton;

    private bool classComboEnabled;
    private bool courseComboEnabled;


    private DxGridCommandColumnEx? GridCommandColumn;
    private DxComboBox<Class, Class?> ClassComboBox;

    int MinimumParticipants;
    int MaximumParticipants;
    int EnrolledParticipants;
    int WaitlistedParticipants;
    string ClassStatus = "Status: N/A";
    ButtonRenderStyle buttonRenderStyle = ButtonRenderStyle.Light;

    IGrid? mainGrid { get; set; }
    IGrid? displayGrid { get; set; }
    IReadOnlyList<object>? SelectedDataItems { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    string? ErrorHeader;
    string? ErrorMessage;
    U3ADbContext? dbc { get; set; }

    Communication Communication;
    private List<Person> SendTo { get; set; }
    private List<DocumentTemplate> DocumentTemplates;
    private SelectDocumentTemplatePopup selectDocumentTemplatePopup;
    DocumentServer server;
    int documentsSent;
    internal Progress? ProgressBar;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();

        Communication = new Communication();
        DocumentTemplates = await BusinessRule.SelectableDocumentTemplatesAsync(dbc);
        server = new DocumentServer(dbc);
        server.DocumentSentEvent += Server_DocumentSent;

        terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
        selectedTerm = await BusinessRule.CurrentTermAsync(dbc);
        courseComboEnabled = false;
        if (selectedTerm != null) { await SelectedTermChanged(selectedTerm); }
        IsReady = true;
    }

    async Task SelectedTermChanged(Term term)
    {
        ClearSelection();
        selectedTerm = term;
        selectedCourse = null;
        selectedClass = null;
        classComboEnabled = false;
        courseComboEnabled = false;
        if (Cancellations != null) { Cancellations.Clear(); }
        StateHasChanged();
        courses = await BusinessRule.SelectableCoursesByTermAsync(dbc, term.Year, term.TermNumber);
        await GetCancellationsForTermAsync();
        courseComboEnabled = true;
        StateHasChanged();
    }

    async Task SelectedCourseChanged(Course course)
    {
        selectedCourse = course;
        classes = selectedCourse.Classes;
        if (Cancellations != null) { Cancellations.Clear(); }
        SetupClassToCancel();
        await SetupGrid();
    }

    async Task SelectedClassChanged(Class Class)
    {
        selectedClass = Class;
        await SetupGrid();
    }

    async Task SetupGrid()
    {
        mainGrid?.BeginUpdate();
        ClearSelection();
        GridCommandColumn.Visible = false;
        if (selectedCourse != null && selectedClass != null)
        {
            GridCommandColumn.Visible = true;
            await GetCancellationsAsync();
        }
        mainGrid?.EndUpdate();
        StateHasChanged();
    }

    void ClearSelection()
    {
        SendTo = null;
        SelectedDataItems = null;
    }

    async Task GetCancellationsForTermAsync()
    {
        if (selectedTerm == null) return;
        CancellationsThisTerm = await BusinessRule.CancelledClassForTermAsync(dbc, selectedTerm);
    }
    async Task GetCancellationsAsync()
    {
        if (selectedTerm == null) return;
        if (selectedClass == null) return;
        Cancellations = await BusinessRule.EditableCancelClassAsync(dbc, selectedTerm, selectedClass);
    }

    void SetupClassToCancel()
    {
        selectedClass = null;
        classComboEnabled = true;
        if (selectedCourse?.Classes.Count >= 1)
        {
            selectedClass = classes?[0];
        }
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e, false);
        }
        finally
        {
            isBusy = false;
        }
    }
    async Task DisplayGrid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e, true);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e, bool isDisplayGrid)
    {
        var editModel = (CancelClass)e.EditModel;
        if (!await IsDataOk(editModel))
        {
            e.Cancel = true; return;
        }
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new CancelClass() : dbc.CancelClass.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        if (dataItem != null)
        {
            editModel.CopyTo(dataItem);
            if (selectedClass != null) { dataItem.Class = dbc.Class.Find(selectedClass.ID); }
            // Post changes to the database.
            if (e.IsNew) await dbc.AddAsync(dataItem);
            if (await SaveChangesAsync())
            {
                if (!isDisplayGrid)
                {
                    // update the Grid.
                    if (e.IsNew)
                    {
                        Cancellations?.Insert(0, dataItem);
                    }
                    else
                    {
                        int idx = Cancellations.FindIndex(x => x.ID == dataItem.ID);
                        Cancellations[idx] = dataItem;
                    }
                    await SetupGrid();
                }
                await GetCancellationsForTermAsync();
                await GetCancellationsAsync();
            }
            else { e.Cancel = true; }
        }
    }
    async Task<bool> IsDataOk(CancelClass editItem)
    {
        bool result = true;
        if (editItem.StartDate > editItem.EndDate)
        {
            await messageBox.ShowOkOnlyAsync("Invalid Dates", "Start Date must be equal to or earlier than End Date.");
            result = false;
        }
        return result;
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var c = (CancelClass)e.DataItem;
        await DeleteItem(c);
        mainGrid?.ClearSelection();
        await SetupGrid();
    }

    async Task DisplayGrid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var c = (CancelClass)e.DataItem;
        await DeleteItem(c);
    }

    async Task DeleteItem(CancelClass c)
    {
        dbc?.Remove<CancelClass>(await dbc.CancelClass.FindAsync(c.ID));
        await SaveChangesAsync();
        await GetCancellationsForTermAsync();
        await GetCancellationsAsync();
    }


    async Task<bool> SaveChangesAsync()
    {
        bool result = false;
        try
        {
            // Post changes to the database.
            await dbc.SaveChangesAsync();
            result = true;
        }
        catch (Exception ex)
        {
            ErrorHeader = "Save to database error";
            ErrorMessage = Helpers.GetErrorMessage(ex);
            await ErrorPopup.ShowPopupAsync();
            dbc?.ChangeTracker.Clear();
        }
        return result;
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (selectedClass == null)
        {
            await messageBox.ShowOkOnlyAsync("Course / Class is undefined",
                "Please ensure you have selected the course / class before clicking the + button.");
            return;
        };
        if (e.IsNew)
        {
            var editModel = (CancelClass)e.EditModel;
            editModel.StartDate = DateTime.Today;
            if (selectedTerm?.StartDate > DateTime.Today)
            {
                editModel.StartDate = selectedTerm.StartDate;
            }
            else { editModel.StartDate = DateTime.Today; }
            editModel.EndDate = editModel.StartDate;
        }
    }

    async Task OnAddCancellation()
    {
        await mainGrid.StartEditNewRowAsync();
    }

    async Task OnCommunicate()
    {

        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await messageBox.ShowOkOnlyAsync("Make a Selection", "Select one or more participants to communicate with.");
            return;
        }
        SendTo = new List<Person>();
        foreach (var e in SelectedDataItems.Cast<CancelClass>().ToList())
        {
            SendTo.AddRange(await BusinessRule.GetPersonsInClassAsync(dbc, e.ClassID));
        };
        if (await selectDocumentTemplatePopup.ShowAsync())
        {
            documentsSent = 0;
            await ProgressBar.ShowAsync("Sending ... Please Wait", SelectedDataItems.Count);
            List<ExportData> exportData = await BusinessRule.GetExportDataAsync(dbc, SendTo);
            bool overridePreference = selectDocumentTemplatePopup.OverrideCommunicationPreference;
            await server.MailMerge(dbc, selectDocumentTemplatePopup.SelectedDocumentTemplate, exportData, overridePreference);
            await ProgressBar.Close();
            await messageBox.ShowOkOnlyAsync("Communication Complete", server.GetHTMLResult());
        }
    }

    async void Server_DocumentSent(object sender, DocumentSentEventArgs e)
    {
        documentsSent += e.DocumentsSent;
        await ProgressBar.SetValueAsync(documentsSent);
    }


    public void Dispose()
    {
        dbc?.Dispose();
    }

}
