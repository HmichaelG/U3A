@page "/Backup"

@using System.Data
@using System.IO
@using Microsoft.Data.SqlClient
@using ClosedXML.Excel
@using Serilog;
@using ICSharpCode.SharpZipLib.Zip;

@inject IJSRuntime js;
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject LocalTime localTime;

<HeadContent>
    <script>
        window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
        }
    </script>
</HeadContent>

<div class="col col-md-6 h-75">
    <h3>Database Backup</h3>
    <p>
        This procedure will create a dump of your database and download it
        as an Excel workbook. Each worksheet within the workbook is a table in the database. It is intended as an aid to transition to another
        software application rather than a formal backup. Formal backups are securely maintained within Microsoft's Azure datacenters.
    </p>
    <p>The downloaded spreadsheet contains your member's private information. It is password protected with the password entered below. Please treat with care and in accordance with privacy legislation in your State.</p>

    <DxFormLayoutItem BeginRow="true" ColSpanMd="12"
    Caption="File Password"
    CaptionPosition="CaptionPosition.Horizontal">
        <DxTextBox @bind-Text="@password"
        NullText="Enter a password of at least 5 characters"
        Password="@(!showPassword)" autocomplete="new-password">
            <Buttons>
                <DxEditorButton IconCssClass="bi bi-eye"
                Tooltip="Show/hide password"
                Click="@(() => showPassword = !showPassword)" />
            </Buttons>
        </DxTextBox>
    </DxFormLayoutItem>

    <DxButton Text="Do Backup" CssClass="mt-2"
    Click="@DoBackup"
    Enabled="@(!string.IsNullOrWhiteSpace(password) && password.Length >= 5)" />

    <DxFormLayoutItem BeginRow="true" ColSpanMd="12"
    Caption="Status" Visible="@(!string.IsNullOrWhiteSpace(state))"
    CaptionPosition="CaptionPosition.Vertical">
        <DxMemo @bind-Text="@state" ReadOnly="true" Rows="15" />
    </DxFormLayoutItem>
    <div>@(new MarkupString(finishText))</div>
</div>

@code {
    string state;
    string finishText;
    string password;
    bool showPassword = false;


    private async Task DoBackup()
    {
        state = finishText = "";
        string connectionString;
        using (var db = await U3Adbfactory.CreateDbContextAsync())
        {
            // Get the connection string from the database context
            connectionString = db.TenantInfo.ConnectionString;
        }
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            con.Open();

            // Get all table names
            DataTable tables = con.GetSchema("Tables", new string[] { null, null, null, "BASE TABLE" });
            DataView dv = tables.DefaultView;
            dv.Sort = "TABLE_NAME";

            using (XLWorkbook wb = new XLWorkbook())
            {
                foreach (DataRowView row in dv)
                {
                    string tableName = row["TABLE_NAME"].ToString();
                    if (tableName.StartsWith("AspNet") || tableName.StartsWith("__EF"))
                    {
                        continue; // Skip AspNet and EF Core migrations tables
                    }
                    ;
                    state += $"Exporting table: {tableName}\n";
                    StateHasChanged();
                    using (SqlCommand cmd = new SqlCommand($"SELECT * FROM {tableName}", con))
                    {
                        DataTable dt = await FillDataTableAsync(cmd);
                        var ws = wb.Worksheets.Add(dt, tableName);
                        ws.Columns().AdjustToContents();
                    }
                }

                // Save the workbook
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    stream.Position = 0;
                    var now = await localTime.GetLocalTimeAsync();
                    var strNow = now.ToString("yyyy-MMM-dd HHmmss");
                    var fileName = $"DatabaseExport {strNow}.xlsx";
                    var fileStream = new DotNetStreamReference(new MemoryStream(await CompressMemoryStream(stream, fileName)));
                    var zipName = $"DatabaseExport {strNow}.zip";
                    await js.InvokeVoidAsync("downloadFileFromStream", zipName, fileStream);
                    finishText = $"File: <b>{fileName}</b> download successfully initiated.";
                }
            }
        }
        StateHasChanged();
    }

    public async Task<byte[]> CompressMemoryStream(MemoryStream inputStream, string fileNameInZip)
    {
        byte[] result;
        inputStream.Position = 0; // Reset the position of the input stream to the beginning
        using (var outStream = new MemoryStream())
        {
            using (ZipOutputStream zipStream = new ZipOutputStream(outStream))
            {
                zipStream.Password = password;
                zipStream.SetLevel(9);
                ZipEntry entry = new ZipEntry(fileNameInZip);
                zipStream.PutNextEntry(entry);
                await inputStream.CopyToAsync(zipStream);
                await zipStream.CloseEntryAsync(new CancellationToken());
                zipStream.IsStreamOwner = false; // Do not close the underlying stream
                await zipStream.FinishAsync(new CancellationToken());
                outStream.Position = 0;
                result = outStream.ToArray();
            }
        }
        return result; // Return the ZIP as a byte array
    }

    public static async Task<DataTable> FillDataTableAsync(SqlCommand cmd)
    {
        DataTable dt = null;
        using (var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SequentialAccess))
        {

            DataTable schemaTable = await reader.GetSchemaTableAsync();
            dt = new DataTable();
            List<string> byteColumns = new();
            foreach (DataRow row in schemaTable.Rows)
            {
                Type type = row.Field<Type>("DataType");
                string columnName = row.Field<string>("ColumnName");
                if (type == typeof(byte[]))
                {
                    type = typeof(string);
                    byteColumns.Add(columnName);
                }
                dt.Columns.Add(columnName, type);
            }

            while (await reader.ReadAsync())
            {
                DataRow dr = dt.Rows.Add();
                foreach (DataColumn col in dt.Columns)
                {
                    if (byteColumns.Contains(col.ColumnName))
                    {
                        var bytes = reader[col.ColumnName] as byte[];
                        dr[col.ColumnName] = bytes != null ? System.Text.Encoding.UTF8.GetString(bytes) : null;
                    }
                    else
                    {
                        dr[col.ColumnName] = reader[col.ColumnName];
                    }
                    if (dr[col.ColumnName].ToString().Length >= Int16.MaxValue)
                    {
                        dr[col.ColumnName] = null;
                    }
                }
            }
        }
        return dt;
    }
}


