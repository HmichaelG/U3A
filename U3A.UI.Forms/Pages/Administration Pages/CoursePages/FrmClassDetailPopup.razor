@inject NavigationManager NavMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<MessageBox @ref="@messageBox" />
<Progress @ref=@progressBar />
<CommonClassProcedures @ref=@commonClassProcedures />

<DxGrid @ref="@grid" Data="@Course.Classes" CssClass="grid-style"
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        PagerVisible=false
        KeyFieldName="ID"
        ValidationEnabled="true"
        TextWrapEnabled=false
        PopupEditFormCssClass="classPopup-width"
        PopupEditFormHeaderText="Add/Edit Class"
        CustomizeEditModel="Grid_CustomizeEditModel"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        VirtualScrollingEnabled=false
        EditMode="GridEditMode.PopupEditForm">
    <Columns>
        <DxGridDataColumn Caption="Offered" FieldName="OfferedSummary" Width="7rem" />
        <DxGridDataColumn Caption="Venue" FieldName="Venue.Name" />
        <DxGridDataColumn Caption="Occurs" FieldName="OccurrenceTextBrief" Visible="@(AllowEdit)" />
        <DxGridDataColumn Caption="Occurs" FieldName="OccurrenceText" Visible="@(!AllowEdit)" />
        <DxGridDataColumn Caption="Start" FieldName="StartTime" DisplayFormat="t" Width="5rem" />
        <DxGridDataColumn Caption="Finish"
                          FieldName="StrEndTime" DisplayFormat="t" Width="5rem" Visible="@(!AllowEdit)" />
        <DxGridDataColumn Caption="Leader" FieldName="LeaderSummaryBrief" Width="10rem" Visible="@AllowEdit" />
        <DxGridDataColumn Caption="Leader" FieldName="LeaderSummary" Visible="@(!AllowEdit)" Width="40rem" />
        <DxGridCommandColumnEx EditButtonVisible="true"
                               NewButtonVisible="true"
                               DeleteButtonVisible="true" Visible="@AllowEdit" />
    </Columns>
    <DetailRowTemplate>
        @{
            var Class = (Class)context.DataItem;
            <CopyToClipboard Text=@($"{NavMan.BaseUri}EnrolClass={Class.ID}") />
        }

    </DetailRowTemplate>
    <EditFormTemplate Context="ClassContext">
        @{
            var editItem = (Class)ClassContext.EditModel;
        }
        <DxFormLayout>
            <DxFormLayoutItem ColSpanMd="12">
                <ValidationSummary />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Offered:" ColSpanMd="3" />
            <DxFormLayoutItem Caption="Term-1" CssClass="border border-primary me-1" ColSpanMd="2">
                <DxCheckBox @bind-Checked="editItem.OfferedTerm1" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Term-2" CssClass="border border-primary me-1" ColSpanMd="2">
                <DxCheckBox @bind-Checked="editItem.OfferedTerm2" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Term-3" CssClass="border border-primary me-1" ColSpanMd="2">
                <DxCheckBox @bind-Checked="editItem.OfferedTerm3" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Term-4" CssClass="border border-primary" ColSpanMd="2">
                <DxCheckBox @bind-Checked="editItem.OfferedTerm4" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Guest Leader" ColSpanMd="12">
                <DxTextBox @bind-Text="editItem.GuestLeader"
                           NullText="A non-member presenter, leader or speaker"
                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Leader 1" ColSpanMd="12">
                <PersonsComboBox People="@Persons" @bind-SelectedPerson="@editItem.Leader" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Leader 2" ColSpanMd="12">
                <PersonsComboBox People="@Persons" @bind-SelectedPerson="@editItem.Leader2" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Leader 3" ColSpanMd="12">
                <PersonsComboBox People="@Persons" @bind-SelectedPerson="@editItem.Leader3" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Venue" ColSpanMd="12">
                <DxComboBox Data="Venues"
                            SearchMode="ListSearchMode.AutoSearch"
                            @bind-Value="editItem.Venue"
                            TextFieldName="@nameof(Venue.Name)">
                </DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Start Date" ColSpanMd="12">
                <DxDateEdit T="DateTime?" Date="@editItem.StartDate" DateExpression="@(() => editItem.StartDate)"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            NullText="Start Date of class. Only if not the Start of Term"
                            DateChanged="@((DateTime? newValue) => OnStartDateChanged(newValue, editItem))" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Recurrence" ColSpanMd="12">
                <DxSpinEdit @bind-Value="editItem.Recurrence" MinValue="1" MaxValue="52"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            NullText="The number of times the class recurs. Requires Start Date." />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Occurrence" ColSpanMd="12">
                <DxComboBox Data="Occurrences"
                            @bind-Value="editItem.Occurrence"
                            TextFieldName="@nameof(Occurrence.Name)">
                </DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="On Day" ColSpanMd="12">
                <DxComboBox Data="WeekDays" Enabled="@commonClassProcedures.IsNotUnscheduled(editItem,WeekDays)"
                            SearchMode="ListSearchMode.AutoSearch"
                            @bind-Value="editItem.OnDay"
                            TextFieldName="@nameof(WeekDay.Day)" ReadOnly="@IsOnDayReadOnly">
                </DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Start Time" ColSpanMd="12">
                <DxTimeEdit DisplayFormat="t" @bind-Time="editItem.StartTime"
                            Enabled="@commonClassProcedures.IsNotUnscheduled(editItem,WeekDays)" />
            </DxFormLayoutItem>

        </DxFormLayout>
    </EditFormTemplate>

</DxGrid>

<style>
    .grid-style {
        min-height: 0rem;
        max-height: 7.5rem;
    }

    .classPopup-width {
        min-width: 50rem;
        max-width: 98%;
    }

    .deleted-item {
        background-color: red;
        color: white;
    }
</style>

@code {

    [Parameter]
    public Course? Course { get; set; }
    [Parameter]
    public IEnumerable<Venue>? Venues { get; set; }
    [Parameter]
    public IEnumerable<Person>? Persons { get; set; }
    [Parameter]
    public IEnumerable<WeekDay>? WeekDays { get; set; }
    [Parameter]
    public bool AllowEdit { get; set; } = false;
    [Parameter]
    public U3ADbContext? DbContext { get; set; }
    [Parameter]
    public List<Occurrence>? Occurrences { get; set; }

    public IGrid? grid { get; set; }
    MessageBox? messageBox;
    Progress? progressBar;
    CommonClassProcedures? commonClassProcedures;


    bool IsOnDayReadOnly;

    // TODO: Enable during Xmas break???
    bool isRecurrenceReadonly;

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var editModel = (Class)e.EditModel;
        if (e.IsNew)
        {
            editModel.Occurrence = Occurrences.FirstOrDefault(x => x.ID == (int)OccurrenceType.Weekly);
        }
        IsOnDayReadOnly = (editModel.StartDate != null);
        isRecurrenceReadonly = (editModel.StartDate == null);
    }


    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Class)e.EditModel;
        if (!await IsDataOk(editModel, e.IsNew)) { e.Cancel = true; return; }
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new Class() : DbContext?.Class.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        editModel.CopyTo(dataItem);
        dataItem.Venue = DbContext.Venue.Find(editModel.Venue.ID);
        if (editModel.StartDate.HasValue)
        {
            dataItem.OnDay = DbContext.WeekDay.Find((int)editModel.StartDate.Value.DayOfWeek);
        }
        else
        {
            dataItem.OnDay = DbContext.WeekDay.Find(editModel.OnDay.ID);
        }
        dataItem.OnDayID = dataItem.OnDay.ID;
        dataItem.Occurrence = DbContext.Occurrence.Find(editModel.Occurrence.ID);
        if (editModel.Leader != null) { dataItem.Leader = DbContext.Person.Find(editModel.Leader.ID); }
        if (editModel.Leader2 != null) { dataItem.Leader2 = DbContext.Person.Find(editModel.Leader2.ID); }
        if (editModel.Leader3 != null) { dataItem.Leader3 = DbContext.Person.Find(editModel.Leader3.ID); }
        var t = dataItem.StartTime;
        dataItem.StartTime = new DateTime(1, 1, 1, t.Hour, t.Minute, 0);
        // Post changes to the database.
        if (e.IsNew) await DbContext.AddAsync(dataItem);
        if (e.IsNew)
        {
            Course.Classes.Insert(0, dataItem);
        }
        else
        {
            int idx = Course.Classes.FindIndex(x => x.ID == dataItem.ID);
            Course.Classes[idx] = dataItem;
        }
    }

    async Task<bool> IsDataOk(Class EditModel, bool IsNew)
    {
        return await commonClassProcedures.IsDataOk(DbContext, EditModel, IsNew);
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        await DbContext.SaveChangesAsync();
        Class classToDelete = (Class)e.DataItem;
        await BusinessRule.DeleteEnrolmentByClassID(DbContext, classToDelete.ID);
        DbContext.Remove<Class>(classToDelete);
        Course.Classes.Remove(classToDelete);
        await DbContext.SaveChangesAsync();
        grid.ClearSelection();
    }

    async Task OnStartDateChanged(DateTime? newStartDate, Class editItem)
    {
        IsOnDayReadOnly = await commonClassProcedures.OnStartDateChanged(newStartDate, editItem);
        isRecurrenceReadonly = (newStartDate == null);
        if (isRecurrenceReadonly) editItem.Recurrence = null;
    }

}

