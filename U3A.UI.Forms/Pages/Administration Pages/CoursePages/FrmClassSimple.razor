@inject NavigationManager NavMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<MessageBox @ref="@messageBox" />
<Progress @ref=@progressBar />
<CommonClassProcedures @ref=@commonClassProcedures />

@if (editItem != null)
{
    <EditForm @ref=@editForm Context="classContext" Model="@editItem">
        <DataAnnotationsValidator />
        <DxFormLayout>
            <DxFormLayoutGroup Caption="Class Detail">
                <HeaderContentTemplate>
                    <div class="d-flex input-group">
                        <div class="flex-grow-1">
                            Class Detail
                        </div>
                        <div class="flex-grow-0">
                            <DxCheckBox CssClass="align-content-end" tabindex="-1"
                                        @bind-Checked=@showFullDetail
                                        LabelPosition="LabelPosition.Left">Show Detail</DxCheckBox>
                        </div>
                    </div>
                </HeaderContentTemplate>
                <Items>
                    <DxFormLayoutItem ColSpanMd="12">
                        <ValidationSummary />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Offered:" ColSpanMd="3" />
                    <DxFormLayoutItem Caption="Term-1" ColSpanMd="2"
                                      CssClass="border border-primary me-2">
                        <DxCheckBox @bind-Checked="editItem.OfferedTerm1" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Term-2" ColSpanMd="2"
                                      CssClass="border border-primary me-2">
                        <DxCheckBox @bind-Checked="editItem.OfferedTerm2" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Term-3" ColSpanMd="2"
                                      CssClass="border border-primary me-2">
                        <DxCheckBox @bind-Checked="editItem.OfferedTerm3" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Term-4" ColSpanMd="2"
                                      CssClass="border border-primary">
                        <DxCheckBox @bind-Checked="editItem.OfferedTerm4" />
                    </DxFormLayoutItem>

                    <DxFormLayoutGroup Decoration="FormLayoutGroupDecoration.None" ColSpanMd="8">
                        <DxFormLayoutItem Caption="Guest Leader" ColSpanMd="12" Visible=@(showFullDetail || IsActivityView || editItem.GuestLeader !=null)>
                            <DxTextBox @bind-Text="editItem.GuestLeader"
                                       NullText="A non-member presenter, leader or speaker"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Leader 1" ColSpanMd="12">
                            <DxComboBox Data="Persons"
                                        ListRenderMode="ListRenderMode.Virtual"
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        @bind-Value="editItem.Leader"
                                        TextFieldName="@nameof(Person.PersonSummary)">
                            </DxComboBox>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Leader 2" ColSpanMd="12" Visible=@(showFullDetail || editItem.Leader2 != null)>
                            <DxComboBox Data="Persons"
                                        ListRenderMode="ListRenderMode.Virtual"
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        @bind-Value="editItem.Leader2"
                                        TextFieldName="@nameof(Person.PersonSummary)">
                            </DxComboBox>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Leader 3" ColSpanMd="12" Visible=@(showFullDetail || editItem.Leader3 != null)>
                            <DxComboBox Data="Persons"
                                        ListRenderMode="ListRenderMode.Virtual"
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        @bind-Value="editItem.Leader3"
                                        TextFieldName="@nameof(Person.PersonSummary)">
                            </DxComboBox>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Venue" ColSpanMd="12">
                            <DxComboBox Data="Venues"
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        @bind-Value="editItem.Venue"
                                        TextFieldName="@nameof(Venue.Name)">
                            </DxComboBox>
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>

                    <DxFormLayoutGroup Decoration="FormLayoutGroupDecoration.None" ColSpanMd="4">
                        <DxFormLayoutItem Caption="Start Date" ColSpanMd="12" Visible=@(showFullDetail || IsActivityView || editItem.StartDate != null)>
                            <DxDateEdit T="DateTime?" Date="@editItem.StartDate" DateExpression="@(() => editItem.StartDate)"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        NullText="Start Date of class. Only if not the Start of Term"
                                        DateChanged="@((DateTime? newValue) => OnStartDateChanged(newValue, editItem))" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Recurrence" ColSpanMd="12" Visible=@(showFullDetail || editItem.Recurrence != null)>
                            <DxSpinEdit @bind-Value="editItem.Recurrence" MinValue="1" MaxValue="52"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        NullText="The number of times the class recurs. Only if not End of Term." />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Occurrence" ColSpanMd="12" Visible=true>
                            <DxComboBox Data="occurrence"
                                        @bind-Value="editItem.Occurrence"
                                        TextFieldName="@nameof(Occurrence.Name)">
                            </DxComboBox>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="On Day" ColSpanMd="12">
                            <DxComboBox Data="WeekDays"
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        @bind-Value="editItem.OnDay"
                                        TextFieldName="@nameof(WeekDay.Day)" ReadOnly="@IsOnDayReadOnly">
                            </DxComboBox>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Start Time" ColSpanMd="12">
                            <DxTimeEdit DisplayFormat="t" @bind-Time="editItem.StartTime" />
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>
                </Items>
            </DxFormLayoutGroup>
        </DxFormLayout>
    </EditForm>
}
<style>
    .classPopup-width {
        min-width: 40rem;
    }

</style>

@code {

    [Parameter]
    public Course? Course { get; set; }
    [Parameter]
    public IEnumerable<Venue>? Venues { get; set; }
    [Parameter]
    public IEnumerable<Person>? Persons { get; set; }
    [Parameter]
    public IEnumerable<WeekDay>? WeekDays { get; set; }
    [Parameter, EditorRequired]
    public bool IsActivityView { get; set; }
    [Parameter, EditorRequired]
    public U3ADbContext DbContext { get; set; }


    List<Occurrence>? occurrence { get; set; }

    public Class editItem { get; set; }
    EditForm? editForm;

    MessageBox? messageBox;
    Progress? progressBar;
    ValidationSummary validator;
    CommonClassProcedures? commonClassProcedures;

    bool IsOnDayReadOnly;
    bool showFullDetail = false;
    public bool isNewRecord { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsOnDayReadOnly = false;
        using (var DbContext = await U3Adbfactory.CreateDbContextAsync())
        {
            occurrence = DbContext.Occurrence.AsNoTracking().ToList();
            if (Course.Classes.Count <= 0)
            {
                editItem = new Class();
                if (Course.EditType == CourseEditViewType.Activity)
                { editItem.Occurrence = occurrence.First(x => x.ID == (int)OccurrenceType.OnceOnly); }
                else
                { editItem.Occurrence = occurrence.First(x => x.ID == (int)OccurrenceType.Weekly); }
                isNewRecord = true;
            }
            else
            {
                editItem = Course.Classes[0];
                if (editItem.StartDate != null) { IsOnDayReadOnly = true; }
                isNewRecord = false;
            }
        }
        await base.OnInitializedAsync();
    }

    public async Task<bool> IsSaveRecordOkAsync()
    {
        bool result = false;
        if (editForm.EditContext.Validate())
        {
            using (var DbContext = await U3Adbfactory.CreateDbContextAsync())
            {
                result = await commonClassProcedures.IsDataOk(DbContext, editItem, isNewRecord);
            }
        }
        return result;
    }

    async Task OnStartDateChanged(DateTime? newStartDate, Class editItem)
    {
        IsOnDayReadOnly = await commonClassProcedures.OnStartDateChanged(newStartDate, editItem);
    }
}

