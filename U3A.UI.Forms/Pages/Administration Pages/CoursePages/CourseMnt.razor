@page "/CourseMnt"

@inject NavigationManager NavMan
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject IHttpContextAccessor HttpContextAccessor
@inject TenantInfoService tenantService
@implements IDisposable

@using Microsoft.AspNetCore.Http
@using U3A.UI.Forms.Pages.Shared
@using U3A.UI.Forms.Pages.MembersPortal
@using System.Reflection
@using System.Text
@using U3A.Services.APIClient


@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="row">
        <div class="col col-lg-10">
            <ContextHelpTitle Title="Courses" HelpTopic="Add_Edit-Courses.html" />
            <p>
                Courses are studies and/or activities undertaken by participants.
                <strong>Note:</strong> A course must have at least one class to enable enrolments.
            </p>
        </div>
        <div class="col col-lg-2">
            <YearComponent @ref="@yearComponent" OnYearChangedEvent="SelectedYearChanged" />
        </div>
    </div>

    <Progress @ref=@progressBar />
    <MessageBox @ref="@messageBox" />
    <SelectCourseView @ref="selectCourseView"
    PopupWidth="50rem" />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

    <DxTabs @ref=@tabs ActiveTabIndexChanged="GetData">
        <DxTabPage Text="All Courses" />
        <DxTabPage Text="Current" />
        <DxTabPage Text="Complete" />
        <DxTabPage Text="Activity/Events" />
        <DxTabPage Text="Multi-Campus" />
        <DxTabPage Text="Class View">
            <ClassView Year="@Year" AnyEnrolmentsInYear="@anyEnrolmentsInYear"
            Settings=@settings
            Persons="@Persons" CourseTypes="@CourseTypes" Occurrences="Occurrences"
            Venues="@Venues" WeekDays="@WeekDays" DbContext="@dbc"
            CourseParticipationTypes="@CourseParticipationTypes" />
        </DxTabPage>
    </DxTabs>
    @if (tabs?.ActiveTabIndex != 5)
    {
        <FullScreen DisplayOffset="9">
            <ContentTemplate>
                <DxGrid Data="@Courses" @ref=@mainGrid
                AutoCollapseDetailRow="true"
                DetailRowDisplayMode="GridDetailRowDisplayMode.Auto"
                KeyFieldName="ID"
                ValidationEnabled="true"
                EditStart="Grid_EditStart"
                EditMode="GridEditMode.PopupEditForm"
                EditModelSaving="Grid_EditModelSaving"
                EditCanceling="Grid_EditCanceling"
                PopupEditFormCssClass="popup-width"
                PopupEditFormHeaderText="Add/Edit Course"
                UnboundColumnData="Grid_CustomUnboundColumnData"
                CustomizeEditModel="Grid_CustomizeEditModel"
                DataItemDeleting="Grid_DataItemDeleting">
                    <ToolbarTemplate>
                        <GridToolbar @ref="Toolbar" LinkedGrid=@mainGrid IsMasterDetail=true LayoutKey="{2A9D0137-5DD2-4290-A9B7-4C4F5676F224}">
                            <CustomButtonContent>
                                <DxToolbarItem CssClass="w-100 mx-1" IconCssClass="bi bi-database"
                                Text="Rebuild Cache"
                                RenderStyle="@ButtonRenderStyle.Primary"
                                RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                Click="@OnRebuild" />
                                <DxToolbarItem CssClass="w-100" IconCssClass="bi bi-check-circle"
                                Text="Preview Schedule"
                                RenderStyle="@ButtonRenderStyle.Info"
                                RenderStyleMode="ToolbarItemRenderStyleMode.Contained">
                                    <Items>
                                        <DxToolbarItem Enabled="@isPreviewReady"
                                        Text="Preview Term 1" RenderStyle="@ButtonRenderStyle.Info" Click="@(()=> OnPreview(1))" />
                                        <DxToolbarItem Enabled="@isPreviewReady"
                                        Text="Preview Term 2" RenderStyle="@ButtonRenderStyle.Info" Click="@(()=> OnPreview(2))" />
                                        <DxToolbarItem Enabled="@isPreviewReady"
                                        Text="Preview Term 3" RenderStyle="@ButtonRenderStyle.Info" Click="@(()=> OnPreview(3))" />
                                        <DxToolbarItem Enabled="@isPreviewReady"
                                        Text="Preview Term 4" RenderStyle="@ButtonRenderStyle.Info" Click="@(()=> OnPreview(4))" />

                                    </Items>
                                </DxToolbarItem>
                            </CustomButtonContent>
                        </GridToolbar>
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridCommandColumnEx @ref="GridCommandColumn"
                        NewButtonVisible="true"
                        EditButtonVisible="true"
                        DeleteButtonVisible="true" FixedPosition="GridColumnFixedPosition.Left" />
                        <DxGridDataColumn Caption="Year" FieldName="Year"
                        FixedPosition="GridColumnFixedPosition.Left"
                        Width="3rem" DisplayFormat="####" />
                        <DxGridDataColumn Caption="ID" FieldName="ConversionID"
                        FixedPosition="GridColumnFixedPosition.Left"
                        Visible="false" Width="3rem" DisplayFormat="#####" />
                        <DxGridDataColumn Caption="Name" FieldName="Name"
                        FixedPosition="GridColumnFixedPosition.Left"
                        Width="15rem" />
                        <DxGridDataColumn Caption="Type" FieldName="CourseType.ShortName" Width="6rem" />
                        <DxGridDataColumn Caption="Featured?" FieldName="IsFeaturedCourse" Width="7rem" />
                        <DxGridDataColumn Caption="Off Schedule?" FieldName="IsOffScheduleActivity" Width="7rem" />
                        <DxGridDataColumn Caption="1 per Student?" FieldName="@nameof(Course.OneStudentPerClass)" Width="7rem" />
                        <DxGridDataColumn Caption="Enrol In" FieldName="CourseParticipationType.ShortName" Width="5rem" />
                        <DxGridDataColumn Caption="Addn-Info?" FieldName="Weblink" UnboundType="GridUnboundColumnType.Boolean" Width="6rem" />
                        <DxGridDataColumn Caption="Reports To" FieldName="SendReportsTo" UnboundType="GridUnboundColumnType.String" Width="6rem" />
                        <DxGridDataColumn FieldName="ContactOrder" UnboundType="GridUnboundColumnType.String" Width="7rem" />
                        <DxGridDataColumn Caption="Course Fee" FieldName="CourseFeePerYear" DisplayFormat="{0:c}" Width="6rem" />
                        <DxGridDataColumn Caption="Fee / Term" FieldName="CourseFeePerTerm" DisplayFormat="{0:c}" Width="6rem" />
                        <DxGridDataColumn Caption="Duration" FieldName="Duration" DisplayFormat="{0:n2}" Width="6rem" />
                        <DxGridDataColumn Caption="Required #" FieldName="RequiredStudents" DisplayFormat="{0:n0}" Width="6rem" />
                        <DxGridDataColumn Caption="Maximum #" FieldName="MaximumStudents" DisplayFormat="{0:n0}" Width="6rem" />
                        <DxGridDataColumn Caption="Auto-Enrol?" FieldName="AllowAutoEnrol" Width="6rem" />
                        <DxGridDataColumn Caption="Multi-Campus" FieldName=@nameof(Course.AllowMultiCampsuFrom) Width="8rem" />
                    </Columns>

                    <DetailRowTemplate>
                        <FrmClassDetailPopup Course="(Course)context.DataItem" AllowEdit="false" />
                    </DetailRowTemplate>

                    <GroupSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                        FieldName="ID" DisplayText="{0:n0}  Courses"
                        FooterColumnName="Name" />
                    </GroupSummary>
                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                        FieldName="ID" DisplayText="{0:n0}  Courses"
                        FooterColumnName="Name" />
                    </TotalSummary>

                    <EditFormTemplate Context="EditFormContext">
                        <CourseDetail @ref="@courseDetail" AnyEnrolmentsInYear="@anyEnrolmentsInYear"
                        Settings=@settings
                        Course="(Course)EditFormContext.EditModel"
                        Persons="@Persons" CourseTypes="@CourseTypes" Occurrences="Occurrences"
                        Venues="@Venues" WeekDays="@WeekDays" DbContext="@dbc"
                        CourseParticipationTypes="@CourseParticipationTypes" />
                    </EditFormTemplate>
                </DxGrid>
            </ContentTemplate>
        </FullScreen>
    }

    <DxWindow @ref=@previewWindow Width="60vw"
    Visible=false
    HorizontalAlignment="HorizontalAlignment.Center"
    VerticalAlignment="VerticalAlignment.Center"
    Height="90vh"
    AllowResize="true"
    Context="windowContext"
    CloseOnEscape=true
    ShowCloseButton=true
    ShowFooter=true
    Scrollable=true
    BodyCssClass="h-100"
    Closing="@((WindowClosingEventArgs e) => e.Cancel = !isPreviewReady)"
    Closed="@(() => isPreviewOpen = false)"
    HeaderText="Preview">
        <BodyTextTemplate>
            <DxLoadingPanel Visible="@(!isPreviewReady)" ApplyBackgroundShading="true">
                <div class="overflow-hidden">
                    <MemberEnrolment OneReadyStatusChanged="@((bool value) => {isPreviewReady = value; StateHasChanged();})"
                    IsPreview=true PreviewTerm="previewTerm" />
                </div>
            </DxLoadingPanel>
        </BodyTextTemplate>
    </DxWindow>

}
<style>
    .popup-width {
    min-width: min(65rem, 100%);
    }
</style>



@code {
    bool IsReady;

    DxTabs? tabs;
    Progress? progressBar;
    List<CourseParticipationType> CourseParticipationTypes { get; set; }
    List<Occurrence>? Occurrences { get; set; }
    IEnumerable<Person> Persons { get; set; }
    IEnumerable<Venue> Venues { get; set; }
    IEnumerable<WeekDay> WeekDays { get; set; }
    List<Course> Courses { get; set; }
    List<CourseType> CourseTypes { get; set; }
    SystemSettings settings { get; set; }
    MessageBox? messageBox;
    SelectCourseView? selectCourseView;
    CourseEditViewType courseEditView;
    YearComponent? yearComponent;
    Term? currentTerm;
    Term? previewTerm;
    int Year;
    bool anyEnrolmentsInYear;
    DxWindow? previewWindow;
    bool isPreviewOpen;
    bool isPreviewReady = true;
    bool isProcessing = false;

    List<SendLeaderReportsToWrapper> sendLeaderReportsToList = new SendLeadersReportsToList();
    List<CourseContactOrderWrapper> courseContactList = new CourseContactOrderList();
    DxGridCommandColumn? GridCommandColumn;

    CourseDetail courseDetail { get; set; }
    IGrid? mainGrid { get; set; }
    GridToolbar? Toolbar;

    ErrorPopup? ErrorPopup { get; set; }
    string ErrorHeader;
    string ErrorMessage;

    U3ADbContext dbc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();

        CourseParticipationTypes = await BusinessRule.SelectableCourseParticipationTypesAsync(dbc);
        Occurrences = await dbc.Occurrence.ToListAsync();
        CourseTypes = await BusinessRule.SelectableCourseTypesAsync(dbc);
        Venues = await BusinessRule.SelectableVenuesAsync(dbc);
        WeekDays = await BusinessRule.SelectableWeekdaysAsync(dbc);
        currentTerm = await BusinessRule.CurrentTermAsync(dbc);
        settings = await dbc.SystemSettings.OrderBy(x => x.ID).FirstOrDefaultAsync();
        if (currentTerm != null)
        {
            Persons = await BusinessRule.LeadablePeopleAsync(dbc);
            var firstTermNextYear = await BusinessRule.FirstTermNextYearAsync(dbc, currentTerm.Year);
            if (firstTermNextYear != null && DateTime.Today >= firstTermNextYear.EnrolmentStartDate)
            {
                Year = firstTermNextYear.Year;
            }
            else
            {
                Year = currentTerm.Year;
            }
            await SelectedYearChanged(Year);
        }
        IsReady = true;
        await base.OnInitializedAsync();
    }

    async Task OnRebuild()
    {
        await progressBar.ShowSmallSpinnerAsync();
        // using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        // {
        //     var tenant = await tenantService.GetTenantInfoAsync();
        //     await BusinessRule.BuildScheduleAsync(dbc, TenantDbfactory, tenant.Identifier);
        //     await progressBar.Close();
        //     await InvokeAsync(StateHasChanged);
        //     await messageBox.ShowOkOnlyAsync("Class Schedule Cache", "The class schedule cache has been rebuilt!");
        // }

        var msg = string.Empty;
        try
        {
            var client = new APIClient();
            msg = "The rebuild of the Class Schedule cache Has been scheduled for immediate execution. It will take a few seconds to complete.";
            await client.DoBuildSchedule(dbc.TenantInfo.Identifier);
        }
        catch (HttpRequestException e)
        {
            msg = $@"<p>An Internet issue is currently preventing completion of this procedure.<br/>
                                        Keep trying, but if you do not receive a successful response shortly (say 5 minutes), contact your U3A.</p>
        {e.Message}";
        }
        catch (Exception ex)
        {
            msg = ex.Message;
        }
        finally
        {
            await progressBar.Close();
            await messageBox.ShowOkOnlyAsync("Class Schedule Cache", msg);
        }
    }



    bool inPreview;
    async Task OnPreview(int TermNumber)
    {
        if (inPreview) { return; }
        try
        {
            inPreview = true;
            if (isPreviewOpen)
            {
                await previewWindow.CloseAsync();
            }
            previewTerm = await dbc.Term.FirstOrDefaultAsync(x => x.Year == Year && x.TermNumber == TermNumber);
            await previewWindow?.ShowAsync();
            isPreviewOpen = true;
        }
        finally { inPreview = false; }
    }

    async Task OnTabChanged()
    {
        if (tabs == null) { return; }
        await GetData();
    }

    void FilterByTab()
    {
        if (tabs == null) { return; }
        switch (tabs.ActiveTabIndex)
        {
            case 1:
                Courses = BusinessRule.CoursesInRemainingYear(Courses, currentTerm.TermNumber);
                break;
            case 2:
                Courses = BusinessRule.CoursesNotInRemainingYear(Courses, currentTerm.TermNumber);
                break;
            case 3:
                Courses = BusinessRule.ActivityOrEventCourses(Courses, currentTerm.TermNumber);
                break;
            case 4:
                Courses = Courses.Where(x => x.AllowMultiCampsuFrom != null).ToList();
                break;
            default:
                break;
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        // wire up the toolbar
        base.OnAfterRender(firstRender);
        if (!firstRender)
        {
            if (currentTerm == null)
            {
                await messageBox.ShowOkOnlyAsync("Current Term is undefined", "Use <strong>Add/Edit Enrolment Terms</strong> to set the current term.");
                NavMan.NavigateTo("/");
            }
        }
    }

    async Task SelectedYearChanged(int NewYear)
    {
        Year = NewYear;
        await GetData();
    }

    async Task GetData()
    {
        dbc.ChangeTracker.Clear();
        Courses = await BusinessRule.EditableCoursesAsync(dbc, Year);
        FilterByTab();
        InvokeAsync(StateHasChanged);
    }

    async Task Grid_EditStart(GridEditStartEventArgs e)
    {
        if (e.IsNew)
        {
            if (await selectCourseView.ShowAsync("Add a new course"))
            {
                courseEditView = selectCourseView.SelectedEditViewType.Type;
            }
            else { e.Cancel = true; }
        }
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var editModel = (Course)e.EditModel;
        if (e.IsNew)
        {
            anyEnrolmentsInYear = false;
            editModel.Description = selectCourseView.descriptionHtml;
            editModel.Duration = 2.00M;
            editModel.MaximumStudents = 28;
            editModel.RequiredStudents = 6;
            editModel.Year = yearComponent.Year;
            editModel.AllowAutoEnrol = true;
            if (courseEditView != CourseEditViewType.Settings) { editModel.EditType = courseEditView; }
        }
        else
        {
            anyEnrolmentsInYear = await BusinessRule.AnyEnrolmentsInYear(dbc, editModel, Year);
        }
        courseEditView = editModel.EditType;
        if (editModel.CourseParticipationTypeID == (int)ParticipationType.SameParticipantsInAllClasses)
        {
            editModel.EnforceOneStudentPerClass = true;
        }
    }

    async Task Grid_EditCanceling(GridEditCancelingEventArgs e)
    {
        if (isBusy) { return; }
        try
        {
            isBusy = true;
            await GetData();
        }
        finally { isBusy = false; }
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        if (isProcessing) { return; }
        try
        {
            //throw new InvalidAccessException("just testing");
            await SaveRecordSafely(e);
        }
        catch (Exception ex)
        {
            var msg = "Error saving Course record.";
            var editModel = (Course)e.EditModel;
            if (editModel != null)
            {
                var year = editModel.Year;
                var name = editModel.Name ?? "Not set";
                msg = $"Error saving Course: {year} {name}";
            }
            throw new Exception(msg, ex);
        }
    }


    async Task SaveRecordSafely(GridEditModelSavingEventArgs e)
    {
        var editModel = (Course)e.EditModel;
        if (courseDetail.CourseViewType == CourseEditViewType.Detail)
        {
            if (courseDetail.classDetail != null)
            {
                if (courseDetail.classDetail.grid.IsEditing())
                {
                    await courseDetail.classDetail.grid.SaveChangesAsync();
                }
            }
        }
        if (courseDetail.CourseViewType != CourseEditViewType.Detail && courseDetail.frmCourseSimple != null)
        {
            if (!await courseDetail.frmClassSimple.IsSaveRecordOkAsync()) { e.Cancel = true; return; }
            Class classEditModel = courseDetail.frmClassSimple.editItem;
            if (!await IsClassDataOk(classEditModel)) { e.Cancel = true; return; }
            Class classDataItem = await dbc.Class.FindAsync(editModel.Classes.First().ID);
            if (classDataItem == null) { classDataItem = new(); }
            classEditModel.CopyTo(classDataItem);
            classDataItem.Occurrence = await dbc.Occurrence.FindAsync(classEditModel.Occurrence.ID);
            classDataItem.Venue = await dbc.Venue.FindAsync(classEditModel.Venue.ID);
            classDataItem.OnDay = await dbc.WeekDay.FindAsync(classEditModel.OnDay.ID);
            if (classEditModel.Leader != null) { classDataItem.Leader = await dbc.Person.IgnoreQueryFilters().FirstAsync(x => x.ID == classEditModel.Leader.ID); }
            if (classEditModel.Leader2 != null) { classDataItem.Leader2 = await dbc.Person.IgnoreQueryFilters().FirstAsync(x => x.ID == classEditModel.Leader2.ID); }
            if (classEditModel.Leader3 != null) { classDataItem.Leader3 = await dbc.Person.IgnoreQueryFilters().FirstAsync(x => x.ID == classEditModel.Leader3.ID); }
        }
        if (!await IsDataOk(editModel)) { e.Cancel = true; return; }
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new Course() : dbc.Course.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        if (dataItem != null)
        {
            editModel.CopyTo(dataItem);
            dataItem.DisplayDescription = HtmlEditor.AdjustAndMinifyHtml(dataItem.Description);
            dataItem.CourseType = dbc.CourseType.Find(editModel.CourseType.ID);
            if (editModel.CourseParticipationType != null)
            {
                dataItem.CourseParticipationType =
                dbc.CourseParticpationType.Find(editModel.CourseParticipationType.ID);
            }
            await ProcessClasses(dataItem, editModel);
            // Post changes to the database.
            if (e.IsNew) { dbc.Add(dataItem); }
            else
            {
                await BusinessRule.ReassignCourseParticipationEnrolments(dbc, dataItem);
            };
            if (await SaveChangesAsync())
            {
                await GetData();
            }
        }
    }

    async Task ProcessClasses(Course dataItem, Course editModel)
    {
        foreach (Class c in editModel.Classes)
        {
            c.Occurrence = await dbc.Occurrence.FindAsync(c.Occurrence.ID);
            c.Venue = await dbc.Venue.FindAsync(c.Venue.ID);
            c.OnDay = await dbc.WeekDay.FindAsync(c.OnDay.ID);
            if (c.Leader != null) { c.Leader = await dbc.Person.IgnoreQueryFilters().FirstAsync(x => x.ID == c.Leader.ID); } else { c.LeaderID = null; }
            if (c.Leader2 != null) { c.Leader2 = await dbc.Person.IgnoreQueryFilters().FirstAsync(x => x.ID == c.Leader2.ID); } else { c.Leader2ID = null; }
            if (c.Leader3 != null) { c.Leader3 = await dbc.Person.IgnoreQueryFilters().FirstAsync(x => x.ID == c.Leader3.ID); } else { c.Leader3ID = null; }
            if (dataItem.Classes.Where(x => x.ID == c.ID).Count() == 0)
            {
                dataItem.Classes.Add(c);
            }
            else
            {
                await BusinessRule.ReassignClassScheduleValues(dbc, c);
            }
        }
    }

    async Task<bool> IsClassDataOk(Class editItem)
    {
        bool result = true;
        if (editItem.Occurrence == null || editItem.Venue == null || editItem.OnDay == null)
        {
            var msg = @"Please ensure the class Occurence, On Day and Venue details are complete.";
            await messageBox.ShowOkOnlyAsync("Class Details Incomplete", msg);
            result = false;
        }
        return result;
    }

    async Task<bool> IsDataOk(Course editItem)
    {
        bool result = true;
        var dup = await BusinessRule.DuplicateMarkUpAsync(dbc, editItem);
        if (!string.IsNullOrWhiteSpace(dup))
        {
            await messageBox.ShowOkOnlyAsync("Duplicate Record", dup);
            return false;
        }
        if (!await BusinessRule.IsCourseNumberUnique(dbc, editItem, Year))
        {
            await messageBox.ShowOkOnlyAsync("Course Number must be unique", $"Course Number {editItem.ConversionID} is not unique in the database.");
            return false;
        }
        return result;
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        Course course = (Course)e.DataItem;
        // This is a soft delete, so make sure we cascade all classes & enrolments
        var courseToDelete = await dbc.Course.Include(x => x.Classes)
                                        .Include(x => x.Enrolments)
                                        .FirstOrDefaultAsync(x => x.ID == course.ID);
        dbc.Remove(courseToDelete);
        await SaveChangesAsync();
        await GetData();
    }

    async Task<bool> SaveChangesAsync()
    {
        bool result = false;
        // try
        // {
        // Post changes to the database.
        await dbc.SaveChangesAsync();
        result = true;
        // }
        // catch (Exception ex)
        // {
        //     ErrorHeader = "Save to database error";
        //     ErrorMessage = Helpers.GetErrorMessage(ex);
        //     await ErrorPopup.ShowPopupAsync();
        //     dbc?.ChangeTracker?.Clear();
        // }
        return result;
    }

    void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        if (e.FieldName == "SendReportsTo")
        {
            SendLeaderReportsTo? reportTo;
            reportTo = (e.DataItem as Course).SendLeaderReportsTo;
            if (reportTo == null) reportTo = (SendLeaderReportsTo)settings.SendLeaderReportsTo;
            e.Value = sendLeaderReportsToList.Where(x => x.Type == reportTo).FirstOrDefault().ShortText;
        }
        if (e.FieldName == "ContactOrder")
        {
            CourseContactOrder? order = (e.DataItem as Course).CourseContactOrder;
            if (order == null) order = (CourseContactOrder)settings.CourseContactOrder;
            e.Value = courseContactList.Where(x => x.Type == (CourseContactOrder)order).FirstOrDefault().ShortText;
        }
        if (e.FieldName == "Weblink")
        {
            bool result = !string.IsNullOrWhiteSpace((e.DataItem as Course).AdditionalInformationURL);
            e.Value = result;
        }
    }

    void ShowDetail(GridEditModelSavingEventArgs e)
    {
        var startPageIndex = e.Grid.GetStartRowVisibleIndex();
        var lastPageIndex = startPageIndex + e.Grid.PageSize;

        //loop to visible rows and find which row is editing.

        int visibleEditingIndex;

        for (visibleEditingIndex = startPageIndex; visibleEditingIndex <= lastPageIndex; visibleEditingIndex++)
        {
            if (e.Grid.IsEditingRow(visibleEditingIndex))
            {
                e.Grid.ExpandDetailRow(visibleEditingIndex);
                StateHasChanged();
                break;
            }
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
