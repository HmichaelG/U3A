@page "/CourseTypeMnt"

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <ContextHelpTitle Title="Course Types" HelpTopic="add_edit-course-types.html"
                      Subtitle="Course Types are used group or classify courses and/or activities offered to students." />

    <MessageBox @ref="@messageBox" />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

    <FullScreen>
        <ContentTemplate>
            <DxGrid Data="@CourseTypes" @ref=@mainGrid
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    ShowFilterRow="false"
                    ShowAllRows="true"
                    KeyFieldName="ID"
                    ValidationEnabled="true"
                    SelectionMode="GridSelectionMode.Multiple"
                    EditMode="GridEditMode.PopupEditForm"
                    EditModelSaving="Grid_EditModelSaving">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid LayoutKey="{C538834A-C1D9-402A-A7FE-BF8B2E71747F}" />
                </ToolbarTemplate>
                <Columns>
                    <DxGridCommandColumnEx @ref="GridCommandColumn" Width="60px" EditButtonVisible="true" DeleteButtonVisible="false" />
                    <DxGridDataColumn Width="6rem" Caption="Discontinued" FieldName="Discontinued" />
                    <DxGridDataColumn Width="25rem" Caption="Name" FieldName="Name" />
                    <DxGridDataColumn Width="10rem" Caption="Short Name" FieldName="ShortName" />
                    <DxGridDataColumn Caption="Comment" FieldName="Comment" />
                </Columns>

                <EditFormTemplate Context="EditFormContext">
                    @{
                        var editItem = (CourseType)EditFormContext.EditModel;
                    }
                    <DxFormLayout>
                        <DxFormLayoutItem Caption="Course Type" ColSpanMd="12">
                            <DxTextBox @bind-Text="@editItem.Name" @bind-Text:after="@(() => SetupShortName(editItem))" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Short Name" ColSpanMd="12">
                            <DxTextBox @bind-Text="@editItem.ShortName" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Comment" ColSpanMd="12">
                            <DxMemo @bind-Text="@editItem.Comment" Rows="5" CssClass="w-100" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Discontinued">
                            <DxCheckBox @bind-Checked="@editItem.Discontinued" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditFormTemplate>
            </DxGrid>
        </ContentTemplate>
    </FullScreen>
}

@code {
    bool IsReady;
    private List<CourseType> CourseTypes { get; set; }
    private DxGridCommandColumnEx? GridCommandColumn;
    MessageBox? messageBox;

    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal string ErrorHeader;
    internal string ErrorMessage;
    U3ADbContext dbc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        CourseTypes = await BusinessRule.EditableCourseTypesAsync(dbc);
        IsReady = true;
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    void SetupShortName(CourseType editItem)
    {
        if (string.IsNullOrWhiteSpace(editItem.Name)) return;
        if (!string.IsNullOrWhiteSpace(editItem.ShortName)) return;
        if (editItem.Name.Length <= 15)
        {
            editItem.ShortName = editItem.Name;
        }
        else
        {
            var splits = editItem.Name.Split(" ");
            editItem.ShortName = splits[0];
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (CourseType)e.EditModel;
        if (!await IsDataOk(editModel)) { e.Cancel = true; return; }
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new CourseType() : dbc.CourseType.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        if (dataItem != null)
        {
            editModel.CopyTo(dataItem);
            try
            {
                // Post changes to the database.
                if (e.IsNew) await dbc.AddAsync(dataItem);
                await dbc.SaveChangesAsync();
                // update the Grid.
                if (e.IsNew)
                {
                    CourseTypes.Insert(0, dataItem);
                }
                else
                {
                    int idx = CourseTypes.FindIndex(x => x.ID == dataItem.ID);
                    CourseTypes[idx] = dataItem;
                }
            }
            catch (Exception ex)
            {
                ErrorHeader = "Save to database error";
                ErrorMessage = Helpers.GetErrorMessage(ex);
                await ErrorPopup.ShowPopupAsync();
                dbc?.ChangeTracker?.Clear();
                e.Cancel = true;
            }
        }
    }

    async Task<bool> IsDataOk(CourseType editItem)
    {
        bool result = true;
        var dup = await BusinessRule.DuplicateMarkUpAsync(dbc, editItem);
        if (!string.IsNullOrWhiteSpace(dup))
        {
            await messageBox.ShowOkOnlyAsync("Duplicate Record", dup);
            result = false;
        }
        return result;
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
