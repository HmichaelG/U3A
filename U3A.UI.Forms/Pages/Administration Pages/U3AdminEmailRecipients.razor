@page "/U3AdminEmailRecipients"
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager NavigationManager
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="container h-100">
        <div class="row  align-content-start">
            <ContextHelpTitle Title="U3Admin Email Recipients" HelpTopic="U3Admin Email Recipients.html" />
        </div>
        <div class="row">
            <div class="d-none d-md-inline">
                <p>A list of email recipients that receive the occasional email from U3Admin.org.au developers/managers.
                    <br />Please enter one email address per line.
                </p>
                <p>Keep the number of recipients to a maximum of 5.<br/> 
                    The email sent is intended for system administrators and not for general membership.</p>
            </div>
        </div>

        <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

        <EditForm Model="@systemSettings" OnValidSubmit=@ValidFormSubmitted Context="editContext">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <DxFormLayout CssClass="mt-4">
                <DxFormLayoutGroup Caption="Email Recipients" ColSpanLg="6">
                    <DxFormLayoutItem ColSpanMd="12">
                        <DxMemo Rows="20" @bind-Text="@systemSettings.U3AdminEmailRecipients" SizeMode="SizeMode.Medium" />
                    </DxFormLayoutItem>
                </DxFormLayoutGroup>
                <DxFormLayoutItem ColSpanMd="12">
                    <Template>
                        <DxButton SubmitFormOnClick="true" Text="Submit" RenderStyle="@ButtonRenderStyle.Primary" />
                        <DxButton SubmitFormOnClick="false" Text="Cancel" RenderStyle="@ButtonRenderStyle.Secondary" Click="@Close" />
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </div>
}
@code {
    bool IsReady = false;
    private SystemSettings systemSettings { get; set; }
    U3ADbContext? dbc { get; set; }

    internal ErrorPopup? ErrorPopup { get; set; }
    internal string? ErrorHeader;
    internal string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        systemSettings = await dbc.SystemSettings.FirstOrDefaultAsync();
        if (systemSettings == null)
        {
            systemSettings = new SystemSettings()
                {
                    AutoEnrolNewParticipantPercent = 15M,
                    AutoEnrolRemainderMethod = "Random",
                    MailLabelTopMargin = 10,
                    MailLabelBottomMargin = 0.0,
                    MailLabelLeftMargin = 0.79,
                    MailLabelRightMargin = 0.0,
                    MailLabelWidth = 64,
                    MailLabelHeight = 25
                };
        }

        IsReady = true;
    }

    async void ValidFormSubmitted(EditContext editContext)
    {
        bool isNew = false;
        var editModel = (SystemSettings)editContext.Model;
        // Re-query a data item from the store.
        var dataItem = dbc.SystemSettings.Find(editModel.ID);
        if (dataItem == null)
        {
            dataItem = new SystemSettings();
            isNew = true;
        }
        // Assign changes from the edit model to the data item.
        if (dataItem != null)
        {
            editModel.CopyTo(dataItem);
            try
            {
                // Post changes to the database.
                if (isNew) await dbc.AddAsync(dataItem);
                await dbc.SaveChangesAsync();
                Close();
            }
            catch (Exception ex)
            {
                ErrorHeader = "Save to database error";
                ErrorMessage = Helpers.GetErrorMessage(ex);
                await ErrorPopup.ShowPopupAsync();
                dbc?.ChangeTracker?.Clear();
            }
        }
    }

    void Close()
    {
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
