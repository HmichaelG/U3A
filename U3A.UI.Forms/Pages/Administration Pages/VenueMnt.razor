@page "/VenueMnt"

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable

@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    @if (!IsReadOnly)
    {
        <ContextHelpTitle Title="Venues" HelpTopic="add_edit-venues.html"
                          Subtitle="Venues identify the location in which courses and/or activities offered to students are held." />
    }
    <MessageBox @ref="@messageBox" />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

    <FullScreen>
        <ContentTemplate>
            <DxGrid id="my-grid" Data="@Venues" @ref=@mainGrid
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    TextWrapEnabled="true"
                    ShowFilterRow="false"
                    ShowAllRows="true"
                    KeyFieldName="ID"
                    ValidationEnabled="true"
                    EditMode="GridEditMode.PopupEditForm"
                    EditModelSaving="Grid_EditModelSaving"
                    SelectedDataItemsChanged="Grid_SelectedDataItemsChanged"
                    CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid LayoutKey="@GridLayoutKey" />
                </ToolbarTemplate>
                <Columns>
                    <DxGridCommandColumnEx @ref="GridCommandColumn"
                                           Width="60px" Visible="!IsReadOnly"
                                           EditButtonVisible="true"
                                           DeleteButtonVisible="false" />
                    <DxGridDataColumn Width="6rem" Caption="Discontinued" FieldName="Discontinued" />
                    <DxGridDataColumn Caption="Name" FieldName="Name" />
                    <DxGridDataColumn Caption="Address" FieldName="Address" />
                    <DxGridDataColumn Caption="Contact" FieldName="Coordinator" />
                    <DxGridDataColumn Caption="Email" FieldName="Email" />
                    <DxGridDataColumn Caption="Phone" FieldName="Phone" />
                    <DxGridDataColumn Caption="Key Code" FieldName="@(nameof(Venue.KeyCode))" />
                    <DxGridDataColumn Caption="Access Detail" FieldName="@(nameof(Venue.AccessDetail))" Visible="false" />
                    <DxGridDataColumn Caption="Equipment" FieldName="@(nameof(Venue.Equipment))" Visible="false" />
                    <DxGridDataColumn Caption="Comment" FieldName="@(nameof(Venue.Comment))" Visible="false" />
                </Columns>
                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" Name="Custom" FieldName="Discontinued" />
                </TotalSummary>

                <EditFormTemplate Context="EditFormContext">
                    @{
                        var editItem = (Venue)EditFormContext.EditModel;
                    }
                    <DxFormLayout>
                        <DxFormLayoutItem Caption="Venue Name" ColSpanMd="12">
                            <DxTextBox @bind-Text="@editItem.Name" InputId="Venue-Name" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Venue Address" ColSpanMd="12">
                            <DxTextBox @bind-Text="@editItem.Address" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Can Map Address" ColSpanMd="12">
                            <DxCheckBox @bind-Checked="@editItem.CanMapAddress" />
                        </DxFormLayoutItem>
                        <DxFormLayoutGroup Caption="Contact Details">
                            <DxFormLayoutItem Caption="Name" ColSpanMd="12">
                                <DxTextBox @bind-Text="@editItem.Coordinator" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Email" ColSpanMd="12">
                                <DxTextBox @bind-Text="@editItem.Email" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Phone" ColSpanMd="12">
                                <DxTextBox @bind-Text="@editItem.Phone" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                        <DxFormLayoutGroup Caption="Access">
                            <DxFormLayoutItem Caption="Key Code" ColSpanMd="12">
                                <DxTextBox @bind-Text="@editItem.KeyCode" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Details" ColSpanMd="12">
                                <DxTextBox @bind-Text="@editItem.AccessDetail" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                        <DxFormLayoutItem Caption="Equipment Available" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                            <DxMemo @bind-Text="@editItem.Equipment" Rows="3" CssClass="w-100" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Comment" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                            <DxMemo @bind-Text="@editItem.Comment" Rows="5" CssClass="w-100" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Discontinued">
                            <DxCheckBox @bind-Checked="@editItem.Discontinued" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditFormTemplate>
            </DxGrid>

        </ContentTemplate>
    </FullScreen>


}

<style>
    .removeWrapping {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

</style>


@code {
    [Parameter]
    public bool IsReadOnly { get; set; } = false;
    [Parameter]
    public string GridLayoutKey { get; set; } = "{279961FC-0FAC-4C87-874C-26CA8B9ADADB}";
    bool IsReady;
    private List<Venue> Venues { get; set; }
    private DxGridCommandColumnEx? GridCommandColumn;
    MessageBox messageBox;

    string gridHeight = "100px";
    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal string ErrorHeader;
    internal string ErrorMessage;
    U3ADbContext dbc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        await RefreshData();
        IsReady = true;
    }

    async Task RefreshData()
    {
        Venues = await BusinessRule.EditableVenuesAsync(dbc);
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Venue)e.EditModel;
        if (!await IsDataOk(editModel)) { e.Cancel = true; return; }
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new Venue() : dbc.Venue.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        if (dataItem != null)
        {
            editModel.CopyTo(dataItem);
            try
            {
                // Post changes to the database.
                if (e.IsNew) await dbc.AddAsync(dataItem);
                await dbc.SaveChangesAsync();
                // update the Grid.
                if (e.IsNew)
                {
                    Venues.Insert(0, dataItem);
                }
                else
                {
                    int idx = Venues.FindIndex(x => x.ID == dataItem.ID);
                    Venues[idx] = dataItem;
                }
            }
            catch (Exception ex)
            {
                ErrorHeader = "Save to database error";
                ErrorMessage = Helpers.GetErrorMessage(ex);
                await ErrorPopup.ShowPopupAsync();
                dbc?.ChangeTracker?.Clear();
                e.Cancel = true;
            }
        }
    }

    async Task<bool> IsDataOk(Venue editItem)
    {
        bool result = true;
        var dup = await BusinessRule.DuplicateMarkUpAsync(dbc, editItem);
        if (!string.IsNullOrWhiteSpace(dup))
        {
            await messageBox.ShowOkOnlyAsync("Duplicate Record", dup);
            result = false;
        }
        return result;
    }


    async void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
        {
            int count = Venues is null ? 0 : Venues.Where(x => !x.Discontinued).Count();
            e.DisplayText = $"Active: {count}";
        }
    }

    void Grid_SelectedDataItemsChanged()
    {
        mainGrid.RefreshSummary();
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
