@using System.Globalization
@using System.Diagnostics
@inject IDbContextFactory<U3ADbContext> dbFactory

<DxWindow Visible="@popupVisible" @ref="@popup"
          Width="40rem"
          CloseOnEscape="false"
          ShowFooter="true"
          HeaderText="Create/Edit New Year">
    <BodyTemplate Context="PopupContext">
        <DxFormLayout CssClass="w-100 p-4">
            <ContextHelpTitle Title=@($"Create/Edit Terms for {newYear}") HelpTopic="add_edit-enrolment-terms.html"
                              Subtitle="<div>Use this procedure to quickly create enrolment terms for the new year.</div>
                                        <div>Simply review / correct the term start date and duration. We'll do the rest.</div>" />
            <div class="mt-2 text-fl-danger text-center w-100">
                @validationMessage
            </div>
            <DxGrid id="my-grid" Data="@Terms" @ref=@mainGrid CssClass="grid-height"
                    ShowFilterRow="false"
                    ShowAllRows="true"
                    KeyFieldName="ID"
                    ValidationEnabled="true" 
                    HighlightRowOnHover="true"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    EditMode="GridEditMode.EditCell"
                    EditModelSaving="Grid_EditModelSaving">
                <Columns>
                    <DxGridDataColumn Caption="Term"
                                      DataRowEditorVisible="false"
                                      FieldName="TermNumber"
                                      DisplayFormat="Term-{0:D}" Width="6rem">
                    </DxGridDataColumn>
                    <DxGridDataColumn Caption="Term Start" FieldName="StartDate" Width="12rem"
                                      DisplayFormat="@constants.STD_DATE_FORMAT">
                        <EditSettings>
                            <DxDateEditSettings MinDate="@(mondaysInYear.First())"
                                                MaxDate="@(mondaysInYear.Last())"                                                
                                                CustomDisabledDate="@GetDisabledDates" />
                        </EditSettings>
                    </DxGridDataColumn>
                    <DxGridDataColumn Caption="Duration (weeks)" FieldName="Duration">
                        <EditSettings>
                            <DxSpinEditSettings MaxValue="13"
                                                MinValue="1" />
                        </EditSettings>
                    </DxGridDataColumn>
                    <DxGridDataColumn 
                        DataRowEditorVisible="false" Width="12rem"
                        Caption="Term End" 
                        FieldName="EndDate" 
                        DisplayFormat="@constants.STD_DATE_FORMAT" />
                </Columns>
            </DxGrid>


        </DxFormLayout>
    </BodyTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button"
                  RenderStyle="ButtonRenderStyle.Primary"
                  Text="Save"
                  Click="@AffirmativeButtonClicked" />
        <DxButton CssClass="popup-button"
                  RenderStyle="ButtonRenderStyle.Secondary"
                  Text="Cancel" Click="@NegativeButtonClicked" />
    </FooterContentTemplate>
</DxWindow>
<style>
    .grid-height {
        height:10rem;
    }
</style>

@code {
    bool isReady;
    bool popupVisible { get; set; }
    TaskCompletionSource<bool>? tcs;

    List<Term> Terms = new();
    DxWindow? popup;
    IGrid? mainGrid;
    DxGridCommandColumnEx? GridCommandColumn;
    U3ADbContext? dbc;
    int newYear;
    List<DateTime> mondaysInYear;
    MarkupString? validationMessage;
    Term lastTermLastYear;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) { await GetData(); }
    }

    public Task<bool> ShowAsync()
    {
        popupVisible = true;
        tcs = new TaskCompletionSource<bool>();
        tcs.Task.ContinueWith(_ =>
        {
            popupVisible = false;
        });
        StateHasChanged();
        return tcs.Task;
    }

    async Task GetData()
    {
        using (var dbc = await dbFactory.CreateDbContextAsync())
        {
            newYear = dbc.GetLocalDate().Year;
            var allTerms = await BusinessRule.EditableTermsAsync(dbc);
            newYear = (allTerms?.Count <= 0)
                        ? dbc.GetLocalDate().Year
                        : dbc.GetLocalDate().Year + 1;
            lastTermLastYear = await dbc.Term.FirstOrDefaultAsync(t => t.Year == newYear - 1 && t.TermNumber == 4);
            mondaysInYear = GetMondaysInYear();
            Terms = new();
            for (int i = 0; i < 4; i++)
            {
                var t = allTerms.FirstOrDefault(x => x.Year == newYear && x.TermNumber == i + 1);
                if (t == null)
                {
                    t = new Term()
                        {
                            ID = Guid.NewGuid(),
                            Year = newYear,
                            TermNumber = i + 1,
                            Duration = 8
                        };
                    switch (t.TermNumber)
                    {
                        case 1:
                            t.StartDate = mondaysInYear[4];
                            if (t.StartDate.Month != 2)
                            {
                                t.StartDate = t.StartDate.AddDays(7);
                            }
                            break;
                        case 2:
                            t.StartDate = mondaysInYear[16];
                            break;
                        case 3:
                            t.StartDate = mondaysInYear[28];
                            break;
                        case 4:
                            t.StartDate = mondaysInYear[40];
                            break;
                    }
                }
                Terms.Add(t);
            }
        }
    }

    void AffirmativeButtonClicked()
    {
        if (tcs?.Task.IsCompleted == true) return;
        if (IsDataOK())
        {
            SaveData();
            popupVisible = false;
            tcs?.TrySetResult(true);
        }
    }

    void NegativeButtonClicked()
    {
        popupVisible = false;
        tcs?.TrySetResult(false);
    }

    void SaveData()
    {
        using (var dbc = dbFactory.CreateDbContext())
        {
            foreach (var t in Terms)
            {
                var isNew = false;
                var dataItem = dbc.Term.Find(t.ID);
                if (dataItem == null) { dataItem = new Term(); isNew = true; }
                t.CopyTo(dataItem);
                if (isNew) { dbc.Add(dataItem); } else { dbc.Update(dataItem); }
            }
            dbc.SaveChanges();
        }
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Term)e.EditModel;
        if (!e.Cancel)
        {
            // Re-query a data item from the store.
            var dataItem = Terms.First(x => x.ID == editModel.ID);
            // Assign changes from the edit model to the data item.
            if (dataItem != null)
            {
                editModel.CopyTo(dataItem);
            }
        }
    }


    bool IsDataOK()
    {
        var result = true;
        validationMessage = null;
        string errorMsg = string.Empty;
        for (int i = 0; i < 4; i++)
        {
            var thisTerm = Terms[i];
            var lastTerm = (i == 0) ? lastTermLastYear : Terms[i - 1];
            if (thisTerm.StartDate <= lastTerm.EndDate)
            {
                errorMsg += $"Term {thisTerm.TermNumber} start date must be later than previous term's end date.<br/>";
            }
            else
            {
                thisTerm.EnrolmentStarts = i == 0
                        ? GetTerm1EnrolmentStart(thisTerm.StartDate) - 1
                        : GetEnrolmentDate(thisTerm.StartDate, lastTerm.EndDate) - 1;
                thisTerm.EnrolmentEnds = GetEnrolmentDate(thisTerm.StartDate, thisTerm.EndDate);
            }
        }
        if (errorMsg != string.Empty)
        {
            validationMessage = new MarkupString(errorMsg);
            result = false;
        }
        return result;
    }

    int GetWeekInYear(DateTime startDate)
    {
        int result = 0;
        for (int i = mondaysInYear.Count - 1; i > 0; i--)
        {
            if (mondaysInYear[i] == startDate)
            {
                result = i;
                break;
            }
        }
        return result;
    }

    int GetTerm1EnrolmentStart(DateTime startDate)
    {
        var termEndDate = lastTermLastYear == null
                            ? mondaysInYear[0]
                            : lastTermLastYear.EndDate;
        return GetEnrolmentDate(startDate, termEndDate);
    }

    int GetEnrolmentDate(DateTime termStartDate, DateTime termEndDate)
    {
        return ((termEndDate - termStartDate).Days) / 7;
    }

    List<DateTime> GetMondaysInYear()
    {
        List<DateTime> mondays = new();
        DateTime date = new DateTime(newYear, 1, 1);
        for (int i = 0; i < 366; i++)
        {
            if (date.DayOfWeek == DayOfWeek.Monday) mondays.Add(date);
            date = date.AddDays(1);
        }
        return mondays;
    }

    void GetDisabledDates(CalendarCustomDisabledDateEventArgs e)
    {
        e.IsDisabled = (!mondaysInYear.Contains(e.Date));
    }
}