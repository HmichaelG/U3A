@page "/TermMnt"

@inject NavigationManager NavManager
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable
@using Microsoft.AspNetCore.Components.Routing


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <CreateNewYear @ref=@newYearWizard />

    <NavigationLock OnBeforeInternalNavigation="OnBeforeNavigation" />

    <div class="row  align-content-start">
        <ContextHelpTitle Title="Enrolment Terms" HelpTopic="add_edit-enrolment-terms.html"></ContextHelpTitle>
    </div>
    <div class="row">
        <div class="d-none d-md-inline">
            Enrolment Terms are the periods of time in which courses and/or activities are offered to participants.
            <br />A Term is preceded by an enrolment period in which participants are allowed to enrol in courses.
        </div>

    </div>
    <br />
    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />
    <MessageBox @ref="@messageBox" PopupWidth="@messageBoxWidth" />

    <DxGrid Data="@Terms" @ref=@mainGrid CssClass="grid-height"
            ShowFilterRow="false"
            ShowAllRows="true"
            KeyFieldName="ID"
            ValidationEnabled="true"
            AutoExpandAllGroupRows="true"
            CustomizeEditModel="OnCustomizeEditModel"
            EditMode="GridEditMode.PopupEditForm"
            EditModelSaving="Grid_EditModelSaving">
        <ToolbarTemplate>
            <GridToolbar LinkedGrid=@mainGrid HideGroupPanel="true">
                <CustomButtonContentAtStart>
                    <DxToolbarItem RenderStyle="ButtonRenderStyle.Info"
                                   Alignment="ToolbarItemAlignment.Left"
                                   Text="Create/Edit New Year"
                                   Click="@(async() => await CreateNewYear())"
                                   IconCssClass="bi bi-magic" />
                </CustomButtonContentAtStart>
            </GridToolbar>
        </ToolbarTemplate>
        <Columns>
            <DxGridCommandColumnEx @ref="GridCommandColumn" Width="6rem" EditButtonVisible="true" DeleteButtonVisible="false" NewButtonVisible="false" />
            <DxGridDataColumn Width="6rem" Caption="Current?" FieldName="IsDefaultTerm" />
            <DxGridDataColumn Width="6rem" Caption="Final Allocation?" FieldName="IsClassAllocationFinalised" />
            <DxGridDataColumn Caption="Year"
                              GroupIndex="0" SortOrder="GridColumnSortOrder.Descending"
                              FieldName="Year" DisplayFormat="{0:D}" Width="6rem" />
            <DxGridDataColumn Caption="Term" FieldName="TermNumber" DisplayFormat="Term-{0:D}" Width="6rem" />
            <DxGridDataColumn Caption="Term Start" FieldName="StartDate"
                              DisplayFormat="@constants.STD_DATE_FORMAT" />
            <DxGridDataColumn Caption="Term End" FieldName="DurationSummary" />
            <DxGridDataColumn Caption="Enrol Start" FieldName="EnrolStartSummary" />
            <DxGridDataColumn Caption="Enrol End" FieldName="EnrolEndSummary" />
        </Columns>
        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" Name="Custom" FieldName="Discontinued" />
        </TotalSummary>

        <EditFormTemplate Context="EditFormContext">
            @{
                var editItem = (Term)EditFormContext.EditModel;
            }
            <DxFormLayout>
                <DxFormLayoutItem @ref="@customValidations" ColSpanMd="12" CaptionCssClass="text-danger"
                                  Visible="false" ReadOnly="true" />
            </DxFormLayout>
            <DxFormLayout>
                <DxFormLayoutItem ColSpanMd="12">
                    <ValidationSummary />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Year" ColSpanMd="12">
                    <DxComboBox Data="@Years" @bind-Value="@editItem.Year" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Term" ColSpanMd="12">
                    <DxSpinEdit @bind-Value="@editItem.TermNumber" MinValue="1" MaxValue="4" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Start Date" ColSpanMd="12">
                    <DxDateEdit @bind-Date="@editItem.StartDate"
                                Mask=@constants.STD_DATE_FORMAT>
                    </DxDateEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Duration (Weeks)" ColSpanMd="8">
                    <DxSpinEdit @bind-Value="editItem.Duration" MinValue="1" MaxValue="52" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="4">
                    <label>@editItem.EndDate.ToString(constants.STD_DATE_FORMAT)</label>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Enrolment Starts (Weeks)" ColSpanMd="8">
                    <DxSpinEdit @bind-Value="@editItem.EnrolmentStarts" MinValue="-20" MaxValue="20" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="4">
                    <label>@editItem.EnrolmentStartDate.ToString(constants.STD_DATE_FORMAT)</label>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Enrolment Ends (Weeks)" ColSpanMd="8">
                    <DxSpinEdit @bind-Value="@editItem.EnrolmentEnds" MinValue="-20" MaxValue="20" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="4">
                    <label>@editItem.EnrolmentEndDate.ToString(constants.STD_DATE_FORMAT)</label>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Is this the current Term?" ColSpanMd="12">
                    <DxCheckBox @bind-Checked="editItem.IsDefaultTerm" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>

    <DxToolbar>
        <DxToolbarItem Context="a" BeginGroup="true" Alignment="ToolbarItemAlignment.Right">
            <Template>
                <div class="d-flex">
                    <div class="flex-grow-0 pt-1 pe-2">Year:</div>
                    <DxSpinEdit @bind-Value=@year CssClass="flex-grow-1" />
                </div>
            </Template>
        </DxToolbarItem>
    </DxToolbar>
    <DxScheduler StartDate="@(new DateTime(year,1,1))"
                 AllowCreateAppointment="false"
                 AllowDeleteAppointment="false"
                 AllowEditAppointment="false"
                 ShowAppointmentTooltip="true"
                 ActiveViewType=SchedulerViewType.Timeline
                 GroupType="SchedulerGroupType.Date"
                 DataStorage="@TermDataStorage">
        <Views>
            <DxSchedulerTimelineView SnapToCellsMode="SchedulerSnapToCellsMode.Never">
                <Scales>
                    <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Month" UnitCount="12" />
                </Scales>
                <DateHeaderCellTemplate>
                    <div style="width: 100%; text-align:center;">
                        <span>@context.Interval.Start.ToString("yyyy")</span>
                    </div>
                    <div class="d-flex">
                        <div class="month-style">Jan</div>
                        <div class="month-style">Feb</div>
                        <div class="month-style">Mar</div>
                        <div class="month-style">Apr</div>
                        <div class="month-style">May</div>
                        <div class="month-style">Jun</div>
                        <div class="month-style">Jul</div>
                        <div class="month-style">Aug</div>
                        <div class="month-style">Sep</div>
                        <div class="month-style">Oct</div>
                        <div class="month-style">Nov</div>
                        <div class="month-style-nb">Dec</div>
                    </div>
                </DateHeaderCellTemplate>
                <HorizontalAppointmentTemplate>
                    @if ((int)context.Label.Id == 3)
                    {
                        <div class="card appointment-height
                                @context.Label.BackgroundCssClass">
                            @string.Empty
                        </div>
                    }
                    else
                    {
                        <div class="card input-group-text overflow-hidden
                                @context.Label.TextCssClass
                                @context.Label.BackgroundCssClass">
                            <b>@(context.Appointment.Subject)</b>
                            @($"{context.Appointment.Start.ToString(constants.SHORTER_DATE_FORMAT)} to {context.Appointment.End.ToString(constants.SHORTER_DATE_FORMAT)}")
                        </div>
                    }
                </HorizontalAppointmentTemplate>
            </DxSchedulerTimelineView>
        </Views>
        <AppointmentTooltipHeaderTemplate>
            <h4>@context.Label?.Caption</h4>
        </AppointmentTooltipHeaderTemplate>
        <AppointmentTooltipTemplate>
            <div class="container">
                <span style="vertical-align: middle;">
                    <strong>Period:</strong>  @context.Appointment.Subject<br />
                    <strong>From:</strong>  @context.Appointment.Start.ToString("ddd, dd-MMM-yyyy") <strong>To:</strong>
                    @context.Appointment.End.ToString("ddd, dd-MMM-yyyy")<br />
                </span>
            </div>
        </AppointmentTooltipTemplate>
    </DxScheduler>
}

<style>
    .grid-height {
        overflow: auto;
        height: 50dvh;
    }

    .appointment-height {
        overflow: hidden;
        height: 5dvh;
    }

    .dxbl-sc-tb-wrapper {
        display: none !important;
    }

    .month-style {
        width: 8.33333333%;
        text-align: center;
        border-right: thin solid;
        border-right-color: gainsboro;
    }

    .month-style-nb {
        width: 8.33333333%;
        text-align: center;
    }

</style>



@code {
    bool IsReady;
    DxSchedulerDataStorage TermDataStorage;
    private List<Term>? Terms { get; set; }
    private List<int>? Years { get; set; }
    private List<int>? TermNumbers { get; set; }

    private DxGridCommandColumnEx? GridCommandColumn;
    private DxFormLayoutItem? customValidations;
    MessageBox? messageBox;
    CreateNewYear? newYearWizard;
    string? messageBoxWidth;

    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal string? ErrorHeader;
    internal string? ErrorMessage;
    U3ADbContext? dbc { get; set; }
    SystemSettings settings;
    int year = DateTime.Today.Year;
    bool isAfterNewYearWizard;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        Years = new List<int>();
        var localDate = dbc.GetLocalTime().Date;
        for (int i = -1; i < 5; i++)
        {
            Years.Add(localDate.AddYears(i).Year);
        }
        TermNumbers = new List<int>();
        for (int i = 1; i < 5; i++)
        {
            TermNumbers.Add(i);
        }
        await GetSchedule();
        IsReady = true;
    }

    async Task GetSchedule()
    {
        Terms = await BusinessRule.EditableTermsAsync(dbc);
        if (Terms != null)
        {
            if (isAfterNewYearWizard) { year = Terms.Select(x => x.Year).Max(); }
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                TermDataStorage = await BusinessRule.GetTermScheduleDataStorageAsync(dbc);
            }
        }
    }

    async Task CreateNewYear()
    {
        if (await newYearWizard.ShowAsync())
        {
            isAfterNewYearWizard = true;
            await GetSchedule();
            await messageBox.ShowOkOnlyAsync("New Year Wizard", "Your Term records have been updated.");
        }
    }


    async Task OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e is null)
        {
            throw new ArgumentNullException(nameof(e));
        }

        var editModel = (Term)e.EditModel;
        var lastTerm = await BusinessRule.GetLastTermAsync(dbc);
        if (e.IsNew)
        {
            if (lastTerm != null)
            {
                editModel.Year = lastTerm.Year;
                editModel.TermNumber = lastTerm.TermNumber + 1;
                if (editModel.TermNumber > 4)
                {
                    editModel.Year += 1;
                    editModel.TermNumber = 1;
                }
                var samTermLastYear = await BusinessRule.GetSameTermLastYearAsync(dbc, editModel.Year, editModel.TermNumber);
                editModel.StartDate = BusinessRule.StartOfWeek(samTermLastYear.StartDate.AddYears(1), DayOfWeek.Monday);
                editModel.Duration = samTermLastYear.Duration;
                var span = editModel.StartDate.Subtract(lastTerm.StartDate.AddDays(lastTerm.Duration * 7));
                editModel.EnrolmentStarts = span.Days / -7;
                editModel.EnrolmentEnds = editModel.Duration;
            }
            else
            {
                var today = dbc.GetLocalTime().Date;
                editModel.Year = today.Year;
                editModel.TermNumber = 1;
                editModel.StartDate = today.AddDays(((int)today.DayOfWeek - 1) * -1);
                editModel.Duration = 7;
                editModel.EnrolmentStarts = -7;
                editModel.EnrolmentEnds = 7;
            }
        }
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Term)e.EditModel;
        e.Cancel = !(await IsDataOK(editModel));
        if (!e.Cancel)
        {
            if (editModel.IsDefaultTerm) { ClearDefaultTerm(); }
            // Re-query a data item from the store.
            var dataItem = e.IsNew ? new Term() : dbc.Term.Find(editModel.ID);
            // Assign changes from the edit model to the data item.
            if (dataItem != null)
            {
                editModel.CopyTo(dataItem);
                try
                {
                    // Post changes to the database.
                    if (e.IsNew) await dbc.AddAsync(dataItem);
                    await dbc.SaveChangesAsync();
                    // update the Grid.
                    if (e.IsNew)
                    {
                        Terms.Insert(0, dataItem);
                    }
                    else
                    {
                        int idx = Terms.FindIndex(x => x.ID == dataItem.ID);
                        Terms[idx] = dataItem;
                    }
                    await GetSchedule();
                }
                catch (Exception ex)
                {
                    ErrorHeader = "Save to database error";
                    ErrorMessage = Helpers.GetErrorMessage(ex);
                    await ErrorPopup.ShowPopupAsync();
                    dbc?.ChangeTracker?.Clear();
                    e.Cancel = true;
                }
            }
        }
    }

    void ClearDefaultTerm()
    {
        // Allow only on default term at a time
        foreach (var t in Terms)
        {
            t.IsDefaultTerm = false;
        }
    }

    async Task<bool> IsDataOK(Term term)
    {
        bool result = true;
        mainGrid.BeginUpdate();
        customValidations.Caption = string.Empty;
        customValidations.Visible = false;
        DateTime minDate = new DateTime(term.Year, 1, 1);
        DateTime maxDate = new DateTime(term.Year, 12, 31);
        if (term.StartDate < minDate ||
            term.StartDate > maxDate ||
            term.StartDate.DayOfWeek != DayOfWeek.Monday)
        {
            customValidations.Caption = $"The Start Date must be Monday and in range {minDate.ToShortDateString()} to {maxDate.ToShortDateString()}";
            customValidations.Visible = true;
            result = false;
        }
        mainGrid.EndUpdate();
        if (term.TermNumber != 1)
        {
            Term prevTerm;
            prevTerm = await BusinessRule.GetPreviousTermAsync(dbc, term.Year, term.TermNumber);
            if (prevTerm != null)
            {
                if (term.EnrolmentStartDate < prevTerm.EnrolmentEndDate)
                {
                    await messageBox.ShowOkOnlyAsync("Enrolment Period ambiguous",
                                                                                        $@"<p>The <strong>Enrolment Start Date</strong> ({term.EnrolmentStartDate.ToShortDateString()})<br/>
                                                prior to last term's <strong>Enrolment End Date</strong> ({prevTerm.EnrolmentEndDate.ToShortDateString()}).</p>
                                                <p>The enrolment period is ambiguous which is not permitted.</p>");
                    return false;
                }
                if (term.EnrolmentStartDate >= prevTerm.EnrolmentEndDate.AddDays(1))
                {
                    result = await messageBox.ShowAsync("Enrolment Period not continuous",
                                                                                    $@"<p>The <strong>Enrolment Start Date</strong> ({term.EnrolmentStartDate.ToShortDateString()})<br/>
                                            is later than last term's <strong>Enrolment End Date</strong> ({prevTerm.EnrolmentEndDate.ToShortDateString()}).</p>
                                            <p>The enrolment period is not continuous and there will be a period where members
                                            are not permitted to enrol.</p><p>Do you wish to continue?</p>");
                    return result;
                }
            }
        }
        if (term.TermNumber != 4)
        {
            var nextTerm = await BusinessRule.GetNextTermAsync(dbc, term.Year, term.TermNumber);
            if (nextTerm != null)
            {
                if (nextTerm.EnrolmentStartDate < term.EnrolmentEndDate.AddDays(-1))
                {
                    await messageBox.ShowOkOnlyAsync("Enrolment Period ambiguous",
                                                                                    $@"<p>The <strong>Enrolment End Date</strong> ({term.EnrolmentEndDate.ToShortDateString()})<br/>
                                            prior to next term's <strong>Enrolment Start Date</strong> ({nextTerm.EnrolmentStartDate.ToShortDateString()}).</p>
                                            <p>The enrolment period is ambiguous which is not permitted.</p>");
                    return false;
                }
                if (nextTerm.EnrolmentStartDate >= term.EnrolmentEndDate.AddDays(1))
                {
                    result = await messageBox.ShowAsync("Enrolment Period not continuous",
                                                                                        $@"<p>The <strong>Enrolment End Date</strong> ({term.EnrolmentEndDate.ToShortDateString()})<br/>
                                            is later than next term's <strong>Enrolment Start Date</strong> ({nextTerm.EnrolmentStartDate.ToShortDateString()}).</p>
                                            <p>The enrolment period is not continuous and there will be a period where members
                                            are not permitted to enrol.</p><p>Do you wish to continue?</p>");
                    return result;
                }
            }
        }
        return result;
    }

    public void OnPrint()
    {
        NavManager.NavigateTo("Public/ClassScheduleView");
    }

    async Task OnBeforeNavigation(LocationChangingContext context)
    {
        if (Terms.Count > 0 && !Terms.Any(x => x.IsDefaultTerm))
        {
            await messageBox.ShowOkOnlyAsync("Set the Current Term", "One term must be chosen as the current or default term.<br/>Please set the current term before exit.");
            context.PreventNavigation();
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
