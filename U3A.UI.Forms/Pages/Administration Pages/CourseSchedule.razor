@page "/CourseSchedule"

@namespace U3A.UI.Forms

@using U3A.Model
@using System.Text.Json
@using System.Text.Json.Nodes
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject WorkstationService ws

@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{


    if (!IsPortal)
    {
        <ContextHelpTitle Title="Course Schedule" HelpTopic="course-schedule.html" />
    }
    <FullScreen DisplayOffset=@((IsAdminPortal) ? 7 : 4)
                HideToggle=@(IsPortal)>
        <ContentTemplate>
            <DxScheduler StartDate="@StartDate"
                         AllowCreateAppointment="false"
                         AllowDeleteAppointment="false"
                         AllowEditAppointment="false"
                         ShowAppointmentTooltip="true"
                         ActiveViewType=@viewType
                         DataStorage="@DataStorage"
                         StartDateChanged="OnStartDateChanged"
                         ActiveViewTypeChanged="OnViewTypeChanged"
                         CssClass="w-100">
                <ToolbarItems>
                    <DxToolbarItem Visible=@(!IsPortal) >
                        <Template Context="termContext">
                            <div class="d-flex">
                                <div class="flex-grow-0 pt-1 pe-2">Term:</div>
                                <TermsComboBox Terms="@terms"
                                               @bind-SelectedTerm="@selectedTerm"
                                               @bind-SelectedTerm:after=@(async() => await SelectedTermChanged(selectedTerm)) />
                            </div>
                        </Template>
                    </DxToolbarItem>
                    <DxToolbarItem BeginGroup="true" Visible=@(!IsPortal)>
                        <Template Context="venueContext">
                            <div class="d-flex">
                                <div class="flex-grow-0 pt-1 pe-2">Venue(s):</div>
                                <DxTagBox Data="@AvailableVenues"
                                          ClearButtonDisplayMode="default"
                                          TextFieldName="@nameof(Venue.Name)"
                                          NullText="Optionally filter by one or more venue locations."
                                          @bind-Values="@VenuesToFilter" @bind-Values:after=@SelectedVenuesChanged>
                                </DxTagBox>
                            </div>
                        </Template>
                    </DxToolbarItem>
                    <DxSchedulerDateNavigatorToolbarItem Alignment="ToolbarItemAlignment.Right" />
                    <DxSchedulerPreviousIntervalToolbarItem Alignment="ToolbarItemAlignment.Right" />
                    <DxSchedulerNextIntervalToolbarItem Alignment="ToolbarItemAlignment.Right" />
                    <DxSchedulerResourceNavigatorToolbarItem Visible=@(!IsPortal) />
                    <DxSchedulerViewNavigatorToolbarItem Visible=@(!IsPortal) />
                </ToolbarItems>
                <Views>
                    <DxSchedulerDayView DayCount="1" ShowWorkTimeOnly="true" WorkTime="@VisibleTime"></DxSchedulerDayView>
                    @if (!IsPortal)
                    {
                        <DxSchedulerWeekView ShowWorkTimeOnly="true" WorkTime="@VisibleTime"></DxSchedulerWeekView>
                        <DxSchedulerWorkWeekView ShowWorkTimeOnly="true" WorkTime="@VisibleTime"></DxSchedulerWorkWeekView>
                        <DxSchedulerMonthView ShowWorkDaysOnly="true" MonthCount="1"></DxSchedulerMonthView>
                        <DxSchedulerTimelineView Duration="@TimeSpan.FromDays(14)" CellMinWidth="80">
                            <Scales>
                                <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Day" UnitCount="1"></DxSchedulerTimeScale>
                                <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Hour" UnitCount="2"></DxSchedulerTimeScale>
                            </Scales>
                        </DxSchedulerTimelineView>
                    }
                </Views>
                <AppointmentTooltipHeaderTemplate>
                    <div class="fs-5">
                        @context.Label?.Caption
                    </div>
                </AppointmentTooltipHeaderTemplate>
                <AppointmentTooltipTemplate>
                    <div class="container">
                        <span style="card-fl vertical-align: middle;">
                            <strong>Subject:</strong>  @context.Appointment.Subject<br />
                            <strong>Leader:</strong>  @context.Appointment.Description<br />
                            <strong>Location:</strong>  @context.Appointment.Location<br />
                            <strong>From:</strong>  @context.Appointment.Start.ToString("hh:mm tt") <strong>To:</strong>
                            @context.Appointment.End.ToString("hh:mm tt")<br />
                            <strong>Status:</strong>  @context.Label?.Caption<br />
                        </span>
                    </div>
                </AppointmentTooltipTemplate>
            </DxScheduler>
        </ContentTemplate>
    </FullScreen>
    <div class="row col col-12 col-md-7 mx-auto mt-2">
        <DxButton Text="Return to menu" id="exitButton" Visible="@IsPortal"
                  IconCssClass="menu-icon bi-door-closed me-1"
                  CssClass="col-12 col-lg-8 mb-1 mx-auto"
                  Click="@(e => ReturnToMenu(PortalMenuResult.MenuOptionCompleted))"
                  RenderStyle="ButtonRenderStyle.Primary"
                  RenderStyleMode="ButtonRenderStyleMode.Outline">
        </DxButton>
    </div>
}

@code {

    [Parameter]
    public bool IsPortal { get; set; }
    [Parameter]
    public bool IsAdminPortal { get; set; }
    [Parameter]
    public bool IsPublic { get; set; }
    [Parameter]
    public EventCallback<PortalMenuResult> OnSelectedOptionCompleted { get; set; }


    bool IsReady;
    public List<Venue>? venues { get; set; }
    public List<Venue>? AvailableVenues { get; set; }
    public IEnumerable<Venue>? VenuesToFilter { get; set; }
    LocalTime localTime;
    SchedulerViewType viewType = SchedulerViewType.WorkWeek;

    private List<Term> terms { get; set; }
    private Term? selectedTerm { get; set; }
    DateTime StartDate { get; set; } = DateTime.Today;
    U3ADbContext dbc { get; set; }

    DxSchedulerTimeSpanRange VisibleTime = new DxSchedulerTimeSpanRange(TimeSpan.FromHours(6), TimeSpan.FromHours(22));

    DxSchedulerDataStorage? DataStorage;

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
        venues = await BusinessRule.SelectableVenuesAsync(dbc);
        selectedTerm = await BusinessRule.CurrentTermAsync(dbc);
        if (IsPublic) IsPortal = true;
        if (selectedTerm != null)
        {
            SelectedTermChanged(selectedTerm);
            await ProcessSelection();
        }
        IsReady = true;
        await base.OnInitializedAsync();
    }

    async void OnStartDateChanged(DateTime newStartDate) => StartDate = dbc.GetLocalTime(newStartDate).Date;

    async void OnViewTypeChanged(SchedulerViewType v) => viewType = v;

    async Task SelectedTermChanged(Term term)
    {
        if (dbc == null) { return; }
        selectedTerm = term;
        var now = dbc.GetLocalTime().Date;
        if (now > term.StartDate && now <= term.EndDate)
        {
            StartDate = now;
        }
        else { StartDate = term.StartDate; }
        await ProcessSelection();
    }

    async Task SelectedVenuesChanged()
    {
        await ProcessSelection();
    }

    async Task ProcessSelection()
    {
        if (selectedTerm != null)
        {
            if (VenuesToFilter == null) { VenuesToFilter = new List<Venue>(); }
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                DataStorage = await BusinessRule.GetCourseScheduleDataStorageAsync(dbc, selectedTerm, VenuesToFilter, IncludeOffScheduleActivities: !IsPortal);
                if (!IsReady)
                {
                    DxSchedulerDateTimeRange range = new DxSchedulerDateTimeRange(StartDate, StartDate.AddYears(1));
                    var venueNames = DataStorage.GetAppointments(range).Select(x => x.Location);
                    AvailableVenues = venues.Where(x => venueNames.Contains(x.Name)).ToList();
                }
            }
        }
    }

    async Task ReturnToMenu(PortalMenuResult result)
    {
        await OnSelectedOptionCompleted.InvokeAsync(result);
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
