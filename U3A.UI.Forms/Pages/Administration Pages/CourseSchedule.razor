@page "/CourseSchedule"

@namespace U3A.UI.Forms

@using U3A.Model
@using System.Text.Json
@using System.Text.Json.Nodes
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject WorkstationService ws
@inject Blazored.LocalStorage.ILocalStorageService ls

@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <MessageBox @ref="@messageBox">
        <TextTemplate>
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutGroup Decoration="FormLayoutGroupDecoration.None" ColSpanMd="12">
                    <DxFormLayoutItem Caption="Term" ColSpanSm="12">
                        <TermsComboBox Terms="@terms"
                                       @bind-SelectedTerm="@selectedTerm"
                                       @bind-SelectedTerm:after=@(async() => await SelectedTermChanged(selectedTerm)) />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Venue(s)" ColSpanSm="12">
                        <DxTagBox Data="@AvailableVenues"
                                  ClearButtonDisplayMode="default"
                                  TextFieldName="@nameof(Venue.Name)"
                                  NullText="Optionally filter by one or more venue locations."
                                  @bind-Values="@VenuesToFilter" @bind-Values:after=@SelectedFilterChanged>
                        </DxTagBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Course Types(s)" ColSpanSm="12">
                        <DxTagBox Data="@courseTypes"
                                  ClearButtonDisplayMode="default"
                                  TextFieldName="@nameof(CourseType.Name)"
                                  NullText="Optionally filter by one or more course types."
                                  @bind-Values="@CourseTypesToFilter" @bind-Values:after=@SelectedFilterChanged>
                        </DxTagBox>
                    </DxFormLayoutItem>
                </DxFormLayoutGroup>
            </DxFormLayout>
        </TextTemplate>
    </MessageBox>

    if (!IsPortal && !IsPublic)
    {
        <ContextHelpTitle Title="Course Schedule" HelpTopic="course-schedule.html" />
    }
    <FullScreen DisplayOffset=@((IsAdminPortal || IsPublic) ? 7 : 4)
                HideToggle=false>
        <ContentTemplate>
            <DxScheduler StartDate="@StartDate"
                         AllowCreateAppointment="false"
                         AllowDeleteAppointment="false"
                         AllowEditAppointment="false"
                         ShowAppointmentTooltip="true"
                         ActiveViewType=@viewType
                         DataStorage="@DataStorage"
                         StartDateChanged="OnStartDateChanged"
                         ActiveViewTypeChanged="OnViewTypeChanged"
                         CssClass="w-100">
                <ToolbarItems>
                    <DxToolbarItem BeginGroup="true"
                                   Alignment="ToolbarItemAlignment.Right"
                                   CssClass="text-fl-primary"
                                   RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                   Text="Filter"
                                   Click="@(async() => await messageBox.ShowOkOnlyAsync("Schedule Filter"))" />
                    <DxSchedulerDateNavigatorToolbarItem />
                    <DxSchedulerPreviousIntervalToolbarItem />
                    <DxSchedulerNextIntervalToolbarItem />
                    <DxSchedulerResourceNavigatorToolbarItem />
                    <DxSchedulerViewNavigatorToolbarItem />
                </ToolbarItems>
                <Views>
                    <DxSchedulerDayView DayCount="1" ShowWorkTimeOnly="true" WorkTime="@VisibleTime"></DxSchedulerDayView>
                    <DxSchedulerWeekView ShowWorkTimeOnly="true" WorkTime="@VisibleTime"></DxSchedulerWeekView>
                    <DxSchedulerWorkWeekView ShowWorkTimeOnly="true" WorkTime="@VisibleTime"></DxSchedulerWorkWeekView>
                    <DxSchedulerMonthView MonthCount="1"></DxSchedulerMonthView>
                    <DxSchedulerTimelineView Duration="@TimeSpan.FromDays(7)">
                        <Scales>
                            <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Month" />
                            <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Day" UnitCount="1" />
                        </Scales>
                    </DxSchedulerTimelineView>
                </Views>
                <AppointmentTooltipTemplate>
                    @{
                        var leader = context.Appointment.Description;
                        var start = context.Appointment.Start.ToString("hh:mm tt");
                        var end = context.Appointment.End.ToString("hh:mm tt");
                        var Class = context.Appointment.CustomFields["Source"] as Class;
                        var leaders = Class?.LeaderNamesOnly.Replace(Environment.NewLine, "<br/>");
                    }
                    <div style="line-height:1.5rem;">
                        <div class="d-flex">
                            <div class="bi bi-person popup-icon-style" />
                            <div class="popup-text-style flex-grow-1"> @(new MarkupString(leaders))</div>
                        </div>
                        <div class="d-flex">
                            <div class="bi bi-geo-alt popup-icon-style" />
                            <div class="popup-text-style flex-grow-1"> @context.Appointment.Location</div>
                        </div>
                        <div class="d-flex">
                            <div class="bi bi-alarm popup-icon-style" />
                            <div class="popup-text-style flex-grow-1"> @start - @end</div>
                        </div>
                        <div class="d-flex">
                            <div class="bi bi-calendar-week popup-icon-style" />
                            <div class="popup-text-style flex-grow-1"> @Class.OccurrenceTextBrief</div>
                        </div>
                        <br />
                        <div class="d-flex">
                            <div class="bi bi-card-checklist" />
                            <div class="flex-grow-1">&nbsp;&nbsp; @context.Label?.Caption</div>
                        </div>
                    </div>
                </AppointmentTooltipTemplate>
            </DxScheduler>
        </ContentTemplate>
    </FullScreen>
    <div class="row col col-12 col-md-7 mx-auto mt-2">
        <DxButton Text="Return to menu" id="exitButton" Visible="@IsPortal"
                  IconCssClass="menu-icon bi-door-closed me-1"
                  CssClass="col-12 col-lg-8 mb-1 mx-auto"
                  Click="@(e => ReturnToMenu(PortalMenuResult.MenuOptionCompleted))"
                  RenderStyle="ButtonRenderStyle.Primary"
                  RenderStyleMode="ButtonRenderStyleMode.Outline">
        </DxButton>
    </div>
}

<style>
    .popup-icon-style {
        font-size: 1.2rem;
        align-items: center;
        margin-right: 0.5rem;
    }
    .popup-text-style {
        font-size: 0.75rem;
        align-items: center;
    }
</style>

@code {

    const string VIEW_TYPE_KEY = "{BFE9C0BE-E49C-44AA-8598-1A65483F68E2}";

    [Parameter]
    public bool IsPortal { get; set; }
    [Parameter]
    public bool IsAdminPortal { get; set; }
    [Parameter]
    public bool IsPublic { get; set; }
    [Parameter]
    public EventCallback<PortalMenuResult> OnSelectedOptionCompleted { get; set; }


    bool IsReady;
    public List<Venue>? venues { get; set; }
    public List<CourseType>? courseTypes { get; set; }
    public List<Venue>? AvailableVenues { get; set; }
    public IEnumerable<Venue>? VenuesToFilter { get; set; }
    public IEnumerable<CourseType>? CourseTypesToFilter { get; set; }
    LocalTime localTime;
    SchedulerViewType viewType;

    private List<Term> terms { get; set; }
    private Term? selectedTerm { get; set; }
    DateTime StartDate { get; set; } = DateTime.Today;
    U3ADbContext dbc { get; set; }
    string[] filterBy = new string[] { "Venue", "Course Type" };
    string selectedFilterBy = "Venue";
    bool isDrawerOpen;
    MessageBox? messageBox;

    DxSchedulerTimeSpanRange VisibleTime = new DxSchedulerTimeSpanRange(TimeSpan.FromHours(6), TimeSpan.FromHours(22));

    DxSchedulerDataStorage? DataStorage;

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
        venues = await BusinessRule.SelectableVenuesAsync(dbc);
        courseTypes = await BusinessRule.SelectableCourseTypesAsync(dbc);
        selectedTerm = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
        if (selectedTerm == null) { selectedTerm = await BusinessRule.CurrentTermAsync(dbc); }
        if (selectedTerm != null)
        {
            await SelectedTermChanged(selectedTerm);
            var venueNames = BusinessRule.GetAppointmentsInRange(DataStorage, StartDate, StartDate.AddYears(1), ExcludeCancellations: true)
                                .Select(x => x.Location)
                                .Distinct();
            AvailableVenues = venues.Where(x => venueNames.Contains(x.Name)).ToList();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var vt = await ls.GetItemAsStringAsync(VIEW_TYPE_KEY);
            if (!Enum.TryParse<SchedulerViewType>(vt, out viewType)) { viewType = SchedulerViewType.Month; }
            IsReady = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    async void OnStartDateChanged(DateTime newStartDate) => StartDate = dbc.GetLocalTime(newStartDate).Date;

    async void OnViewTypeChanged(SchedulerViewType v)
    {
        viewType = v;
        ls.SetItemAsStringAsync(VIEW_TYPE_KEY, Enum.GetName<SchedulerViewType>(v));
    }

    async Task SelectedTermChanged(Term term)
    {
        if (dbc == null) { return; }
        selectedTerm = term;
        var now = dbc.GetLocalTime().Date;
        if (now > term.StartDate && now <= term.EndDate)
        {
            StartDate = now;
        }
        else { StartDate = term.StartDate; }
        await ProcessSelection();
    }

    async Task SelectedFilterChanged()
    {
        await ProcessSelection();
    }

    async Task ProcessSelection()
    {
        if (selectedTerm != null)
        {
            if (VenuesToFilter == null) { VenuesToFilter = new List<Venue>(); }
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                DataStorage = await BusinessRule.GetCourseScheduleDataStorageAsync(dbc, selectedTerm, CourseTypesToFilter, VenuesToFilter, IncludeOffScheduleActivities: (!IsPortal && !IsPublic));
            }
        }
    }

    async Task ReturnToMenu(PortalMenuResult result)
    {
        await OnSelectedOptionCompleted.InvokeAsync(result);
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
