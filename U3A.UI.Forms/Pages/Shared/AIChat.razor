@page "/AIChat"

@using DevExpress.AIIntegration.OpenAI.Services
@using DevExpress.AIIntegration.Blazor.Chat
@using System.Reflection
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json
@using System.Text.Json.Schema
@using Markdig

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService

<ContextHelpTitle Title="AI Chat (Preview)" HelpTopic="ai-chat.html"></ContextHelpTitle>
<div>
    <b>Caveats:</b>
    <ul>
        <li>AI Chat is a work in progress and may not always provide accurate answers.</li>
        <li>Initialisation is slow</li>
        <li>Responses are very slow</li>
        <li>System may appear to hang when closed. Its not a hang, its just slow.</li>
    </ul>
    </div>
<div class="chat-container">
    <DxAIChat CssClass="chat-box" UseStreaming="true" MaxTokens="80000" Temperature="0.5f"
          Initialized="Initialized"
          ResponseContentFormat="ResponseContentFormat.Markdown">
    <MessageContentTemplate>
        <div class="my-chat-content">
                @ToHtml(context.Content)
        </div>
    </MessageContentTemplate>
</DxAIChat>
</div>

<style>
    .chat-container {
        width: 50%;
        margin: auto;
        border: 1px solid #ccc;
        border-radius: 10px;
   }

    .chat-box {
        width: 100%;
        height: 75dvh;
        padding: 10px;
    }
</style>

@code {

    static readonly Regex trimmer = new Regex(@"[^\S\r\n]+");

    const string prompt = @"""You are an Student Support Representative specialized in analyzing nested JSON documents.
            Your role is to assist users by providing concise, accurate answers to their questions about data contained within these files.            
            ### Tasks:
            - Always provide precise and accurate information based on the nested JSON data.
            - If you cannot find an answer based on the provided data, explicitly state: 'The requested information cannot be found in the data provided.'
            ###
            ### Instructions:
            - multiple classes can have the same name. It is important to distinguish each by its day, date and start time
            - when displaying active or waitlist counts always include the current term number.
                ### Example:
                    - **User Question:** ""How many active enrolments in Aquarobics?""
                    - **Response:** ""In Term 1 there are 25 active enrolments in Aquarobics.""
                ###
            - a leader is also known as a teacher, lecturer or tutor.
            - a clerk is also known as an administrator or coordinator.
            - a member is also known as a student or participant.
            - if Total Active Students >= Maximum Students then the class is full.
            - a class is closed if the class is full.
            - a class is closed if the class AllowAutoEnroll = false.
            - Do not providing answers if the data in the file is insufficient for a reliable response.
            ###
""";

    async Task Initialized(IAIChat chat)
    {
        var strippedPrompt = trimmer.Replace(prompt, " ");
        var json = await GetData();
        byte[] bytes = Encoding.UTF8.GetBytes(json);
        using (var ms = new MemoryStream(bytes))
        {
            await chat.SetupAssistantAsync(new OpenAIAssistantOptions(
                $"{Guid.NewGuid().ToString("N")}.json",
                ms,
                strippedPrompt)
            );
        }
    }

    MarkupString ToHtml(string text)
    {
        return (MarkupString)Markdown.ToHtml(ClearAnnotations(text));
    }

    string ClearAnnotations(string text)
    {
        return Regex.Replace(text, @"【.*?】", "");
    }

    async Task<string> GetData()
    {
        AIChatClassData data = new();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
            {
                data = await BusinessRule.GetAIChatClassDataAsync(dbc, dbcT, tenantService);
            }
        }
        string json = JsonSerializer.Serialize<AIChatClassData>(data);

        return json;
    }


}
