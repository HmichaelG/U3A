@page "/AiChat"

@using DevExpress.AIIntegration.OpenAI.Services
@using DevExpress.AIIntegration.Blazor.Chat
@using System.Reflection
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json
@using System.Text.Json.Schema
@using System.Text.Json.Serialization
@using Markdig
@using Microsoft.Extensions.AI

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService
@inject IChatClient aiChatClient

<ContextHelpTitle Title="Ai Chat (Preview)" HelpTopic="ai-chat.html"></ContextHelpTitle>
<DxSplitter Width="100%" Height="90%">
    <Panes>
        <DxSplitterPane Size="33%">
            <b>Caveats:</b>
            <ul>
                <li>AI Chat is a work in progress. It is reasonably accurate.</li>
                <li>Responses can be very slow</li>
                <li>System may appear to hang when closed. Its not a hang, its just slow.</li>
            </ul>
            <b>What can it do?</b>
            <p>
                AI Chat is a conversational AI that can answer questions about your U3A's Class Schedule, the leaders, clerks & students enrolled.
                It is designed to assist you by providing reliable and relevant answers to your questions about the Class Schedule.
            </p>
            <b>Sample questions</b>
            <ol>
                <li>Describe &quot;Art is Fun&quot;</li>
                <li>Show details for Yoga</li>
                <li>Who are the contacts for &quot;Tai Chi&quot;?</li>
                <li>What are Jason Jones's roles?</li>
                <li>List by role all participants in Aquarobics, one per line including name and email.</li>
                <li>List waitlist for Aquarobics</li>
                <li>Exercise classes on Thursday?</li>
            </ol>
            <b>Ai responses are context aware</b>
            <p>
                Ai Chat is context aware. It will remember the context of the conversation and provide relevant answers within that context. For example...
            </p>
            <ol>
                <li>Show details for Aquarobics'</li>
                <li>Who is the leader?</li>
                <li>Who are the clerks?</li>
                <li>Is Betsy Smith a student?</li>
            </ol>
            <p>
                Questions 2,3,and 4 above will use the context of the first question.
                That is, the Ai will remember the class you asked about and provide relevant answers to subsequent questions.
            </p>
        </DxSplitterPane>
        <DxSplitterPane>
            <div class="chat-container">
                <DxAIChat CssClass="chat-box"
                Initialized="Initialized"
                ResponseContentFormat="ResponseContentFormat.Markdown"
                MaxTokens="10000"
                Temperature="0.2f">
                    <MessageContentTemplate>
                        <div class="my-chat-content">
                            @ToHtml(context)
                        </div>
                    </MessageContentTemplate>
                </DxAIChat>
            </div>
        </DxSplitterPane>
    </Panes>
</DxSplitter>

<style>
    .chat-container {
    width: 95%;
    margin: auto;
    border: 1px solid #ccc;
    border-radius: 10px;
    }

    .chat-box {
    width: 100%;
    height: 85dvh;
    padding: 10px;
    }

    h3 {
    font-size: clamp(10px, 2.5vw, 14px);
    margin-top: 10px;
    }

    h1, h2, h4 {
    margin-top: 10px;
    }

</style>

@code {

    async Task Initialized(IAIChat chat)
    {
       
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            var fileName = $"Class Schedule.json";
            byte[] bytes;
            (string json, string schema) = await GetJsonData();
            bytes = Encoding.UTF8.GetBytes(json);

            string prompt = $@"
        ## Introduction:
        -- You are a helpful assistant specialized in analyzing the Class Schedule which is a json document that conforms to the schema
    {schema}
        -- Your role is to assist students by providing reliable and relevant answers to their questions about the Class Schedule.

        ## Tasks:
        - Always provide accurate information based only on the file data.
        - Do not provide answers if the data in the file is insufficient for a reliable response.
        - do not attempt to list participants if none available.

        ## Instructions:
        - when searching for classes search in the Name, class Type and Description.
        - Always identify a class by its name, day, time, venue, venue address and term offered.
        - include the day when displaying the time. For example: 'Monday 1:45 pm - 3:00pm'.
        - students, leaders and clerks are participants.
        - a leader is not a student.
        - a clerk is also a student.
        - waitlisted are not participants.
        - Leader, teacher, lecturer, and tutor are interchangeable.
        - Clerk, administrator and coordinator are interchangeable.
        - Contacts are Leaders and Clerks only.
        - A student is a contact only if also a clerk.
        - If Total Active Students >= Maximum Students, then the class is full.
        - A class is closed if the class is full.
        - A class is closed if the class AllowAutoEnroll = false.
        - Always identify whether the class is open or closed giving your reason.
";
            using (var ms = new MemoryStream(bytes))
            {
                await chat.SetupAssistantAsync(new OpenAIAssistantOptions(fileName, ms, prompt)
                    {
                        UseFileSearchTool = true
                    }
                );
            }
        }
    }

    MarkupString ToHtml(BlazorChatMessage message)
    {
        var text = message.Content;
        var html = Markdown.ToHtml(ClearAnnotations(text));
        html = ClearParagraphBreakPassOne(html);
        html = ClearParagraphBreakPassTwo(html);
        Console.WriteLine(html);
        return (MarkupString)html;
    }

    string ClearParagraphBreakPassOne(string text)
    {
        string pattern = @"<li><p>(.*?)</p>";
        string replacement = @"<br/><li>$1</li>";
        return Regex.Replace(text, pattern, replacement);
    }

    string ClearParagraphBreakPassTwo(string text)
    {
        string pattern = @"<p>(.*?)</p>";
        string replacement = @"$1";
        return Regex.Replace(text, pattern, replacement);
    }

    string ClearAnnotations(string text)
    {
        return Regex.Replace(text, @"【.*?】", "");
    }

    async Task<(string, string)> GetJsonData()
    {
        AIChatClassData data = new();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
            {
                data = await BusinessRule.GetJsonAIChatClassDataAsync(dbc, dbcT, tenantService);
            }
        }

        JsonSerializerOptions options = JsonSerializerOptions.Default;
        string schema = options.GetJsonSchemaAsNode(typeof(AIChatClassData)).ToString();

        var jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                DefaultIgnoreCondition = JsonIgnoreCondition.Never,
            };
        string json = JsonSerializer.Serialize<AIChatClassData>(data, jsonOptions);

        return (json, schema);
    }
}
