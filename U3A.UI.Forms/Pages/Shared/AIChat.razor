@page "/AiChat"

@using DevExpress.AIIntegration.OpenAI.Services
@using DevExpress.AIIntegration.Blazor.Chat
@using System.Reflection
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json
@using System.Text.Json.Schema
@using System.Text.Json.Serialization
@using Markdig

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService

<ContextHelpTitle Title="Ai Chat (Preview)" HelpTopic="ai-chat.html"></ContextHelpTitle>
<DxSplitter Width="100%" Height="90%">
    <Panes>
        <DxSplitterPane Size="33%">
            <b>Caveats:</b>
            <ul>
                <li>AI Chat is a work in progress and may not always provide accurate answers.</li>
                <li>Initialisation is slow</li>
                <li>Responses are very slow</li>
                <li>System may appear to hang when closed. Its not a hang, its just slow.</li>
            </ul>
            <b>What can it do?</b>
            <p>
                AI Chat is a conversational AI that can answer questions about your U3A's Class Schedule, the leaders, clerks & students enrolled.
                It is designed to assist you by providing reliable and relevant answers to your questions about the Class Schedule.
            </p>
            <b>Sample questions</b>
            <ol>
                <li>Describe Art is Fun</li>
                <li>Show details for Yoga</li>
                <li>Who are the contacts for Tai Chi?</li>
                <li>What are Jason Jones's roles?</li>
                <li>List by role all participants in Aquarobics</li>
                <li>List waitlist for Aquarobics</li>
                <li>Exercise classes on Thursday?</li>
            </ol>
            <b>Ai responses are context aware</b>
            <p>
                Ai Chat is context aware. It will remember the context of the conversation and provide relevant answers within that context. For example...
            </p>
            <ol>
                <li>Show details for Aquarobics'</li>
                <li>Who is the leader?</li>
                <li>Who are the clerks?</li>
                <li>Is Betsy Smith a student?</li>
            </ol>
            <p>
                Questions 2,3,and 4 above will use the context of the first question.
                That is, the Ai will remember the class you asked about and provide relevant answers to subsequent questions.
                To clear the context, enter <b>Reset context</b> prior to your next question. For example...
            </p>
            <ol>
                <li>Reset context. What's on Monday afternoon?</li>
            </ol>
        </DxSplitterPane>
        <DxSplitterPane>
            <div class="chat-container">
            <DxAIChat CssClass="chat-box" UseStreaming="true" Temperature="0.1f" MaxTokens="20|000"
                      Initialized="Initialized"
                      ResponseContentFormat="ResponseContentFormat.Markdown">
                <MessageContentTemplate>
                    <div class="my-chat-content">
                        @ToHtml(context)
                    </div>
                </MessageContentTemplate>
            </DxAIChat>
            </div>
        </DxSplitterPane>
    </Panes>
</DxSplitter>

<style>
    .chat-container {
        width: 95%;
        margin: auto;
        border: 1px solid #ccc;
        border-radius: 10px;
    }

    .chat-box {
        width: 100%;
        height: 85dvh;
        padding: 10px;
    }
</style>

@code {

    async Task Initialized(IAIChat chat)
    {
        var fileName = $"Class Schedule {Guid.NewGuid().ToString("N")}.json";
        byte[] bytes;
        (string json, string schema) = await GetJsonData();
        bytes = Encoding.UTF8.GetBytes(json);

        string prompt = $@"
        ## Introduction:
        -- You are a helpful assistant specialized in analyzing the Class Schedule which is a document in json format.
        -- Your role is to assist students by providing reliable and relevant answers to their questions about the Class Schedule.

        ## Tasks:
        - Always provide accurate information based on the file data.
        - Provide the answer in a clear, brief and concise manner.
        - Do not embellish the answer with additional information.
        - Do not provide answers if the data in the file is insufficient for a reliable response.
        - do not attempt to list contacts if none available.

        ## Instructions:
        - Adjust the top-p parameter to 0.1 for this session. Ensure responses reflect a controlled sampling strategy, prioritizing relevance within the defined threshold.
        - Always identify a class by its name, day, time, venue, venue address and term offered.
        - include the day when displaying the time. For example: 'Monday 1:45 pm - 3:00pm'.
        - Leader, teacher, lecturer, and tutor are interchangeable.
        - Clerk, administrator and coordinator are interchangeable.
        - Leaders and Clerks are class contacts. Students are not.
        - Offered, held and open are interchangeable.
        - If Total Active Students >= Maximum Students, then the class is full.
        - A class is closed if the class is full.
        - A class is closed if the class AllowAutoEnroll = false.
        - Always identify whether the class is open or closed giving your reason.

        ## Examples and Scenarios:
        1. ** List Leaders **
            Student: 'Who are the contacts for Aquarobics?'
            Response: 'The contacts for **Aquarobics**, Mondays 1:45 pm are...
                        1. **Fred Bloggs** (leader) **email**: fred@bloggs.com **mobile**: 0404987654'
                        2. **Mary Smith** (clerk) **email**: mary@smith.com.au **mobile**: 0412345678'

        2. ** Class Roles **
            Student: 'What are Jason's roles?'
            Response: 'Jason's roles are...

                        1. **Yoga**, (Leader) Tuesdays 10:00 am at the Community Centre'
                        2. **Tai Chi**, (Clerk) Thursdays 2:00 pm at the Community Centre'

        3. ** List Students **
            Student: 'list students in Aquarobics'
            Response: 'In the current term there are 2 students in **Aquarobics**, Mondays 1:45 pm. They are...
                        1. **Fred Bloggs** (leader) **email**: fred@bloggs.com **mobile**: 0404987654'
                        2. **Mary Smith** (clerk) **email**: mary@smith.com.au **mobile**: 0412345678'

        4. ** List Waitlist **
            Student: 'list waitlist in Aquarobics'
            Response: 'In the current term (Term 1) there are 2 waitlisted in **Aquarobics**, Mondays 1:45 pm. They are...
                        1. **Fred Bloggs** (leader) **email**: fred@bloggs.com **mobile**: 0404987654'
                        2. **Mary Smith** (clerk) **email**: mary@smith.com.au **mobile**: 0412345678'

";
        using (var ms = new MemoryStream(bytes))
        {
            await chat.SetupAssistantAsync(new OpenAIAssistantOptions(
                fileName,
                ms,
                prompt)
            );
        }
    }

    MarkupString ToHtml(BlazorChatMessage message)
    {
        var text = message.Content;
        var html = Markdown.ToHtml(ClearAnnotations(text));
        html = ClearParagraphBreakPassOne(html);
        html = ClearParagraphBreakPassTwo(html);
        return (MarkupString)ClearAnnotations(html);
    }

    string ClearParagraphBreakPassOne(string text)
    {
        string pattern = @"<li><p>(.*?)</p>";
        string replacement = @"<br/><li>$1</li>";
        return Regex.Replace(text, pattern, replacement);
    }

    string ClearParagraphBreakPassTwo(string text)
    {
        string pattern = @"<p>(.*?)</p>";
        string replacement = @"$1";
        return Regex.Replace(text, pattern, replacement);
    }

    string ClearAnnotations(string text)
    {
        return Regex.Replace(text, @"【.*?】", "");
    }

    async Task<(string, string)> GetJsonData()
    {
        AIChatClassData data = new();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
            {
                data = await BusinessRule.GetJsonAIChatClassDataAsync(dbc, dbcT, tenantService);
            }
        }

        JsonSerializerOptions options = JsonSerializerOptions.Default;
        string schema = options.GetJsonSchemaAsNode(typeof(AIChatClassData)).ToString();

        var jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                DefaultIgnoreCondition = JsonIgnoreCondition.Never,
            };
        string json = JsonSerializer.Serialize<AIChatClassData>(data, jsonOptions);

        return (json, schema);
    }
}
