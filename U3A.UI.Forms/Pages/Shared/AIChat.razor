@page "/AiChat"

@using DevExpress.AIIntegration.OpenAI.Services
@using DevExpress.AIIntegration.Blazor.Chat
@using System.Reflection
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json
@using System.Text.Json.Schema
@using System.Text.Json.Serialization
@using Markdig

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService

<ContextHelpTitle Title="Ai Chat (Preview)" HelpTopic="ai-chat.html"></ContextHelpTitle>
<div>
    <b>Caveats:</b>
    <ul>
        <li>AI Chat is a work in progress and may not always provide accurate answers.</li>
        <li>Initialisation is slow</li>
        <li>Responses are very slow</li>
        <li>System may appear to hang when closed. Its not a hang, its just slow.</li>
    </ul>
</div>
<div class="chat-container">
    <DxAIChat CssClass="chat-box" UseStreaming="true" Temperature="0.5f"
    Initialized="Initialized"
    ResponseContentFormat="ResponseContentFormat.Markdown">
        <MessageContentTemplate>
            <div class="my-chat-content">
                @ToHtml(context.Content)
            </div>
        </MessageContentTemplate>
    </DxAIChat>
</div>

<style>
    .chat-container {
    width: 50%;
    margin: auto;
    border: 1px solid #ccc;
    border-radius: 10px;
    }

    .chat-box {
    width: 100%;
    height: 75dvh;
    padding: 10px;
    }
</style>

@code {

    async Task Initialized(IAIChat chat)
    {
        var fileName = $"Class Schedule {Guid.NewGuid().ToString("N")}.json";
        byte[] bytes;
        (string json, string schema) = await GetJsonData();
        bytes = Encoding.UTF8.GetBytes(json);

        string prompt = $@"
        ### Introduction:
        You are a Student Support Representative specialized in analyzing the Class Schedule which is a document in json format.
        Your role is to assist students by providing accurate answers to their questions about the Class Schedule

        ### Tasks:
        - Always provide accurate information based on the file data.
        - Provide the answer in a clear, brief and concise manner.
        - Do not embellish the answer with additional information.
        - Do not provide answers if the data in the file is insufficient for a reliable response.
        - do not attempt to list contacts if none available.
        - organize all lists of people in ascending order based on the json key, SortOrder.

        ### Instructions:
        - Always identify a class by its name, day, time, venue, venue address and term offered.
        - include the day when displaying the time. For example: 'Monday 1:45 pm - 3:00pm'.
        - Leader, teacher, lecturer, and tutor are interchangeable.
        - Clerk, administrator and coordinator are interchangeable.
        - Leaders and Clerks are class contacts. Students are not.
        - Offered, held and open are interchangeable.
        - If Total Active Students >= Maximum Students, then the class is full.
        - A class is closed if the class is full.
        - A class is closed if the class AllowAutoEnroll = false.
        - Always identify whether the class is open or closed giving your reason.

        ### Examples and Scenarios:
        1. ** List Leaders **
            Student: 'Who are the contacts for Aquarobics?'
            Response: 'The contacts for **Aquarobics**, Mondays 1:45 pm are...
                        1. **Fred Bloggs** (leader) **email**: fred@bloggs.com **mobile**: 0404987654'
                        2. **Mary Smith** (clerk) **email**: mary@smith.com.au **mobile**: 0412345678'
        
        2. ** Class Roles **
            Student: 'What are Jason's roles?'
            Response: 'Jason's roles are...

                        1. **Yoga**, (Leader) Tuesdays 10:00 am at the Community Centre'
                        2. **Tai Chi**, (Clerk) Thursdays 2:00 pm at the Community Centre'

        3. ** List Students **
            Student: 'list students in Aquarobics'
            Response: 'In the current term there are 2 students in **Aquarobics**, Mondays 1:45 pm. They are...
                        1. **Fred Bloggs** (leader) **email**: fred@bloggs.com **mobile**: 0404987654'
                        2. **Mary Smith** (clerk) **email**: mary@smith.com.au **mobile**: 0412345678'

        4. ** List Waitlist **
            Student: 'list waitlist in Aquarobics'
            Response: 'In the current term (Term 1) there are 2 waitlisted in **Aquarobics**, Mondays 1:45 pm. They are...
                        1. **Fred Bloggs** (leader) **email**: fred@bloggs.com **mobile**: 0404987654'
                        2. **Mary Smith** (clerk) **email**: mary@smith.com.au **mobile**: 0412345678'

";
        using (var ms = new MemoryStream(bytes))
        {
            await chat.SetupAssistantAsync(new OpenAIAssistantOptions(
                fileName,
                ms,
                prompt)
            );
        }
    }

    MarkupString ToHtml(string text)
    {
        var html = Markdown.ToHtml(ClearAnnotations(text));
        html = ClearParagraphBreakPassOne(html);
        html = ClearParagraphBreakPassTwo(html);
        return (MarkupString)ClearAnnotations(html);
    }

    string ClearParagraphBreakPassOne(string text)
    {
        string pattern = @"<li><p>(.*?)</p>";
        string replacement = @"<br/><li>$1</li>";
        return Regex.Replace(text, pattern, replacement);
    }

    string ClearParagraphBreakPassTwo(string text)
    {
        string pattern = @"<p>(.*?)</p>";
        string replacement = @"$1";
        return Regex.Replace(text, pattern, replacement);
    }

    string ClearAnnotations(string text)
    {
        return Regex.Replace(text, @"【.*?】", "");
    }

    async Task<(string, string)> GetJsonData()
    {
        AIChatClassData data = new();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
            {
                data = await BusinessRule.GetJsonAIChatClassDataAsync(dbc, dbcT, tenantService);
            }
        }

        JsonSerializerOptions options = JsonSerializerOptions.Default;
        string schema = options.GetJsonSchemaAsNode(typeof(AIChatClassData)).ToString();

        var jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                DefaultIgnoreCondition = JsonIgnoreCondition.Never,
            };
        string json = JsonSerializer.Serialize<AIChatClassData>(data, jsonOptions);

        return (json, schema);
    }
}
