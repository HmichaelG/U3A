@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager NavMan
@implements IDisposable

<MessageBox @ref="@messageBox" />
<div class="@cssClass">
    <h3>@Year</h3>
    <DxDropDownButton RenderStyle="ButtonRenderStyle.Primary"
    Text="Change Year"
    ItemClick="@OnYearItemClick"
    IconCssClass="tb-icon tb-icon-paste"
    CssClass="mb-1">
        <Items>
            @{
                var displayYears = years;
                if (displayYears != null)
                {
                    foreach (var y in displayYears)
                    {
                        <DxDropDownButtonItem Text="@y.ToString()"  />
                    }
                }
            }
        </Items>
    </DxDropDownButton>
</div>

@code {
    string cssClass = "card text-center px-2";

    [Parameter, EditorRequired]
    public EventCallback<int> OnYearChangedEvent { get; set; }
    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public string CssClass { get { return CssClass; } set { cssClass = $"{value} {cssClass}".Trim(); } }
    Term currentTerm;
    MessageBox? messageBox;
    U3ADbContext dbc { get; set; }
    List<int> years;



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        dbc = await U3Adbfactory.CreateDbContextAsync();
        currentTerm = await BusinessRule.CurrentTermAsync(dbc);
        years = await dbc.Term
                        .OrderByDescending(x=>x.Year)
                        .Select(x => x.Year)
                        .Distinct()
                        .ToListAsync();
        if (currentTerm != null)
        {
            Year = currentTerm.Year;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await OnYearChangedEvent.InvokeAsync(Year);
        }
    }

    async Task OnYearItemClick(DropDownButtonItemClickEventArgs args)
    {
        if (args != null)
        {
            int value;
            if (int.TryParse( args.ItemInfo.Text, out value)) {
                Year = value;
                await OnYearChangedEvent.InvokeAsync(Year);
            }
        }
    }


    public void Dispose()
    {
        dbc?.Dispose();
    }

}
