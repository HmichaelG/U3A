@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager NavMan
@implements IDisposable

<MessageBox @ref="@messageBox" />
<div class="@cssClass">
    <h3>@Year</h3>
    <DxDropDownButton RenderStyle="ButtonRenderStyle.Primary"
    Text="Change Year"
    ItemClick="@OnYearItemClick"
    IconCssClass="tb-icon tb-icon-paste"
    CssClass="mb-1">
        <Items>
            @{
                var displayYears = years;
                if (displayYears != null)
                {
                    foreach (var y in displayYears)
                    {
                        <DxDropDownButtonItem Text="@y.ToString()"  />
                    }
                }
            }
        </Items>
    </DxDropDownButton>
</div>

@code {
    string cssClass = "card text-center px-2";

    [Parameter, EditorRequired]
    public EventCallback<int> OnYearChangedEvent { get; set; }
    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public string CssClass { get => cssClass; set { if (!string.IsNullOrWhiteSpace(value)) cssClass = $"{value} {cssClass}".Trim(); } }
    Term currentTerm;
    MessageBox? messageBox;
    U3ADbContext dbc { get; set; }
    List<int> years;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            dbc = await U3Adbfactory.CreateDbContextAsync();

            // Load current term and available years. Keep queries simple and efficient.
            currentTerm = await BusinessRule.CurrentTermAsync(dbc);

            // Select distinct years then order in memory by using LINQ operators in the right order for EF translation
            years = await dbc.Term
                            .Select(x => x.Year)
                            .Distinct()
                            .OrderByDescending(y => y)
                            .ToListAsync();

            // Choose sensible default year: current term year, otherwise the newest year from the DB, otherwise current year
            Year = currentTerm?.Year ?? years.FirstOrDefault();
            if (Year == 0) Year = DateTime.Now.Year;

            await OnYearChangedEvent.InvokeAsync(Year);
        }
        catch (Exception ex)
        {
            // Swallowing the exception would hide issues; rethrow so the host can handle/log it.
            // Optionally you can display a friendly message using the MessageBox component if available.
            Console.Error.WriteLine($"YearComponent initialization failed: {ex}");
            throw;
        }
    }

    async Task OnYearItemClick(DropDownButtonItemClickEventArgs args)
    {
        if (args != null)
        {
            if (int.TryParse(args.ItemInfo.Text, out var value))
            {
                Year = value;
                await OnYearChangedEvent.InvokeAsync(Year);
            }
        }
    }


    public void Dispose()
    {
        dbc?.Dispose();
    }

}
