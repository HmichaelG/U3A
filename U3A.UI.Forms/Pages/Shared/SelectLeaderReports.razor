@namespace U3A.UI.Forms

<MessageBox @ref="@messageBox" />
<DxFormLayoutGroup Caption="Select Report" ColSpanMd="12">
    <div class="col @($"col-{ColSpan}")">
        <DxFormLayoutItem Caption="Leader Report" ColSpanMd="12">
            <DxCheckBox @bind-Checked="@PrintLeaderReport" Alignment="CheckBoxContentAlignment.Right" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Class Contact List" ColSpanMd="12">
            <DxCheckBox @bind-Checked="@PrintClassList" Alignment="CheckBoxContentAlignment.Right" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="In Case of Emergency List" ColSpanMd="12">
            <DxCheckBox @bind-Checked="@PrintICEList" Alignment="CheckBoxContentAlignment.Right" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Attendance Record" ColSpanMd="12">
            <DxCheckBox @bind-Checked="@PrintAttendanceRecord" Alignment="CheckBoxContentAlignment.Right" />
        </DxFormLayoutItem>
    </div>
    <div class="col @($"col-{ColSpan}")">
        <DxFormLayoutItem Caption="Attendance Analysis" ColSpanMd="12">
            <DxCheckBox @bind-Checked="@PrintAttendanceAnalysis" Alignment="CheckBoxContentAlignment.Right" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Member Badges" ColSpanMd="12">
            <DxCheckBox @bind-Checked="@PrintMemberBadges" Alignment="CheckBoxContentAlignment.Right" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Class CSV file" ColSpanMd="12">
            <DxCheckBox @bind-Checked="@PrintCSVFile" Alignment="CheckBoxContentAlignment.Right" />
        </DxFormLayoutItem>
    </div>
</DxFormLayoutGroup>
@if (AllowPrintAndEmail)
{
    <DxButton Text="Print Report" IconCssClass="bi bi-printer menu-icon" CssClass="col col-12 mb-1"
              Enabled="@AreSelectionsMade"
              RenderStyle="ButtonRenderStyle.Primary" Click="@DoPrintAsync" />
}
<DxButton Text="Queue Report(s) for email" IconCssClass="bi bi-envelope menu-icon" CssClass="col col-12"
          Enabled="@AreSelectionsMade"
          RenderStyle="ButtonRenderStyle.Primary" Click="@DoMailAsync" />


@code {
    [Parameter]
    public EventCallback QueueSelectedReports { get; set; }
    [Parameter]
    public EventCallback PrintSelectedReports { get; set; }
    [Parameter]
    public bool AllowPrintAndEmail { get; set; }
    [Parameter]
    public int ColSpan { get; set; } = 12;

    [Parameter, EditorRequired]
    public bool AreSelectionsMade { get; set; }

    public bool PrintLeaderReport { get; set; }
    public bool PrintClassList { get; set; }
    public bool PrintICEList { get; set; }
    public bool PrintAttendanceRecord { get; set; }
    public bool PrintAttendanceAnalysis { get; set; }
    public bool PrintMemberBadges { get; set; }
    public bool PrintCSVFile { get; set; }
    public bool RequireEnrolements
    {
        get
        {
            return PrintAttendanceRecord || PrintICEList || PrintClassList || PrintLeaderReport || PrintMemberBadges || PrintCSVFile;
        }
    }
    MessageBox? messageBox;

    static List<string> reports = new() { "Leader Report",
                                            "Class Contact List",
                                            "In Case of Emergency List",
                                            "Attendance Record",
                                            "Attendance Analysis",
                                            "Member Badges"};
    string selectedReport;

    async void DoMailAsync()
    {
        if (!SetupReports()) return;
        InvokeAsync(StateHasChanged); await QueueSelectedReports.InvokeAsync();
    }
    async void DoPrintAsync()
    {
        if (!SetupReports()) return;
        InvokeAsync(StateHasChanged); await PrintSelectedReports.InvokeAsync();
    }

    bool SetupReports()
    {
        if (!PrintLeaderReport &&
             !PrintClassList &&
             !PrintICEList &&
             !PrintAttendanceRecord &&
             !PrintAttendanceAnalysis && 
             !PrintMemberBadges &&
             !PrintCSVFile)
        {
            messageBox.ShowOkOnlyAsync("Select Report", "A report must be selected.");
            return false;
        }
        return true;
    }
}
