@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IJSRuntime js
@inject WorkstationService ws


@if (IsReady)
{
    <MessageBox @ref="@messageBox" PopupWidth="min(45rem, 100%)">
        <TextTemplate>
                <div class="card card-body" style="max-height: 50dvh; overflow-y:scroll;">
                @(new MarkupString((ws.Theme == "light") ? selectedCourse.DisplayDescription : selectedCourse.DisplayDescriptionDarkMode))
            </div>
        </TextTemplate>
    </MessageBox>


    <DxFormLayout CssClass="w-100 d-flex flex-column justify-content-center" style="background-color=red;;">
        <DxFormLayoutGroup>
            <HeaderContentTemplate>
                <div class="input-group fs-6">
                    <a class="link" onclick="@OnToggleButtonClick">@toggleButtonText</a>
                </div>
            </HeaderContentTemplate>
            <Items>
                <div class="w-100 pt-1 d-flex justify-content-center">
                    <DxCalendar @bind-SelectedDate=@selectedDate CssClass="@CalendarCssClass"
                                @bind-SelectedDate:after=OnDateChanged
                                ShowClearButton=false
                                VisibleDate="@today"
                                MinDate="@today">
                        <DayCellTemplate>
                            <div class="@GetCssClassNames(context)">@context.Day.ToString()</div>
                        </DayCellTemplate>
                    </DxCalendar>
                </div>

                <DxGrid Data="@FilteredEvents" id="listBox" @ref=@grid
                        KeyFieldName="Id"
                        ShowAllRows=true
                        VirtualScrollingEnabled=true
                        AllowSelectRowByClick=false
                        AutoExpandAllGroupRows=true
                        AllowGroup=false
                        AllowSort=false
                        PagerVisible=false
                        RowClick="@OnRowClick"
                        CssClass="mt-1 box-style">
                    <Columns>
                        <DxGridDataColumn Width="100%"
                                          FieldName="Start"
                                          GroupIndex="0" GroupInterval="GridColumnGroupInterval.Date">
                            <GroupRowTemplate>
                                @{
                                    <div class="pt-2">
                                        <div class="h6 text-fl-info">@(((DateTime)context.GroupValue).ToString(constants.FULL_DAY_DATE_FORMAT))</div>
                                    </div>
                                }
                            </GroupRowTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn Width="100%">
                            <HeaderCaptionTemplate />
                            <CellDisplayTemplate>
                                @{
                                    var e = (DxSchedulerAppointmentItem)context.DataItem;
                                    if (e.AllDay)
                                    {
                                        <div class="font-weight-bold">@e.Subject</div>
                                    }
                                    else
                                    {
                                        if ((int)e.LabelId == 9)    // Cancelled
                                        {
                                            <div class="text-muted text-decoration-line-through">@e.Subject</div>
                                        }
                                        else
                                        {
                                            <div class="font-weight-bold">@e.Subject</div>
                                            <div>@e.Start.ToString(constants.SHORT_DAY_AND_TIME_FORMAT) to @e.End.ToShortTimeString()</div>
                                            <div>@e.Location</div>
                                        }
                                    }
                                }
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                    </Columns>
                </DxGrid>
            </Items>
        </DxFormLayoutGroup>
        <div class="row col col-12 col-md-7 mx-auto mt-2">
            <DxButton Text="Return to menu" id="exitButton" Visible="@IsPortal"
                      IconCssClass="menu-icon bi-door-closed me-1"
                      CssClass="col-12 col-lg-8 mb-1 mx-auto"
                      Click="@(e => ReturnToMenu(PortalMenuResult.MenuOptionCompleted))"
                      RenderStyle="ButtonRenderStyle.Primary"
                      RenderStyleMode="ButtonRenderStyleMode.Outline">
            </DxButton>
        </div>
    </DxFormLayout>
}
<style>
    a:hover {
        cursor: pointer;
    }

    .box-style {
        height: calc(100dvh - @($"{DisplayOffset - hiddenCalendarOffset + 21}rem") );
    }

    .font-weight-bold {
        font-weight: 800;
    }

</style>

@code {
    const double HIDDEN_CALENDAR_OFFSET = 16.65;
    const double PORTAL_HIDDEN_CALENDAR_OFFSET = 16.65;

    [Parameter]
    public double DisplayOffset { get; set; } = default;
    [Parameter]
    public bool IsPortal {get; set;}
    [Parameter]
    public EventCallback<PortalMenuResult> OnSelectedOptionCompleted { get; set; }

    private List<Term> terms { get; set; }
    private Term? selectedTerm { get; set; }
    IEnumerable<DxSchedulerAppointmentItem> Events;
    IEnumerable<DxSchedulerAppointmentItem> FilteredEvents;
    DateTime today;
    DateTime selectedDate;
    Course selectedCourse;
    Class selectedClass;
    bool IsReady;
    IGrid grid;

    DxButton? toggleButton;
    string toggleButtonText = "Show Calendar";
    bool isCalendarVisible = false;
    string CalendarCssClass = "d-none";
    double hiddenCalendarOffset = HIDDEN_CALENDAR_OFFSET;
    MessageBox messageBox { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            today = selectedDate = dbc.GetLocalTime().Date;
            terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
            selectedTerm = await BusinessRule.CurrentTermAsync(dbc);
            if (selectedTerm != null)
            {
                var dataStorage = await BusinessRule.GetCalendarDataStorageAsync(dbc, selectedTerm);
                var range = new DxSchedulerDateTimeRange(DateTime.Today, new DateTime(selectedTerm.Year, 12, 31));
                FilteredEvents = Events = dataStorage.GetAppointments(range);
            }
        }
        isCalendarVisible = !isCalendarVisible;
        OnToggleButtonClick();
        IsReady = true;
    }

    void OnToggleButtonClick()
    {
        isCalendarVisible = !isCalendarVisible;
        if (isCalendarVisible)
        {
            toggleButtonText = "Hide Calendar";
            CalendarCssClass = "w-100";
            hiddenCalendarOffset = 0;
            if (IsPortal) { hiddenCalendarOffset -= 5; }
        }
        else
        {
            toggleButtonText = "Show Calendar";
            CalendarCssClass = "d-none";
            hiddenCalendarOffset = HIDDEN_CALENDAR_OFFSET;
            if (IsPortal) { hiddenCalendarOffset = 12; }
        }
        grid?.MakeRowVisible(0);
    }

    void OnDateChanged()
    {
        FilteredEvents = Events
                            .Where(x => x.Start >= selectedDate)
                            .OrderBy(x => x.Start).ThenBy(x => x.Subject);
        grid?.MakeRowVisible(0);
    }

    string GetCssClassNames(DateTime date)
    {
        string result = "text-body";
        if (Events is not null && Events.Any(d => DaysEqual(d.Start, date)))
            result = "font-weight-bold text-fl-info";
        else
        {
            result = "text-fl-body";
        }
        return result;
    }

    bool DaysEqual(DateTime date1, DateTime date2)
    {
        return (date1.Year == date2.Year && date1.DayOfYear == date2.DayOfYear);
    }

    async Task OnRowClick(GridRowClickEventArgs args)
    {
        var row = args.Grid.GetDataItem(args.VisibleIndex) as DxSchedulerAppointmentItem;
        selectedClass = row.CustomFields["Source"] as Class;
        if (selectedClass == null)
            return;
        selectedCourse = selectedClass.Course;
        await messageBox.ShowOkOnlyAsync(selectedCourse.Name, string.Empty);
    }

    async Task ReturnToMenu(PortalMenuResult result)
    {
        await OnSelectedOptionCompleted.InvokeAsync(result);
    }

}
