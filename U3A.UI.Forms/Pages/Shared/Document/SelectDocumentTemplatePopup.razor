@namespace U3A.UI.Forms
@using U3A.Model
@using DevExpress.Drawing.Printing
@using U3A.UI.Reports.Pages

@inject TenantInfoService tenantService

<AttachFile @ref=@attachFile Attachments="@attachments" />
<MessageBox @ref="messageBox" />

<Progress @ref=@progressBar />

<DxPopup Visible="@popupVisible" @ref="@popup" Width="100vw" CssClass="editor-popup"
         PositionY="0"
         PositionX="0"
         CloseButtonClick="@NegativeButtonClicked"
         CloseOnEscape="false"
         CloseOnOutsideClick="false"
         AllowDrag=true
         HeaderText="Communicate">
    <HeaderContentTemplate>
        <DxButton Click="@OnCollapseClick"
                  tooltip="Click to display full screen"
                  CssClass="toggle-button"
                  IconCssClass="bi bi-arrow-left-circle"
                  RenderStyle="ButtonRenderStyle.Secondary" />
        <div class="h6">Communicate</div>
    </HeaderContentTemplate>
    <BodyContentTemplate Context="PopupContext">
        <DxFormLayout>
            <div class="row vw-100 m-1">
                <div class="col col-5 show-hide">
                    <ContextHelpTitle Title="Communicate" TitleCssClass="h6 d-flex align-items-center" HelpTopic="Communicate.html" />
                    <div class="alert alert-warning text-dark text-center warning-style" >
                        The mail system is currently disabled or in sandbox mode.<br/>
                        Your email will be routed through Postmark's servers but your members wil not receive it.<br/>
                        Please use sparingly, all email delivered or not incurs usage cost.
                    </div>
                    <DxFormLayoutGroup Caption="Parameters">
                        <DxFormLayoutItem Caption="Document Templates" ColSpanMd="12">
                            <DxComboBox Data="@DocumentTemplates" NullText="Select the document template..."
                                        Value="@SelectedDocumentTemplate"
                                        ValueChanged="@((DocumentTemplate template) => SelectedTemplateChanged(template))"
                                        EditFormat="{0}">
                                <DxListEditorColumn FieldName="@nameof(DocumentTemplate.Name)"
                                                    Caption="Template" Width="15rem" />
                                <DxListEditorColumn FieldName="@nameof(DocumentTemplate.DocumentTypeName)"
                                                    Caption="Type" Width="15rem" />
                                <DxListEditorColumn FieldName="@nameof(DocumentTemplate.Subject)" />
                            </DxComboBox>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Email Subject" ColSpanMd="12" Visible="@IsEmail">
                            <DxTextBox @bind-Text="@SelectedDocumentTemplate.Subject"
                                       NullText="Enter a Subject" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="From Address" ColSpanMd="12" Visible="@IsEmail">
                            <DxComboBox Data="@emailAddresses" AllowUserInput="true"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        NullText="Enter the email address to send from..."
                                        TData="string"
                                        TValue="string"
                                        Text="@SelectedDocumentTemplate.FromEmailAddress"
                                        TextExpression="@(() => SelectedDocumentTemplate.FromEmailAddress)"
                                        TextChanged="@((string emailAddress) => SelectedEmailAddressChanged(emailAddress))" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="@FromDisplayNameText" ColSpanMd="12" Visible="@IsEmailOrSMS">
                            <DxComboBox Data="@displayNames" AllowUserInput="true"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        NullText="Enter a friendly name to send from..."
                                        TData="string"
                                        TValue="string"
                                        @bind-Text="@SelectedDocumentTemplate.FromDisplayName" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Attachments" ColSpanMd="10" Visible="@IsEmail">
                            <DxTagBox Data="@attachments" DropDownVisible=false
                                      ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                      NullText="Upload attachments, if required."
                                      TData="String"
                                      TValue="String"
                                      Values="@SelectedDocumentTemplate.Attachments"
                                      ValuesChanged="OnAttachedItemsChanged" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="2" Visible="@IsEmail">
                            <DxButton Text="Pdf"
                                      Click="OnAttachFile"
                                      IconCssClass="bi bi-upload" />
                        </DxFormLayoutItem>
                        <DxFormLayout CssClass="m-2">
                            <DxFormLayoutItem Caption="Override Communication Preference?"
                                              ColSpanMd="12">
                                <DxCheckBox @bind-Checked="@OverrideCommunicationPreference" />
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </DxFormLayoutGroup>
                    <div class="d-flex mx-2 mt-5">
                        <DxButton CssClass="flex-grow-1 mx-1" Enabled="IsEmailOrSMS"
                                  RenderStyle="ButtonRenderStyle.Primary"
                                  Text="Process Email"
                                  IconCssClass="bi bi-envelope"
                                  Click="@AffirmativeButtonClicked" />
                        <DxButton CssClass="flex-grow-1 mx-1"
                                  RenderStyle="ButtonRenderStyle.Secondary"
                                  Text="Cancel" Click="@NegativeButtonClicked" />
                    </div>
                </div>

                <div class="@($"{editorDiv}")">
                    @if (pdfVisible)
                    {
                        <div class="preview">
                            <PdfViewer DocumentContent="@pdfContent" OnCloseButtonClick="@(() => pdfVisible = false)" />
                        </div>
                    }
                    else
                    {
                        <div class="text-danger text-center col-12"><strong>Warning:</strong> If you copy/paste document text all merge codes will be lost and must be recreated.</div>
                        <div class="rtf-content">
                            <DxRichEdit @ref="@richEdit" ReadOnly="@(!IsEmailOrSMS && !IsEmailOrPostal)"
                                        ViewType="ViewType.PrintLayout"
                                        ActiveRibbonTabIndex="@ActiveTabIndex"
                                        CheckSpelling=true
                                        BarMode=BarMode.Ribbon
                                        DocumentContent="@SelectedDocumentTemplate.Content"
                                        DocumentFormat="DocumentFormat.Rtf"
                                        CustomizeRibbon="OnCustomizeRichEditToolbar"
                                        DocumentLoaded="OnDocumentLoaded"
                                        DocumentContentChanged="OnDocumentContentChanged"
                                        CssClass="w-100 rtf-style">
                                <MailMergeSettings>
                                    <DxMailMergeSettings Data="@ExportData" />
                                </MailMergeSettings>
                            </DxRichEdit>
                        </div>
                    }
                </div>
            </div>
        </DxFormLayout>
    </BodyContentTemplate>
</DxPopup>

<style>
    .editor-popup {
        height: 100vh !important;
    }

    .preview {
        height: calc(100dvh - 3.5rem) !important;
        overflow: hidden;
    }

    .rtf-style {
        height: calc(100dvh - 5rem) !important;
        overflow: hidden;
    }


    .icon-size {
        font-size: 16px;
    }

    .show-hide {
        display: @showHideText;
    }

    .warning-style {
        display: @((isEmailEnabled) ? "block" : "none");
    }

</style>

@code {

    [Parameter, EditorRequired]
    public U3ADbContext dbContext { get; set; }
    [Parameter, EditorRequired]
    public List<DocumentTemplate> DocumentTemplates { get; set; }
    [Parameter, EditorRequired]
    public List<Person> SendTo { get; set; }
    [Parameter]
    public DocumentTemplate SelectedDocumentTemplate { get; set; }
    [Parameter]
    public bool OverrideCommunicationPreference { get; set; }

    List<ExportData>? ExportData;
    MessageBox? messageBox;

    int ActiveTabIndex = 1;
    bool pdfVisible;
    bool popupVisible;
    DxPopup? popup;
    DxRichEdit? richEdit;
    DxRichEdit? rePreview;
    Document documentAPI;
    bool IsEmail;
    bool IsEmailOrPostal;
    bool IsEmailOrSMS;
    bool allowOk = false;
    string OkButtonText = "Ok";
    string FromDisplayNameText;
    IEnumerable<string?> emailAddresses = new List<string>();
    IEnumerable<string?> displayNames = new List<string>();
    List<string?> attachments = new List<string>();
    AttachFile attachFile;
    byte[] pdfContent;
    string showHideText = "inline";
    string editorDiv = "col col-7";
    Progress? progressBar;
    bool isEmailEnabled;

    TaskCompletionSource<bool>? tcs;

    protected override async Task OnInitializedAsync()
    {
        var tInfo = await tenantService.GetTenantInfoAsync();
        isEmailEnabled = tInfo.UsePostmarkTestEnviroment;
        base.OnInitializedAsync();
    }

    public Task<bool> ShowAsync()
    {
        allowOk = false;
        IsEmailOrPostal = false;
        IsEmailOrSMS = false;
        IsEmail = false;
        ActiveTabIndex = 1;
        pdfVisible = false;
        SelectedDocumentTemplate = new DocumentTemplate();
        emailAddresses = DocumentTemplates
                            .OrderBy(x => x.FromEmailAddress)
                            .Where(x => x.FromEmailAddress != null)
                            .Select(x => x.FromEmailAddress.ToLower()).Distinct().ToList();
        popupVisible = true;
        tcs = new TaskCompletionSource<bool>();
        tcs.Task.ContinueWith(_ =>
        {
            popupVisible = false;
        });
        StateHasChanged();
        return tcs.Task;
    }

    void OnCollapseClick()
    {
        showHideText = (showHideText == "inline") ? "none" : "inline";
        editorDiv = (showHideText == "inline") ? "col col-7" : "col col-12";
    }

    void OnAttachedItemsChanged(IEnumerable<string> items)
    {
        SelectedDocumentTemplate.Attachments = items.ToList();
        attachments = items.ToList();
    }

    async Task OnAttachFile()
    {
        await attachFile.ShowAsync();
        SelectedDocumentTemplate.Attachments = attachments;
    }

    async Task AffirmativeButtonClicked()
    {
        if (!await IsDataOK()) { return; }
        await richEdit.SaveDocumentAsync();
        popupVisible = false;
        if (SelectedDocumentTemplate == null ||
                    SelectedDocumentTemplate.DocumentType == null ||
                    SelectedDocumentTemplate.DocumentType.IsPostal)
        {
            tcs?.SetResult(false);
        }
        else
        {
            tcs?.SetResult(true);
        }
    }
    void NegativeButtonClicked()
    {
        popupVisible = false;
        tcs?.SetResult(false);
    }

    async Task<bool> IsDataOK()
    {
        bool result = true;
        if (SelectedDocumentTemplate.DocumentType.Name == "Email")
        {
            var settings = await dbContext.SystemSettings.FirstOrDefaultAsync();
            string[]? defaultSplits = settings?.SendEmailAddesss.ToLower().Trim().Split("@");
            string[]? fromSplits = SelectedDocumentTemplate.FromEmailAddress?.ToLower().Trim().Split("@");
            if (fromSplits?.Count() > 0 && defaultSplits?.Count() > 0)
            {
                if (fromSplits[1] != defaultSplits[1] && fromSplits[1] != constants.SYSTEM_DOMAIN)
                {
                    _ = await messageBox.ShowOkOnlyAsync("Invalid Domain", $"Your From Email address must end: @{defaultSplits[1]}.");
                    result = false;
                }
            }
            var msg = string.Empty;
            if (string.IsNullOrWhiteSpace(SelectedDocumentTemplate.Subject))
            {
                msg += "<div class='text-center' style='color: red'>*** Subject is required ***<br/></div>";
            }
            if (string.IsNullOrWhiteSpace(SelectedDocumentTemplate.FromEmailAddress))
            {
                msg += "<div class='text-center' style='color: red'>*** From Email Address is required ***<br/></div>";
            }
            if (string.IsNullOrWhiteSpace(SelectedDocumentTemplate.FromDisplayName))
            {
                msg += "<div class='text-center' style='color: red'>*** From Display Name is required ***<br/></div>";
            }
            await richEdit.SaveDocumentAsync();
            if (DocumentServer.HasMergeCodesAndAttachments(SelectedDocumentTemplate))
            {
                msg += @"<div class='text-center' style='color: red'>*** An email may not contain both merge codes and attachments ***<br/>
                                Choose one or the other.</div>";
            }
            if (msg != string.Empty)
            {
                _ = await messageBox.ShowOkOnlyAsync("Input required", msg);
                result = false;
            }
        }
        if (result)
        {
            result = await messageBox.ShowAsync("Porcess Documents", "Are you sure you are ready to process this communication to the selected members?");
        }
        return result;
    }

    async Task SelectedTemplateChanged(DocumentTemplate template)
    {
        if (template is null) { return; }
        SelectedDocumentTemplate = template;
        IsEmail = SelectedDocumentTemplate.DocumentType.IsEmail;
        IsEmailOrPostal = SelectedDocumentTemplate.DocumentType.IsEmail ||
                                SelectedDocumentTemplate.DocumentType.IsPostal;
        IsEmailOrSMS = SelectedDocumentTemplate.DocumentType.IsEmail ||
                                SelectedDocumentTemplate.DocumentType.IsSMS;
        ExportData = await BusinessRule.GetExportDataAsync(dbContext, SendTo);
        ActiveTabIndex = 0;
        switch (template.DocumentType.Name)
        {
            case "Postal":
                OkButtonText = "Ok";
                break;
            case "Email":
                FromDisplayNameText = "From Display Name";
                OkButtonText = "Send Email!";
                break;
            case "SMS":
                FromDisplayNameText = "From (11 Chars Max)";
                OkButtonText = "Send SMS!";
                break;
            default:
                break;
        }
        allowOk = true;
        SelectedEmailAddressChanged(SelectedDocumentTemplate.FromEmailAddress);
        StateHasChanged();
    }

    void SelectedDocTypeChanged(DocumentType DocType, DocumentTemplate editItem)
    {
        editItem.DocumentType = DocType;
        SelectedEmailAddressChanged(editItem.FromEmailAddress);
    }

    void SelectedEmailAddressChanged(string emailAddress)
    {
        switch (SelectedDocumentTemplate.DocumentType.Name)
        {
            case "Email":
                SelectedDocumentTemplate.FromEmailAddress = emailAddress;
                displayNames = DocumentTemplates
                                    .OrderBy(x => x.FromDisplayName)
                                    .Where(x => x.FromEmailAddress?.ToLower() == emailAddress)
                                    .Select(x => x.FromDisplayName).Distinct().ToList();
                SelectedDocumentTemplate.FromDisplayName = displayNames.FirstOrDefault();
                break;
            case "SMS":
                displayNames = DocumentTemplates
                                    .OrderBy(x => x.FromDisplayName)
                                    .Where(x => x.DocumentType.Name == "SMS")
                                    .Select(x => x.FromDisplayName).Distinct().ToList();
                SelectedDocumentTemplate.FromDisplayName = displayNames.FirstOrDefault();
                break;
            default:
                break;
        }
    }

    void OnDocumentContentChanged()
    {
        SelectedDocumentTemplate.Content = richEdit.DocumentContent;
    }

    async Task OnDocumentLoaded(Document doc)
    {
        await richEdit.DocumentAPI.Fields.ShowAllFieldCodesAsync(true);
        try
        {
            documentAPI = richEdit.DocumentAPI;
            var sections = await documentAPI.Sections.GetAllAsync();
            foreach (Section s in sections)
                await s.ChangePropertiesAsync(properties =>
                {
                    if (properties.PaperKind == DXPaperKind.Letter)
                        properties.PaperKind = DXPaperKind.A4;
                });
        }
        catch (OperationCanceledException e)
        {
            Console.WriteLine($"{nameof(OperationCanceledException)} thrown with message: {e.Message}");
        }
    }

    void OnCustomizeRichEditToolbar(IRibbon ribbon)
    {
        ribbon.Tabs.Clear();
        IRibbonTab newFileTab = ribbon.Tabs.AddCustomTab("File");
        IBarGroup newFileGroup = newFileTab.Groups.AddCustomGroup(0);
        IBarButton mm = newFileGroup.Items.AddCustomButton("Mail Merge", MailMergeDocumentAsync);
        newFileGroup.Items.Add("FullScreen");
        mm.IconCssClass = "icon-size bi-envelope";
        ribbon.Tabs.Add("Home");
        ribbon.Tabs.Add("Insert");
        ribbon.Tabs.Add("View");
        ribbon.Tabs.Add("MailMerge");
    }

    async Task MailMergeDocumentAsync()
    {
        if (SelectedDocumentTemplate != null)
        {
            pdfVisible = true;
            await richEdit.SaveDocumentAsync();
            if (SelectedDocumentTemplate.Content != null)
            {
                await progressBar.ShowSmallSpinnerAsync();
                var server = new DocumentServer(dbContext);
                pdfContent = server.MergeDocumentAsPdf(SelectedDocumentTemplate,
                                                            ExportData, OverrideCommunicationPreference);
                await progressBar.Close();
            }
            else
            {
                pdfVisible = false;
            }
            StateHasChanged();
        }
    }

    void OnReturnToTemplate()
    {
        pdfVisible = false;
        StateHasChanged();
    }
}