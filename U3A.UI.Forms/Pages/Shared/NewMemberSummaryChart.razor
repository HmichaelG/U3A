@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IJSRuntime js
@inject WorkstationService ws

<Progress @ref=@progress />
@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <DxFormLayout>
        <DxToolbar>
            <DxToolbarItem Text="Export" RenderStyle="ButtonRenderStyle.Primary"
                           Alignment="ToolbarItemAlignment.Right" CssClass="me-1"
                           Click=@(async () => await chart?.ExportAsync(@title,ChartExportFormat.Png))
                           IconCssClass="bi bi-filetype-png" />
        </DxToolbar>
        <DxSplitter CssClass="border controlHeight" Width="100%">
            <Panes>
                <DxSplitterPane Size="75%">
                    <DxChart Data="memberData" Id="newMemberChart" @ref=@chart
                             Width="100%" CssClass="controlHeight"
                             LabelOverlap="ChartLabelOverlap.Hide">
                        <DxChartTitle Text=@title />
                        <DxChartStackedBarSeries Name="Male"
                                                 Stack="true"
                                                 Color="System.Drawing.Color.Blue"
                                                 T="MemberSummary"
                                                 TArgument="DateTime"
                                                 TValue="int"
                                                 ArgumentField="x => new DateTime(x.Year, x.Month, 1)"
                                                 ValueField="x => x.Count"
                                                 Filter='x => x.Group.ToLower() == "male"'>
                        </DxChartStackedBarSeries>
                        <DxChartStackedBarSeries Name="Female"
                                                 Stack="true"
                                                 Color=System.Drawing.Color.HotPink
                                                 T="MemberSummary"
                                                 TArgument="DateTime"
                                                 TValue="int"
                                                 ArgumentField="x => new DateTime(x.Year, x.Month, 1)"
                                                 ValueField="x => x.Count"
                                                 Filter='x => x.Group.ToLower() == "female"'>
                        </DxChartStackedBarSeries>
                        <DxChartStackedBarSeries Name="Other"
                                                 Stack="true"
                                                 Color=System.Drawing.Color.Purple
                                                 T="MemberSummary"
                                                 TArgument="DateTime"
                                                 TValue="int"
                                                 ArgumentField="x => new DateTime(x.Year, x.Month, 1)"
                                                 ValueField="x => x.Count"
                                                 Filter='x => x.Group.ToLower() == "other"'>
                        </DxChartStackedBarSeries>
                        <DxChartLegend Position="RelativePosition.Outside"
                                       HorizontalAlignment="HorizontalAlignment.Right" />
                        <DxChartTooltip Enabled="true">
                            @context.Point.Render((seriesPoint) =>
                            @<div style="margin: 0.75rem">
                            <div>@seriesPoint.SeriesName</div>
                            <span>@($"{seriesPoint.Argument: MMM yyyy}: ")</span>
                            <span>@($"{seriesPoint.Value: 0,0}")</span>
                        </div>
                                                )
                    </DxChartTooltip>
                    <DxChartValueAxis AutoBreaksEnabled="true" MaxAutoBreakCount="@chartBreaks" />
                    <DxChartArgumentAxis TickInterval="ChartAxisInterval.Month" MinorTickInterval="ChartAxisInterval.Month">
                        <DxChartAxisLabel Format="ChartElementFormat.MonthAndYear"></DxChartAxisLabel>
                    </DxChartArgumentAxis>
                </DxChart>
            </DxSplitterPane>
            <DxSplitterPane>
                <div class="h6">New Member Details</div>
                <DxGrid Data="@(memberData?.Where(x => x.Count != 0))" CssClass="gridHeight"
                        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                        AutoExpandAllGroupRows="true"
                        ShowFilterRow="false"
                        ShowAllRows="true">
                    <Columns>
                        <DxGridDataColumn Caption="Gender" FieldName="Group" GroupIndex="0" />
                        <DxGridDataColumn Caption="Year" FieldName="Year" GroupIndex="1" DisplayFormat="{0:D4}" />
                        <DxGridDataColumn Caption="Month" FieldName="MonthName" />
                        <DxGridDataColumn Caption="Members" FieldName="Count" DisplayFormat="{0:n0}" />
                    </Columns>
                    <GroupSummary>
                        <DxGridSummaryItem FooterColumnName="Count"
                                           SummaryType="GridSummaryItemType.Sum" FieldName="Count" ValueDisplayFormat="{0:n0}" />
                    </GroupSummary>
                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Count" />
                    </TotalSummary>
                </DxGrid>
            </DxSplitterPane>
        </Panes>
    </DxSplitter>
</DxFormLayout>
}

<style>
    .controlHeight {
        height: calc(100dvh - @(ws.UseTopMenu ? "14rem" : "10rem") );
    }

    .gridHeight {
        height: calc(100dvh - @(ws.UseTopMenu ? "16.25rem" : "12.25rem") );
    }
</style>


@code {
    IEnumerable<MemberSummary> memberData;
    Progress? progress;
    int chartBreaks = 0;
    DxChart chart;
    string title = "New Member Summary";
    bool IsReady = false;

    protected override async Task OnInitializedAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            memberData = await BusinessRule.GetNewMemberSummaryByMonth(dbc);
        }
        IsReady = true;
    }

}