@using DevExpress.Drawing
@using DevExpress.Drawing.Printing
@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<DxFormLayoutGroup Caption="@($"Enrolment History for: {SelectedPerson?.FullName}")" HeaderCssClass="h4">
    <div class="h-25 overflow-auto">
        <DxGrid id="my-grid" Data="@enrolments" @ref="@dxGrid"
                TextWrapEnabled=false
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                AllowSorting=false
                AllowFiltering=false
                AllowResize="true"
                AllowGrouping=true
                AutoExpandAllGroupRows=true
                VirtualScrollingEnabled=true
                CssClass="@CssClass">
            <Columns>
                <DxGridDataColumn FieldName="Term" Caption="Term" GroupIndex="0" />
                <DxGridDataColumn FieldName="IsWaitlisted" Caption="Waitlist?" Width="3rem" />
                <DxGridDataColumn FieldName="Course" Caption="Course" Width="40%" />
                <DxGridDataColumn FieldName="Class" Caption="Class" />
                <DxGridDataColumn FieldName="DateEnrolled" Caption="Enrolled" Width="5rem" />
            </Columns>
            <GroupSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom"
                                   DisplayText="Term Sub-Total"
                                   FooterColumnName="Course" />
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                   DisplayText="{0:c2}"
                                   FooterColumnName="Class" />
            </GroupSummary>
            <TotalSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="Total" FieldName="Course" />
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" DisplayText="{0:c2}" FieldName="Class" />
            </TotalSummary>
        </DxGrid>
    </div>

</DxFormLayoutGroup>

@code {



    [Parameter]
    public Term SelectedTerm { get; set; }

    [Parameter]
    public Person SelectedPerson { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    List<StudentClassSummary> enrolments = new();
    DxGrid? dxGrid;

    string reportTitle;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedPerson != null && SelectedTerm != null)
        {
            using (var dbc = U3Adbfactory.CreateDbContext())
            {
                enrolments = await BusinessRule.GetAllEnrolmentsForStudent(dbc, SelectedTerm, SelectedPerson);
            }
        }
    }

    public async Task Print()
    {
        reportTitle = $"Enrolment History: {SelectedPerson.FullName}";
        await dxGrid.ExportToPdfAsync(reportTitle,
            new GridPdfExportOptions()
            {
                FitToPage = true,
                CustomizeDocument = OnCustomizeDocument,
                CustomizeCell = OnCustomizeCell,
                CustomizeDocumentHeader = OnCustomizeDocumentHeader, // Adds a document header
                CustomizePageFooter = OnCustomizePageFooter, // Adds page footers            });
            });
    }

    void OnCustomizeDocumentHeader(GridDocumentExportCustomizeDocumentHeaderFooterEventArgs args)
    {
        args.ElementStyle.Font = new DXFont("Arial", 16);
        args.ElementStyle.ForeColor = System.Drawing.Color.RoyalBlue;
        args.Text = reportTitle;
    }

    void OnCustomizeDocument(GridDocumentExportCustomizeDocumentEventArgs args)
    {
        args.PaperKind = DXPaperKind.A4;
        args.Margins = new DXMargins(50, 50, 50, 50);
    }

    void OnCustomizeCell(GridDocumentExportCustomizeCellEventArgs args)
    {
        if (args.AreaType == DocumentExportAreaType.DataArea && args.Value is bool)
        {
            var val = (bool)args.Value;
            args.Text = (val) ? "Yes" : "No";
            args.Handled = true;
        }
    }
    void OnCustomizePageFooter(GridDocumentExportCustomizePageHeaderFooterEventArgs args)
    {
        args.Text = "Page {0} of {1}";
    }

}
