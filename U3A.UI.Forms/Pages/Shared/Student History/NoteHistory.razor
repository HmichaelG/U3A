@using DevExpress.Drawing
@using DevExpress.Drawing.Printing
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject LocalTime lt

@if (!isReady)
{
	<LoadingIndicator />
}
else
{
	<DxFormLayoutGroup Caption="@($"Notes for: {SelectedPerson?.FullName}")" HeaderCssClass="h4">
		<div class="h-75 overflow-auto">
			<DxGrid id="do-not-print" Data="@notes" @ref="@dxGrid" CssClass="grid-style"
					ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
					TextWrapEnabled="true"
					ShowFilterRow="false"
					ShowAllRows="true"
					KeyFieldName="Id"
					ValidationEnabled="true"
					PopupEditFormHeaderText="Add/Edit Note"
					CustomizeEditModel="Grid_CustomizeEditModel"
					EditMode="GridEditMode.PopupEditForm"
					EditModelSaving="Grid_EditModelSaving"
					DataItemDeleting="Grid_DataItemDeleting">
				<Columns>
					<DxGridCommandColumnEx Width="1rem"
										   NewButtonVisible=true
										   DeleteButtonVisible=true
										   EditButtonVisible=true />
					<DxGridDataColumn FieldName="@nameof(Note.CreatedOn)" Caption="Date" Width="5rem" />
					<DxGridDataColumn FieldName="@nameof(Note.Content)" Caption="Note" Width="24rem">
						<CellDisplayTemplate Context="cellContext">
							<DxMemo Text="@((string)cellContext.Value)" ReadOnly="true" Rows="4"  />
						</CellDisplayTemplate>
					</DxGridDataColumn>
					<DxGridDataColumn FieldName="@nameof(Note.Expires)" Caption="Expires"
									  DisplayFormat="yyyy" />
				</Columns>
				<EditFormTemplate Context="EditFormContext">
					@{
						var editItem = (Note)EditFormContext.EditModel;
					}
					<DxFormLayout Data="@editItem">
						<DxFormLayoutItem Caption="Content" ColSpanMd="12">
							<DxMemo @bind-Text="@editItem.Content" Rows="4" style="width:24rem;" />
						</DxFormLayoutItem>
						<DxFormLayoutItem Caption="Expires" ColSpanMd="12">
							<DxDateEdit @bind-Date="@editItem.Expires" Enabled="false"
										DisplayFormat="@constants.STD_DATE_FORMAT" />
						</DxFormLayoutItem>
						<DxFormLayoutItem Caption="Created" ColSpanMd="12" Visible="@(editItem.CreatedOn.HasValue)">
							<DxDateEdit @bind-Date="@editItem.LocalCreatedOn" Enabled="false"
										DisplayFormat="@constants.STD_DATETIME_FORMAT" />
						</DxFormLayoutItem>
						<DxFormLayoutItem Caption="Last Updated" ColSpanMd="12" Visible="@(editItem.CreatedOn.HasValue)">
							<DxDateEdit @bind-Date="@editItem.LocalUpdatedOn" Enabled="false"
										DisplayFormat="@constants.STD_DATETIME_FORMAT" />
						</DxFormLayoutItem>
						<DxFormLayoutItem Caption="Last Update By" Visible="@(editItem.CreatedOn.HasValue)"
										  Field="@nameof(editItem.User)" Enabled="false" ColSpanMd="12" />
					</DxFormLayout>
				</EditFormTemplate>

			</DxGrid>
		</div>

	</DxFormLayoutGroup>

	<PdfViewer @bind-PdfIsReady=isPdfReady DocumentContent="@documentContent" ReportTitle="@reportTitle" />
}
@code {

	[Parameter]
	public Person SelectedPerson { get; set; }

	[Parameter]
	public string CssClass { get; set; }

	List<Note> notes = new();
	DxGrid? dxGrid;

	string reportTitle;
	bool isPdfReady = false;
	bool isReady = false;
	byte[] documentContent;

	protected override async Task OnParametersSetAsync()
	{
		if (SelectedPerson != null)
		{
			await RefreshData();
		}
		isReady = true;
	}

	async Task RefreshData()
	{
		using var dbc = await U3Adbfactory.CreateDbContextAsync();
		notes = await BusinessRule.GetNotesForPersonAsync(dbc, SelectedPerson.ID);
	}

	async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
	{
		var editModel = (Note)e.EditModel;
		editModel.PersonID = SelectedPerson.ID;
		editModel.Person = SelectedPerson;
		if (e.IsNew)
		{
			var endDate = new DateOnly(DateTime.UtcNow.Year, 12, 31);
			var lastQuarter = new int[] { 10, 11, 12 };
			if (lastQuarter.Contains(endDate.Month))
			{
				editModel.Expires = endDate.AddYears(1);
			}
		}
		else
		{
			editModel.LocalCreatedOn = await lt.GetLocalTimeAsync(editModel.CreatedOn.Value);
			editModel.LocalUpdatedOn = await lt.GetLocalTimeAsync(editModel.UpdatedOn.Value);
		}
	}

	bool isBusy;
	async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
	{
		if (isBusy) return;
		isBusy = true;
		try
		{
			await SaveRecord(e);
		}
		finally
		{
			isBusy = false;
		}
	}

	async Task SaveRecord(GridEditModelSavingEventArgs e)
	{
		var editModel = (Note)e.EditModel;
		if (!await IsDataOk(editModel)) { e.Cancel = true; return; }
		// Re-query a data item from the store.
		using var dbc = await U3Adbfactory.CreateDbContextAsync();
		var dataItem = e.IsNew ? new Note() : dbc.Note.Find(editModel.Id);
		// Assign changes from the edit model to the data item.
		if (dataItem != null)
		{
			editModel.CopyTo(dataItem);
			dataItem.PersonID = SelectedPerson.ID;
			dataItem.Person = await dbc.Person.FindAsync(SelectedPerson.ID);
			// Post changes to the database.
			if (e.IsNew) await dbc.AddAsync(dataItem);
			await dbc.SaveChangesAsync();
			// update the Grid.
			if (e.IsNew)
			{
				notes.Insert(0, dataItem);
			}
			else
			{
				int idx = notes.FindIndex(x => x.Id == dataItem.Id);
				notes[idx] = dataItem;
			}
		}
	}

	async Task<bool> IsDataOk(Note editItem)
	{
		bool result = true;
		return result;
	}

	async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
	{
		using var dbc = await U3Adbfactory.CreateDbContextAsync();
		Note note = await dbc.Note.FindAsync(((Note)e.DataItem).Id);
		dbc.Remove(note);
		await dbc.SaveChangesAsync();
		notes = await BusinessRule.GetNotesForPersonAsync(dbc, SelectedPerson.ID);
		StateHasChanged();
	}

	public async Task Print()
	{
		reportTitle = $"Note History: {SelectedPerson.FullName}";
		using var ms = new System.IO.MemoryStream();
		await dxGrid.ExportToPdfAsync(ms,
			new GridPdfExportOptions()
			{
				FitToPage = true,
				CustomizeDocument = OnCustomizeDocument,
				CustomizeDocumentHeader = OnCustomizeDocumentHeader, // Adds a document header
				CustomizePageFooter = OnCustomizePageFooter, // Adds page footers            });
			});
		documentContent = ms.ToArray();
		isPdfReady = true;
	}

	void OnCustomizeDocumentHeader(GridDocumentExportCustomizeDocumentHeaderFooterEventArgs args)
	{
		args.ElementStyle.Font = new DXFont("Arial", 16);
		args.ElementStyle.ForeColor = System.Drawing.Color.RoyalBlue;
		args.Text = reportTitle;
	}

	void OnCustomizeDocument(GridDocumentExportCustomizeDocumentEventArgs args)
	{
		args.DefaultElementStyle.Font = new DXFont("Times New Roman", 8);
		args.PaperKind = DXPaperKind.A4;
		args.Margins = new DXMargins(50, 50, 50, 50);
	}

	void OnCustomizePageFooter(GridDocumentExportCustomizePageHeaderFooterEventArgs args)
	{
		args.Text = "Page {0} of {1}";
	}

}
