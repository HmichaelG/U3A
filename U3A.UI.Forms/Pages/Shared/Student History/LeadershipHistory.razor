@using DevExpress.Drawing
@using DevExpress.Drawing.Printing
@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<DxFormLayoutGroup Caption="@($"Leadership History for: {SelectedPerson?.FullName}")" HeaderCssClass="h4">
    <div class="h-25 overflow-auto">
        <DxGrid id="my-grid" Data="@leadersHistory" @ref="@dxGrid"
                TextWrapEnabled=false
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                AllowSorting=false
                AllowFiltering=false
                AllowResize="true"
                AllowGrouping=true
                AutoExpandAllGroupRows=true
                VirtualScrollingEnabled=true
                CssClass="@CssClass">
            <Columns>
                <DxGridDataColumn FieldName="Year" Caption="Year"
                    DisplayFormat="{0:0000}" 
                    GroupIndex="0" 
                    SortOrder="GridColumnSortOrder.Descending" />
                <DxGridDataColumn FieldName="Course" Caption="Course" GroupIndex="1" />
                <DxGridDataColumn FieldName="TermName" Caption="Term" />
                <DxGridDataColumn FieldName="TypeName" Caption="Type" />
                <DxGridDataColumn FieldName="Class" Caption="Class" />
            </Columns>
        </DxGrid>
    </div>

</DxFormLayoutGroup>

<PdfViewer @bind-PdfIsReady=isPdfReady DocumentContent="@documentContent" ReportTitle="@reportTitle" />

@code {

    [Parameter]
    public Person SelectedPerson { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    List<LeaderHistory> leadersHistory = new();
    DxGrid? dxGrid;

    string reportTitle;
    bool isPdfReady = false;
    byte[] documentContent;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedPerson != null)
        {
            using (var dbc = U3Adbfactory.CreateDbContext())
            {
                leadersHistory = await BusinessRule.GetLeaderHistoryForPersonAsync(dbc, SelectedPerson.ID);
            }
        }
    }

    public async Task Print()
    {
        reportTitle = $"Leadership History: {SelectedPerson.FullName}";
        using var ms = new System.IO.MemoryStream();
        await dxGrid.ExportToPdfAsync(ms,
            new GridPdfExportOptions()
            {
                FitToPage = true,
                CustomizeDocument = OnCustomizeDocument,
                CustomizeDocumentHeader = OnCustomizeDocumentHeader, // Adds a document header
                CustomizePageFooter = OnCustomizePageFooter, // Adds page footers            });
            });
        documentContent = ms.ToArray();
        isPdfReady = true;
    }

    void OnCustomizeDocumentHeader(GridDocumentExportCustomizeDocumentHeaderFooterEventArgs args)
    {
        args.ElementStyle.Font = new DXFont("Arial", 16);
        args.ElementStyle.ForeColor = System.Drawing.Color.RoyalBlue;
        args.Text = reportTitle;
    }

    void OnCustomizeDocument(GridDocumentExportCustomizeDocumentEventArgs args)
    {
        args.DefaultElementStyle.Font = new DXFont("Times New Roman", 8);
        args.PaperKind = DXPaperKind.A4;
        args.Margins = new DXMargins(50, 50, 50, 50);
    }

    void OnCustomizePageFooter(GridDocumentExportCustomizePageHeaderFooterEventArgs args)
    {
        args.Text = "Page {0} of {1}";
    }

}
