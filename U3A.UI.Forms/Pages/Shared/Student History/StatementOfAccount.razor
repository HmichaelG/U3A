@using DevExpress.Drawing
@using DevExpress.Drawing.Printing
@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<DxFormLayoutGroup Caption="@($"Statement of Account for: {SelectedPerson?.FullName}")" HeaderCssClass="h4">
    <div class="d-flex flex-row-reverse w-100">
        <DxDropDownButton Text="Allocate">
            <Items>
                <DxDropDownButtonItem Text="Full Detail" Click="@(() => AllocateTransactions(true))" />
                <DxDropDownButtonItem Text="Outstanding Only" Click="@(() => AllocateTransactions(false))" />
                <DxDropDownButtonItem BeginGroup Text="Unallocate" Click="@RestoreOriginal" />
            </Items>
        </DxDropDownButton>
    </div>
    <div class="h-25 overflow-auto">
        <DxGrid @ref=@dxGrid Data="@memberFees"
                AllowSorting=false
                AllowFiltering=false
                AllowGrouping=false
                TextWrapEnabled=false
                VirtualScrollingEnabled=true
                CssClass="@CssClass">
            <Columns>
                <DxGridDataColumn AllowSort="false" FieldName="@nameof(MemberFee.Date)" Caption="Date" DisplayFormat="@constants.SHORT_DATE_FORMAT" Width="6rem" />
                <DxGridDataColumn AllowSort="false" FieldName="@nameof(MemberFee.Description)" Caption="Description" />
                <DxGridDataColumn AllowSort="false" FieldName="@nameof(MemberFee.Amount)"
                                  Caption="Amount" DisplayFormat="c2" Width="5rem">
                    <CellDisplayTemplate>
                        @if (context.Value is decimal amount && amount < 0)
                        {
                            <span class="text-fl-danger">@context.Value</span>
                        }
                        else
                        {
                            <span>@context.Value</span>
                        }
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn AllowSort="false" FieldName="@nameof(MemberFee.Balance)"
                                  Visible="@showBalance"
                                  Caption="Balance" DisplayFormat="c2" Width="75px" />
            </Columns>
            <TotalSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="Total" FieldName="Description" />
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Amount" />
            </TotalSummary>
        </DxGrid>
    </div>

</DxFormLayoutGroup>

@code {

    [Parameter]
    public Term SelectedTerm { get; set; }

    [Parameter]
    public Person SelectedPerson { get; set; }

    [Parameter]
    public string CssClass { get; set; }


    List<MemberFee> originalMemberFees = new();
    List<MemberFee> memberFees = new();
    MemberFeeCalculationService? service;
    bool showBalance;
    DxGrid? dxGrid;
    string reportTitle;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedPerson != null)
        {
            using (var dbContext = U3Adbfactory.CreateDbContext())
            {
                showBalance = false;
                service = new MemberFeeCalculationService();
                var totalFees = await service.CalculateFeeAsync(U3Adbfactory, SelectedPerson, SelectedTerm);
                originalMemberFees = service.GetMemberFees(SelectedPerson.ID);
                memberFees = originalMemberFees.ToList();
            }
        }
    }

    void RestoreOriginal()
    {
        showBalance = false;
        memberFees = originalMemberFees.ToList();
        StateHasChanged();
    }

    void AllocateTransactions(bool ShowFullAllocation)
    {
        showBalance = true;
        memberFees = originalMemberFees.ToList();
        memberFees = service.AllocateMemberPayments(memberFees, ShowFullAllocation);
        StateHasChanged();
    }

    public async Task Print()
    {
        reportTitle = $"Statement of Account: {SelectedPerson.FullName}";
        await dxGrid.ExportToPdfAsync(reportTitle,
            new GridPdfExportOptions()
            {
                FitToPage = false,
                CustomizeDocument = OnCustomizeDocument,
                CustomizeDocumentHeader = OnCustomizeDocumentHeader, // Adds a document header
                CustomizePageFooter = OnCustomizePageFooter, // Adds page footers            });
                CustomizeColumn = OnCustomizeColumn,
            });
    }

    void OnCustomizeDocumentHeader(GridDocumentExportCustomizeDocumentHeaderFooterEventArgs args)
    {
        args.ElementStyle.Font = new DXFont("Arial", 16);
        args.ElementStyle.ForeColor = System.Drawing.Color.RoyalBlue;
        args.Text = reportTitle;
    }
    void OnCustomizeColumn(GridDocumentExportCustomizeColumnEventArgs args)
    {
        if (args.FieldName == "Date") args.Width = 300;
        if (args.FieldName == "Description") args.Width = 1500;
    }
    void OnCustomizeDocument(GridDocumentExportCustomizeDocumentEventArgs args)
    {
        args.PaperKind = DXPaperKind.A4;
        args.Margins = new DXMargins(50, 50, 50, 50);
    }
    void OnCustomizePageFooter(GridDocumentExportCustomizePageHeaderFooterEventArgs args)
    {
        args.Text = "Page {0} of {1}";
    }
}
