@using DevExpress.Drawing
@using DevExpress.Drawing.Printing
@inject IDbContextFactory<U3ADbContext> U3Adbfactory

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <DxFormLayoutGroup Caption="@($"Attendance History for: {SelectedPerson?.FullName}")" HeaderCssClass="h4">
            <DxGrid id="do-not-print" Data="@attendance" @ref="@dxGrid"
                    TextWrapEnabled=false
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    AllowSorting=false
                    AllowFiltering=false
                    AllowResize="true"
                    AllowGrouping=true
                    AutoExpandAllGroupRows=true
                    VirtualScrollingEnabled=true
                    CustomSummary="Grid_CustomSummary"
                    CssClass="@CssClass">
                <Columns>
                    <DxGridDataColumn FieldName="Term.Name" Caption="Term" GroupIndex="0" />
                    <DxGridDataColumn FieldName="CourseName" Caption="Course" Width="40%" GroupIndex="1" />
                    <DxGridDataColumn FieldName="Date" Caption="Date">
                        <GroupFooterTemplate>
                            @{
                                var summaryItems = context.SummaryItems;
                                if (summaryItems.Any())
                                {
                                    foreach (var item in summaryItems)
                                    {
                                        string groupName = "";
                                        var rowLevel = context.Grid.GetRowLevel(context.GroupRowVisibleIndex);
                                        if (rowLevel == 0)
                                            groupName = (string)context.Grid.GetRowValue(context.GroupRowVisibleIndex, "Term.Name");
                                        else
                                            groupName = "Course Sub-Total";

                                        <span>
                                            @groupName
                                        </span>
                                    }
                                }
                            }
                        </GroupFooterTemplate>
                    </DxGridDataColumn>
                    <DxGridDataColumn FieldName="Present" Caption="Present" />
                    <DxGridDataColumn FieldName="AbsentWithApology" Caption="Apology" />
                    <DxGridDataColumn FieldName="AbsentWithoutApology" Caption="W/out Apology" />
                    <DxGridDataColumn FieldName="Comment" Caption="Comment" />
                </Columns>
                <GroupSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" Name="Custom"
                                       DisplayText="Sub-Total"
                                       FooterColumnName="Date" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom"
                                       DisplayText="{0:n0}"
                                       FieldName="Present"
                                       FooterColumnName="Present" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom"
                                       DisplayText="{0:n0}"
                                       FieldName="AbsentWithApology"
                                       FooterColumnName="AbsentWithApology" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom"
                                       DisplayText="{0:n0}"
                                       FieldName="AbsentWithoutApology"
                                       FooterColumnName="AbsentWithoutApology" />
                </GroupSummary>
                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom"
                                       DisplayText="Participant Total"
                                       FooterColumnName="Date" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom"
                                       DisplayText="{0:n0}"
                                       FieldName="Present"
                                       FooterColumnName="Present" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom"
                                       DisplayText="{0:n0}"
                                       FieldName="AbsentWithApology"
                                       FooterColumnName="AbsentWithApology" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom"
                                       DisplayText="{0:n0}"
                                       FieldName="AbsentWithoutApology"
                                       FooterColumnName="AbsentWithoutApology" />
                </TotalSummary>
            </DxGrid>

    </DxFormLayoutGroup>

    <PdfViewer PdfIsReady=isPdfReady DocumentContent="@documentContent" ReportTitle="@reportTitle" />
}

@code {



    [Parameter]
    public Term SelectedTerm { get; set; }

    [Parameter]
    public Person SelectedPerson { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    List<AttendClass> attendance = new();
    DxGrid? dxGrid;
    string reportTitle;

    bool isPdfReady;
    bool isReady;

    byte[] documentContent;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedPerson != null && SelectedTerm != null)
        {
            using (var dbc = U3Adbfactory.CreateDbContext())
            {
                attendance = await BusinessRule.GetAttendanceHistoryForStudentAsync(dbc, SelectedTerm.Year, SelectedPerson.ID);
            }
        }
        isReady = true;
    }

    void Grid_CustomSummary(GridCustomSummaryEventArgs e)
    {
        switch (e.SummaryStage)
        {
            case GridCustomSummaryStage.Start:
                e.TotalValue = 0;
                break;
            case GridCustomSummaryStage.Calculate:
                int value = 0;
                if (e.Item.FieldName == "Present")
                {
                    value = ((bool)e.GetRowValue("Present")) ? 1 : 0;
                    e.TotalValue = (int)e.TotalValue + value;
                }
                if (e.Item.FieldName == "AbsentWithApology")
                {
                    value = ((bool)e.GetRowValue("AbsentWithApology")) ? 1 : 0;
                    e.TotalValue = (int)e.TotalValue + value;
                }
                if (e.Item.FieldName == "AbsentWithoutApology")
                {
                    value = ((bool)e.GetRowValue("AbsentWithoutApology")) ? 1 : 0;
                    e.TotalValue = (int)e.TotalValue + value;
                }
                break;
        }
    }

    public async Task Print()
    {
        reportTitle = $"Attendance History: {SelectedPerson.FullName}";
        using var ms = new MemoryStream();
        await dxGrid.ExportToPdfAsync(ms,
            new GridPdfExportOptions()
            {
                FitToPage = true,
                CustomizeDocument = OnCustomizeDocument,
                CustomizeCell = OnCustomizeCell,
                CustomizeDocumentHeader = OnCustomizeDocumentHeader, // Adds a document header
                CustomizePageFooter = OnCustomizePageFooter, // Adds page footers            });
            });
        documentContent = ms.ToArray();
        isPdfReady = true;
    }

    void OnCustomizeDocumentHeader(GridDocumentExportCustomizeDocumentHeaderFooterEventArgs args)
    {
        args.ElementStyle.Font = new DXFont("Arial", 16);
        args.ElementStyle.ForeColor = System.Drawing.Color.RoyalBlue;
        args.Text = reportTitle;
    }

    void OnCustomizeDocument(GridDocumentExportCustomizeDocumentEventArgs args)
    {
        args.DefaultElementStyle.Font = new DXFont("Times New Roman", 8);
        args.PaperKind = DXPaperKind.A4;
        args.Margins = new DXMargins(50, 50, 50, 50);
    }

    void OnCustomizeCell(GridDocumentExportCustomizeCellEventArgs args)
    {
        if (args.AreaType == DocumentExportAreaType.DataArea && args.Value is bool)
        {
            var val = (bool)args.Value;
            args.Text = (val) ? "x" : "";
            args.Handled = true;
        }
    }

    void OnCustomizePageFooter(GridDocumentExportCustomizePageHeaderFooterEventArgs args)
    {
        args.Text = "Page {0} of {1}";
    }

}
