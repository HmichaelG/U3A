@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@using System.Drawing

@if (IsReady)
{
    <div>
        <DxToolbar CssClass="my-1 d-print-none" SizeMode="SizeMode.Small">
            <DxToolbarItem Text="Export" RenderStyle="ButtonRenderStyle.Primary"
                           Alignment="ToolbarItemAlignment.Right" CssClass="me-1"
                           IconCssClass="bi bi-filetype-png">
                <Items>
                    <DxToolbarItem Text=@($"Export {titleMembersByGender}")
                                   Alignment="ToolbarItemAlignment.Right" CssClass="me-1"
                                   Click=@(async () => await chartMemberSummary.ExportAsync(titleMembersByGender,ChartExportFormat.Png,100))
                                   IconCssClass="bi bi-filetype-png" />
                    <DxToolbarItem Text=@($"Export {titleNetGainOrLoss}")
                                   Alignment="ToolbarItemAlignment.Right" CssClass="me-1"
                                   Click=@(async () => await chartNetGainOrLoss.ExportAsync(titleNetGainOrLoss,ChartExportFormat.Png,150))
                                   IconCssClass="bi bi-filetype-png" />
                    <DxToolbarItem Text=@($"Export {titleLengthOfMship}")
                                   Alignment="ToolbarItemAlignment.Right" CssClass="me-1"
                                   Click=@(async () => await chartLengthOfMship.ExportAsync(titleLengthOfMship,ChartExportFormat.Png,100))
                                   IconCssClass="bi bi-filetype-png" />
                    <DxToolbarItem Text=@($"Export {titleEnrolments}")
                                   Alignment="ToolbarItemAlignment.Right" CssClass="me-1"
                                   Click=@(async () => await chartEnrolments.ExportAsync(titleEnrolments,ChartExportFormat.Png,100))
                                   IconCssClass="bi bi-filetype-png" />
                    <DxToolbarItem Text=@($"Export {titleWaitlist}")
                                   Alignment="ToolbarItemAlignment.Right" CssClass="me-1"
                                   Click=@(async () => await chartWiatlist.ExportAsync(titleWaitlist,ChartExportFormat.Png,100))
                                   IconCssClass="bi bi-filetype-png" />
                    <DxToolbarItem Text=@($"Export {titleMembersAge}")
                                   Alignment="ToolbarItemAlignment.Right" CssClass="me-1"
                                   Click=@(async () => await chartMemberAge.ExportAsync(titleMembersAge,ChartExportFormat.Png,100))
                                   IconCssClass="bi bi-filetype-png" />
                </Items>
            </DxToolbarItem>
        </DxToolbar>

        <div class="w-100 d-flex justify-content-center">
            <DxPieChart Data="@memberData" @ref=@chartMemberSummary
                                InnerDiameter="0.5" Width="33.33333%"
                        LabelOverlap="PieChartLabelOverlap.Hide"
                        CustomizeSeriesPoint="CustomizeGenderSeriesPoint"
                        T="MemberSummary">
                <DxChartTitle Text=@titleMembersByGender />
                <DxPieChartSeries T="MemberSummary"
                                  TArgument="string"
                                  TValue="int"
                                  ValueField="si => si.Count"
                                  ArgumentField="si => si.Group"
                                  SummaryMethod="Enumerable.Sum">
                    <DxChartSeriesLabel Visible="true"
                                        Position="RelativePosition.Inside"
                                        ValueFormat='ChartElementFormat.FromLdmlString("#0")' />
                </DxPieChartSeries>
                <DxChartTooltip Enabled="true"
                                Position="RelativePosition.Outside">
                    <div style="margin: 0.75rem">
                        <div class="fw-bold">@context.Point.Argument</div>
                        <div>
                            @(
                                $"{context.Point.Value:#,0.}"
                                )
                        </div>
                    </div>
                </DxChartTooltip>
                <DxChartLegend HorizontalAlignment="HorizontalAlignment.Right"
                               VerticalAlignment="VerticalEdge.Top"
                               Position="RelativePosition.Outside"
                               Orientation="Orientation.Vertical" />
            </DxPieChart>

            <DxChart Data="attritionData" @ref=@chartNetGainOrLoss
                     T="MemberSummary" Width="33.333333%"
                     CustomizeSeriesPoint="CustomizeAttritionSeriesPoint"
                     LabelOverlap="ChartLabelOverlap.Hide">
                <DxChartTitle Text=@($"{term?.Year}: Net Gain / Loss") />
                <DxChartCommonSeries NameField="@((MemberSummary t) => t.Year)"
                                     ArgumentField="@(s => s.Group)"
                                     ValueField="@(s => s.Count)"
                                     SummaryMethod="Enumerable.Sum"
                                     SeriesType="ChartSeriesType.Bar">
                    <SeriesTemplate Context="settings">
                        <DxChartBarSeries Settings="@settings">
                            <DxChartSeriesLabel Visible=true Position="RelativePosition.Inside" />
                        </DxChartBarSeries>
                    </SeriesTemplate>
                </DxChartCommonSeries>
                <DxChartLegend Position="RelativePosition.Outside" Visible=false
                               HorizontalAlignment="HorizontalAlignment.Right" />
                <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
                    <div class="m-2">
                        <div>
                            @context.Point.Argument: @string.Format("{0:#0}", (int)context.Point.Value)
                        </div>
                    </div>
                </DxChartTooltip>
            </DxChart>

            <DxPieChart Data="@membershipLengthData" @ref=@chartLengthOfMship
                        InnerDiameter="0.5" Width="33.333333%"
                        Palette="@memberLengthTheme"
                        LabelOverlap="PieChartLabelOverlap.Hide"
                        T="MemberSummary">
                <DxChartTitle Text=@titleLengthOfMship />
                <DxPieChartSeries T="MemberSummary"
                                  TArgument="string"
                                  TValue="int"
                                  ValueField="si => si.Count"
                                  ArgumentField="si => si.Group"
                                  SummaryMethod="Enumerable.Sum">
                    <DxChartSeriesLabel Visible="true"
                                        Position="RelativePosition.Inside"
                                        ValueFormat='ChartElementFormat.FromLdmlString("#0")' />
                </DxPieChartSeries>
                <DxChartTooltip Enabled="true"
                                Position="RelativePosition.Outside">
                    <div style="margin: 0.75rem">
                        <div class="fw-bold">@context.Point.Argument</div>
                        <div>
                            @(
                                $"{context.Point.Value:#,0.}"
                                )
                        </div>
                    </div>
                </DxChartTooltip>
                <DxChartLegend HorizontalAlignment="HorizontalAlignment.Right"
                               VerticalAlignment="VerticalEdge.Top"
                               Position="RelativePosition.Outside"
                               Orientation="Orientation.Vertical" />
            </DxPieChart>
        </div>

        <div class="w-100 d-flex justify-content-center">
            <DxPieChart Data="@enrolmentData" @ref=@chartEnrolments
                        InnerDiameter="0.5" Width="33.333333%"
                        LabelOverlap="PieChartLabelOverlap.Hide"
                        Palette="@enrolmentTheme"
                        T="MemberSummary">
                <DxChartTitle Text=@($"{term?.Name}: Enrolment") />
                <DxPieChartSeries T="MemberSummary"
                                  TArgument="string"
                                  TValue="int"
                                  ValueField="si => si.Count"
                                  ArgumentField="si => si.Group"
                                  SummaryMethod="Enumerable.Sum">
                    <DxChartSeriesLabel Visible="true"
                                        Position="RelativePosition.Inside"
                                        ValueFormat='ChartElementFormat.FromLdmlString("#0")' />
                </DxPieChartSeries>
                <DxChartTooltip Enabled="true"
                                Position="RelativePosition.Inside">
                    <div style="margin: 0.75rem">
                        <div class="fw-bold">@context.Point.Argument</div>
                        <div>
                            @(
                                $"{context.Point.Value:#,0.}"
                                )
                        </div>
                    </div>
                </DxChartTooltip>
                <DxChartLegend HorizontalAlignment="HorizontalAlignment.Right"
                               VerticalAlignment="VerticalEdge.Top"
                               Position="RelativePosition.Outside"
                               Orientation="Orientation.Vertical" />
            </DxPieChart>

            <DxPieChart Data="@waitlistData" @ref=@chartWiatlist
                        InnerDiameter="0.5" Width="33.333333%"
                        LabelOverlap="PieChartLabelOverlap.Hide"
                        Palette="@waitlistTheme"
                        T="MemberSummary">
                <DxChartTitle Text=@($"{term?.Name}: Waitlist") />
                <DxPieChartSeries T="MemberSummary"
                                  TArgument="string"
                                  TValue="int"
                                  ValueField="si => si.Count"
                                  ArgumentField="si => si.Group"
                                  SummaryMethod="Enumerable.Sum">
                    <DxChartSeriesLabel Visible="true"
                                        Position="RelativePosition.Inside"
                                        ValueFormat='ChartElementFormat.FromLdmlString("#0")' />
                </DxPieChartSeries>
                <DxChartTooltip Enabled="true"
                                Position="RelativePosition.Outside">
                    <div style="margin: 0.75rem">
                        <div class="fw-bold">@context.Point.Argument</div>
                        <div>
                            @(
                                $"{context.Point.Value:#,0.}"
                                )
                        </div>
                    </div>
                </DxChartTooltip>
                <DxChartLegend HorizontalAlignment="HorizontalAlignment.Right"
                               VerticalAlignment="VerticalEdge.Top"
                               Position="RelativePosition.Outside"
                               Orientation="Orientation.Vertical" />
            </DxPieChart>

            <DxPieChart Data="@membershipDOBData" @ref=@chartMemberAge
                        InnerDiameter="0.5" Width="33.333333%"
                        Palette="@memberLengthTheme"
                        LabelOverlap="PieChartLabelOverlap.Hide"
                        T="MemberSummary">
                <DxChartTitle Text=@titleMembersAge />
                <DxPieChartSeries T="MemberSummary"
                                  TArgument="string"
                                  TValue="int"
                                  ValueField="si => si.Count"
                                  ArgumentField="si => si.Group"
                                  SummaryMethod="Enumerable.Sum">
                    <DxChartSeriesLabel Visible="true"
                                        Position="RelativePosition.Inside"
                                        ValueFormat='ChartElementFormat.FromLdmlString("#0")' />
                </DxPieChartSeries>
                <DxChartTooltip Enabled="true"
                                Position="RelativePosition.Outside">
                    <div style="margin: 0.75rem">
                        <div class="fw-bold">@context.Point.Argument</div>
                        <div>
                            @(
                                $"{context.Point.Value:#,0.}"
                                )
                        </div>
                    </div>
                </DxChartTooltip>
                <DxChartLegend HorizontalAlignment="HorizontalAlignment.Right"
                               VerticalAlignment="VerticalEdge.Top"
                               Position="RelativePosition.Outside"
                               Orientation="Orientation.Vertical" />
            </DxPieChart>
        </div>
    </div>
}

<style>
    .w-33 {
        width: 33.333333%;
    }
</style>

@code {
    IEnumerable<MemberSummary> memberData;
    IEnumerable<MemberSummary> membershipLengthData;
    IEnumerable<MemberSummary> membershipDOBData;
    IEnumerable<MemberSummary> enrolmentData;
    IEnumerable<MemberSummary> waitlistData;
    IEnumerable<MemberSummary> attritionData;
    Term? term;
    DxPieChart<MemberSummary> chartMemberSummary;
    string titleMembersByGender = "Member By Gender";
    DxPieChart<MemberSummary> chartLengthOfMship;
    string titleMembersAge = "Member Age Summary";
    DxPieChart<MemberSummary> chartMemberAge;
    string titleLengthOfMship = "Length of Membership";
    DxPieChart<MemberSummary> chartWiatlist;
    string titleWaitlist = "Waitlist Summary";
    DxPieChart<MemberSummary> chartEnrolments;
    string titleEnrolments = "Enrolment Summary";
    DxChart<MemberSummary> chartNetGainOrLoss;
    string titleNetGainOrLoss = "Net Gain Or Loss";
    bool IsReady;

    protected override async Task OnInitializedAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            term = await BusinessRule.CurrentTermAsync(dbc);
            if (term != null)
            {
                memberData = await BusinessRule.GetMemberSummaryByGender(dbc, term);
                enrolmentData = await BusinessRule.GetEnrolmentSummary(dbc, term);
                waitlistData = await BusinessRule.GetWaitlistSummary(dbc, term);
                attritionData = await BusinessRule.GetAttritionSummary(dbc, term);
                membershipLengthData = BusinessRule.GetMemberSummaryByMshipLength(dbc, term);
                membershipDOBData = BusinessRule.GetMemberSummaryByDOB(dbc, term);
            }
        }
        IsReady = true;
    }

    private void CustomizeGenderSeriesPoint(ChartSeriesPointCustomizationSettings settings)
    {
        if (settings.Point.Argument.ToString() == "Male")
            settings.PointAppearance.Color = System.Drawing.Color.Blue;
        if (settings.Point.Argument.ToString() == "Female")
            settings.PointAppearance.Color = System.Drawing.Color.DeepPink;
        if (settings.Point.Argument.ToString() == "Other")
            settings.PointAppearance.Color = System.Drawing.Color.Purple;
    }
    private void CustomizeAttritionSeriesPoint(ChartSeriesPointCustomizationSettings settings)
    {
        IEnumerable<MemberSummary> dataItems = settings.Point.DataItems.Cast<MemberSummary>();
        if (dataItems.FirstOrDefault().Year == 0)        //did not renew
            settings.PointAppearance.Color = System.Drawing.Color.Red;
        if (dataItems.FirstOrDefault().Year == 1)        //new members
            settings.PointAppearance.Color = System.Drawing.Color.Green;
        if (dataItems.FirstOrDefault().Year == 2)        //net gain / loss
            settings.PointAppearance.Color = System.Drawing.Color.Blue;
    }

    string[] memberLengthTheme = ColorThemeGenerator.GenerateThemeStrings(Color.SaddleBrown);
    string[] enrolmentTheme = ColorThemeGenerator.GenerateThemeStrings(Color.DarkOrchid);
    string[] waitlistTheme = ColorThemeGenerator.GenerateThemeStrings(Color.DarkOrange);

}