<section class="@($"{CssClass} alert alert-{AlertType} text-{AlertType} text-center")" hidden="@isHidden">
    <button class="btn-close" onclick="@onCloseButtonClick" hidden="@(!ShowCollapseButton)" />
    @ContentTemplate
    @(new MarkupString(AlertText))
</section>
<div class="w-100 bg-primary muted" hidden="@(!isHidden)">
    <button class="btn-close" onclick="@onOpenButtonClick" />
</div>

<style>
    .muted {
        --bs-bg-opacity: 0.1;
    }
    section {

        width: 100%;
    }

    button {
        float: right;
    }
</style>
@code {
    [Parameter] public bool ShowCollapseButton { get; set; } = true;
    [Parameter] public string AlertType { get; set; } = "info";
    [Parameter] public string AlertText { get; set; }
    [Parameter] public EventCallback OnToggleAlert { get; set; }
    [Parameter] public EventCallback OnContentExpanded { get; set; }
    [Parameter] public EventCallback OnContentCollapsed { get; set; }
    [Parameter] public RenderFragment ContentTemplate { get; set; }
    [Parameter] public string CssClass { get; set; }

    bool isHidden = false;

    async Task onOpenButtonClick()
    {
        isHidden = false;
        await RaiseToggleLayoutEvent();
    }
    async Task onCloseButtonClick()
    {
        isHidden = true;
        await RaiseToggleLayoutEvent();
    }

    public async Task ToggleLayoutAsync(bool isCollapsed)
    {
        isHidden = isCollapsed;
        await RaiseToggleLayoutEvent();
    }

    async Task RaiseToggleLayoutEvent()
    {
        InvokeAsync(StateHasChanged);
        if (isHidden)
        {
            await OnContentCollapsed.InvokeAsync();
        }
        else
        {
            await OnContentExpanded.InvokeAsync();
        }
        await OnToggleAlert.InvokeAsync();
    }
}

