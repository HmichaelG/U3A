@inherits LayoutComponentBase

@layout BasicLayout
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInMgr
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime js

@using Microsoft.AspNetCore.Identity
@using System.Web
@using U3A.Data
@using U3A.UI.Forms.Pages.MembersPortal.Component

@attribute [Authorize]


<MessageBox @ref="@messageBox" />
<SelectEnrolmentType @ref=@selectEnrolmentType EnrolmentType="enrolmentTypeSelected" />

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <div class="container-fluid">
        @if (menuSelection != MenuOptions.RecordAttendance)
        {
            <DxFormLayout CssClass="col col-12 col-md-8 col-lg-6 mx-auto alert alert-neutral pt-3 px-4 mb-2">
                <DxFormLayoutGroup Decoration="FormLayoutGroupDecoration.None">
                    <div class="text-center alert alert-primary w-100">
                        <span>@welcomeText</span>
                    </div>
                    <TermAndCourse @ref="termAndCourse"
                                   Enabled=@(menuSelection == MenuOptions.Nothing)
                                   OnTermAndCourseCancelled="OnTermAndCourseCancelled" />
                </DxFormLayoutGroup>
            </DxFormLayout>
        }

        <XtraReportViewer HideTabPanels=true ReportIsReady=badgeReportIsReady
                          ReportIsReadyChanged="@OnReportComplete"
                          Report="@memberBadgeReport" />

        @switch (menuSelection)
        {
            case MenuOptions.AddEditStudentLeave:
                <DxFormLayout CssClass="col col-12 col-md-8 col-lg-6 mx-auto">
                    <DxFormLayoutGroup Caption="Add / Edit Student Leave" ColSpanMd="12">
                        <DxFormLayoutItem Caption="Select" ColSpanLg="12">
                            <DxComboBox Data="@Students"
                                        AllowUserInput=true
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        ListRenderMode="ListRenderMode.Virtual"
                                        TextFieldName="@nameof(Person.FullName)"
                                        ValueChanged="@((Person student) => OnSelectedStudentChanged(student))"
                                        Value="@selectedStudent">
                                <DxListEditorColumn FieldName="@nameof(Person.LastName)"
                                                    Caption="Last Name" />
                                <DxListEditorColumn FieldName="@nameof(Person.FirstName)"
                                                    Caption="First Name" />
                            </DxComboBox>
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>
                    @if (selectedStudent != null)
                    {
                        <MemberLeave IsAdminPortal="@IsAdminPortal"
                                     ProcessOnBehalfOf="@selectedStudent"
                                     LeaderCourse="@selectedCourse" />
                    }
                </DxFormLayout>
                break;
            case MenuOptions.StudentLookup:
                <DxFormLayout CssClass="col col-12 col-md-8 col-lg-6 mx-auto">
                    <DxFormLayoutGroup Caption="Student Lookup" ColSpanMd="12">
                        <DxFormLayoutItem Caption="Select" ColSpanLg="12">
                            <DxComboBox Data="@StudentsAndLeaders"
                                        AllowUserInput=true
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        ListRenderMode="ListRenderMode.Virtual"
                                        TextFieldName="@nameof(StudentDetails.FullName)"
                                        ValueChanged="@((StudentDetails student) => OnSelectedStudentLookupChanged(student))"
                                        Value="@selectedLookupStudent">
                                <DxListEditorColumn FieldName="@nameof(StudentDetails.LastName)"
                                                    Caption="Last Name" />
                                <DxListEditorColumn FieldName="@nameof(StudentDetails.FirstName)"
                                                    Caption="First Name" />
                                <DxListEditorColumn FieldName="@nameof(StudentDetails.Status)"
                                                    Caption="Status" />
                            </DxComboBox>
                            @if (selectedLookupStudent != null)
                            {
                                <DxFormLayoutGroup Caption="Participant Details" CssClass="mb-2">
                                    <DxFormLayoutItem Caption="Home Phone" ColSpanMd="12" Context="layoutContext">
                                        <DxTextBox Text="@selectedLookupStudent.Person.HomePhoneOrSilent" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Home Phone" ColSpanMd="12" Context="layoutContext">
                                        <DxTextBox Text="@selectedLookupStudent.Person.MobileOrSilent" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="ICE Phone" ColSpanMd="12" Context="layoutContext">
                                        <DxTextBox Text="@selectedLookupStudent.Person.ICEPhone" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="ICE Contact" ColSpanMd="12" Context="layoutContext">
                                        <DxTextBox Text="@selectedLookupStudent.Person.ICEContact" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Address" ColSpanMd="12" Context="layoutContext">
                                        <DxTextBox Text="@selectedLookupStudent.Person.Address" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Email" ColSpanMd="12" Context="layoutContext">
                                        <DxTextBox Text="@selectedLookupStudent.Person.Email" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Course Clerk" ColSpanMd="12" Context="layoutContext">
                                        <DxTextBox Text="@((selectedEnrolment.IsCourseClerk) ? "Yes" : "No")" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Status" ColSpanMd="12" Context="layoutContext">
                                        <DxTextBox Text="@selectedLookupStudent.Status" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                </DxFormLayoutGroup>
                                @if (!string.IsNullOrWhiteSpace(selectedLookupStudent.CarerSummary))
                                {
                                    <div class="alert alert-info text-center">@(new MarkupString(selectedLookupStudent.CarerSummary))</div>
                                }
                                <div class="input-group mb-1">
                                    @if (!selectedLookupStudent.Person.IsPhoneSilent && !selectedLookupStudent.Person.SMSOptOut)
                                    {
                                        <DxButton CssClass="flex-grow-1"
                                                  Visible="@(!string.IsNullOrWhiteSpace(selectedLookupStudent.Person.Mobile))"
                                                  IconCssClass="menu-icon bi bi-phone"
                                                  Text="SMS"
                                                  RenderStyle="@ButtonRenderStyle.Primary"
                                                  RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                  Click="() => OnSMS(selectedLookupStudent.Person.Mobile)" />
                                    }
                                    @if (!selectedLookupStudent.Person.IsPhoneSilent)
                                    {
                                        <DxButton CssClass="flex-grow-1"
                                                  Visible="@(!string.IsNullOrWhiteSpace(selectedLookupStudent.Person.HomePhone))"
                                                  IconCssClass="menu-icon bi bi-telephone"
                                                  Text="Home"
                                                  RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                  RenderStyle="@ButtonRenderStyle.Primary"
                                                  Click="() => OnPhone(selectedLookupStudent.Person.HomePhone)" />
                                    }
                                    @if (!selectedLookupStudent.Person.IsPhoneSilent)
                                    {
                                        <DxButton CssClass="flex-grow-1"
                                                  Visible="@(!string.IsNullOrWhiteSpace(selectedLookupStudent.Person.Mobile))"
                                                  IconCssClass="menu-icon bi bi-phone"
                                                  Text="Mobile"
                                                  RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                  RenderStyle="@ButtonRenderStyle.Primary"
                                                  Click="() => OnPhone(selectedLookupStudent.Person.Mobile)" />
                                    }
                                    <DxButton CssClass="flex-grow-1"
                                              Visible="@(!string.IsNullOrWhiteSpace(selectedLookupStudent.Person.ICEPhone))"
                                              IconCssClass="menu-icon bi bi-telephone"
                                              Text="ICE"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline"
                                              RenderStyle="@ButtonRenderStyle.Primary"
                                              Click="() => OnPhone(selectedLookupStudent.Person.ICEPhone)" />
                                </div>
                            }
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>
                </DxFormLayout>
                break;
            case MenuOptions.VenueDetails:
                <DxFormLayout CssClass="col col-12 col-md-8 col-lg-6 mx-auto">
                    <div class="fw-bold text-fl-primary mt-3">Venue</div>
                    <DxFormLayoutItem Caption="Address" ColSpanMd="12" Context="layoutContext">
                        <Template>
                            <div class="text-box border-fl-neutral">
                                @selectedVenue.Name<br />
                                @selectedVenue.Address
                            </div>
                        </Template>
                    </DxFormLayoutItem>
                    <div class="fw-bold text-fl-primary mt-1">Contact</div>
                    <DxFormLayoutItem Caption="Coordinator" ColSpanMd="12" Context="layoutContext">
                        <Template>
                            <div class="text-box border-fl-neutral">
                                <span>@selectedVenue.Coordinator</span>
                                <span><b>Phone:</b>&nbsp;@selectedVenue.Phone</span>
                                <span><b>Email:</b>&nbsp;@selectedVenue.Email</span>
                            </div>
                        </Template>
                    </DxFormLayoutItem>
                    <div class="fw-bold text-fl-primary mt-1">Access</div>
                    <DxFormLayoutItem Caption="Key Code" ColSpanMd="12" Context="layoutContext">
                        <Template>
                            <div class="text-box border-fl-neutral">@selectedVenue.KeyCode</div>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Details" ColSpanMd="12" Context="layoutContext">
                        <Template>
                            <div class="text-box border-fl-neutral">@selectedVenue.AccessDetail</div>
                        </Template>
                    </DxFormLayoutItem>
                    <div class="fw-bold text-fl-primary mt-1">Other</div>
                    <DxFormLayoutItem Caption="Equipment" ColSpanMd="12" Context="layoutContext">
                        <Template>
                            <div class="text-box border-fl-neutral">@(new MarkupString(selectedVenue.Equipment?.Replace("\n", "<br/>")))</div>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Comment" ColSpanMd="12" Context="layoutContext">
                        <Template>
                            <div class="text-box border-fl-neutral mb-4">@(new MarkupString(selectedVenue.Comment?.Replace("\n", "<br/>")))</div>
                        </Template>
                    </DxFormLayoutItem>
                </DxFormLayout>
                break;
            case MenuOptions.StudentFees:
                <DxFormLayout CssClass="px-4 col col-12 col-md-10 mx-auto">
                    <StudentFees StudentsAndLeaders="@StudentsAndLeaders" Course="@selectedCourse" Term="@selectedTerm" />
                </DxFormLayout>
                break;
            case MenuOptions.AssignCourseClerk:
                <DxFormLayout CssClass="px-4 col col-12 col-md-10 mx-auto">
                    <StudentGrid @ref="studentGrid"
                                 Enrolments="EnrolmentsToSelectFrom"
                                 Settings="settings" />
                    <DxButton Text="Assign Course Clerk"
                              IconCssClass="menu-icon bi-person-badge me-1"
                              CssClass="d-flex col-6 mx-auto my-1"
                              Click="@(e => OnAssignCourseClerk())"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                </DxFormLayout>
                break;

            case MenuOptions.AttendanceHistory:
                <DxFormLayout CssClass="col col-12 col-md-10 mx-auto p-4">
                    <AttendanceGrid SelectedClass="@selectedClass"
                                    SelectedTerm="@selectedTerm" LocalTime="@localTime" />
                </DxFormLayout>
                break;

            case MenuOptions.ManageEnrolments:
                <DxFormLayout CssClass="px-4 col col-12 col-md-10 mx-auto">
                    <StudentGrid @ref="studentGrid"
                                 Enrolments="EnrolmentsToSelectFrom"
                                 Settings="settings" IsManageEnrolmentsView=true />
                    <div class="input-group">
                        <DxButton Text="Delete Selected"
                                  IconCssClass="menu-icon bi-person-dash me-1"
                                  CssClass="flex-grow-1 mb-1"
                                  Click="@(e => OnDeleteEnrolments())"
                                  RenderStyle="ButtonRenderStyle.Danger"
                                  RenderStyleMode="ButtonRenderStyleMode.Contained">
                        </DxButton>
                        <DxButton Text="Toggle WaitList"
                                  IconCssClass="menu-icon bi-toggle-on me-1"
                                  CssClass="flex-grow-1 mb-1"
                                  Click="@(e => OnToggleWaitlist())"
                                  RenderStyle="ButtonRenderStyle.Warning"
                                  RenderStyleMode="ButtonRenderStyleMode.Contained">
                        </DxButton>
                    </div>
                </DxFormLayout>
                break;

            case MenuOptions.Communicate:
                <DxFormLayout CssClass="px-4 col col-12 col-md-10 mx-auto">
                    <StudentGrid @ref="studentGrid"
                                 Enrolments=@EnrolmentsToSelectFrom
                                 Settings="settings" />
                    <div class="input-group">
                        <DxButton Text="Email"
                                  IconCssClass="menu-icon bi-envelope me-1"
                                  CssClass="flex-grow-1 mb-1"
                                  Click="@(e => GetStudentEmailAddressList())"
                                  RenderStyle="ButtonRenderStyle.Primary"
                                  RenderStyleMode="ButtonRenderStyleMode.Outline">
                        </DxButton>
                        <DxButton Text="SMS"
                                  IconCssClass="menu-icon bi-phone me-1"
                                  CssClass="flex-grow-1 mb-1"
                                  Click="@(e => GetStudentSMSAddressList())"
                                  RenderStyle="ButtonRenderStyle.Primary"
                                  RenderStyleMode="ButtonRenderStyleMode.Outline">
                        </DxButton>
                        <DxButton Text="Print badges"
                                  IconCssClass="menu-icon bi-printer me-1"
                                  CssClass="flex-grow-1 mb-1"
                                  Click="@(e => GetMemberBadges())"
                                  RenderStyle="ButtonRenderStyle.Primary"
                                  RenderStyleMode="ButtonRenderStyleMode.Outline">
                        </DxButton>
                    </div>
                </DxFormLayout>
                break;

            case MenuOptions.ConfigureEmail:
                <DxFormLayout CssClass="mx-4 mt-4 col col-12 col-md-6 mx-auto">
                    <DxFormLayoutGroup Decoration="FormLayoutGroupDecoration.None">
                        <p>
                            <strong>Multiple recipient email delimiter</strong><br />
                            We need to delimit each address when sending email to multiple recipients.
                            Most email clients will accept a comma (,) as the delimitor and as this is the default you will not have to change anything.
                        </p>
                        <p>
                            The exception is Microsoft Outlook (Desktop version) which uses a semi-colon (;).
                        </p>
                    </DxFormLayoutGroup>
                    <InputRadioGroup @bind-Value="@emailDelimiter">
                        <div class="col-12 mt-3"><InputRadio Value="0" />I <strong>do not</strong> use Outlook (Desktop) on this device</div>
                        <div class="col-12 mt-3"><InputRadio Value="1" />I <strong>do</strong> use Outlook (Desktop) on this device</div>
                    </InputRadioGroup>
                    <DxButton Text="Save Configuration"
                              IconCssClass="menu-icon bi bi-save me-1"
                              CssClass="col-12 mt-3 mb-1"
                              Click="@(e => OnSaveEmailDelimiter())"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                </DxFormLayout>
                break;

            case MenuOptions.RecordAttendance:
                <DxFormLayout CssClass="col col-12 mx-auto mt-4 px-4 pt-">
                    <AttendClassMnt IsAdminPortal="@IsAdminPortal"
                                    IsMemberPortal=true
                                    SelectedTerm="selectedTerm"
                                    SelectedCourse="selectedCourse"
                                    SelectedClass="selectedClass" />
                </DxFormLayout>
                break;

            case MenuOptions.CancelClass:
                <DxFormLayout CssClass="col col-12 col-md-8 col-lg-6 mx-auto">
                    <DxFormLayoutGroup Caption="Cancel Class"
                                       ColSpanXs=12
                                       CssClass="mx-auto my-2 p-4 ">
                        <DxFormLayoutItem Caption="Select the Class to cancel" ColSpanMd="12">
                            <DxComboBox Data="@ClassDates"
                                        TextFieldName="@nameof(ClassDate.DateName)"
                                        @bind-Value="@SelectedClassDate" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Cancellation Reason" ColSpanMd="12">
                            <DxTextBox @bind-Text=@CancellationReason />
                        </DxFormLayoutItem>
                        <div class="input-group m-2">
                            <div class="flex-grow-4 mt-1">Are you sure you wish to cancel this class?</div>
                            <DxButton Text="Yes, I am sure"
                                      IconCssClass="menu-icon bi bi-emoji-frown menu-icon"
                                      CssClass="flex-grow-1"
                                      Click="DoCancellation"
                                      RenderStyle="ButtonRenderStyle.Primary"
                                      RenderStyleMode="ButtonRenderStyleMode.Outline">
                            </DxButton>
                        </div>
                    </DxFormLayoutGroup>
                </DxFormLayout>
                break;
            case MenuOptions.LeaderReports:
                <DxFormLayout CssClass="col col-12 col-md-8 col-lg-6 mx-auto">
                    <PortalLeaderReports selectedTerm="@termAndCourse?.selectedTerm"
                                         selectedClass="@termAndCourse?.selectedClass"
                                         selectedCourse="@termAndCourse?.selectedCourse" />
                </DxFormLayout>
                break;
            default:
                <div class="row col col-12 col-md-7 mx-auto">
                    <DxButton Text="Lookup Student / ICE Details"
                              IconCssClass="menu-icon bi bi-search me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.StudentLookup))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Venue Details"
                              IconCssClass="menu-icon bi bi-house-check me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.VenueDetails))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Assign Course Clerk" Visible="@(settings.AllowLeaderToChangeAssignClerk)"
                              IconCssClass="menu-icon bi bi-person-badge me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.AssignCourseClerk))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Manage Enrolments" Visible="@(settings.AllowLeaderToChangeEnrolment)"
                              IconCssClass="menu-icon bi bi-person-rolodex me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.ManageEnrolments))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Student Fees Analysis" Visible="@(settings.AllowLeaderToChangeEnrolment)"
                              IconCssClass="menu-icon bi bi-currency-dollar me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.StudentFees))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Add/Edit Student Leave"
                              IconCssClass="menu-icon bi bi-airplane me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.AddEditStudentLeave))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Email or SMS Students | Member Badges"
                              IconCssClass="menu-icon bi bi-broadcast-pin me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.Communicate))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Record Attendance"
                              IconCssClass="menu-icon bi bi-person-check me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.RecordAttendance))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Attendance History"
                              IconCssClass="menu-icon bi bi-clock-history me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.AttendanceHistory))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Cancel Class"
                              IconCssClass="menu-icon bi bi-emoji-frown me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.CancelClass))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Leader Reports"
                              IconCssClass="menu-icon bi bi-envelope-paper me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.LeaderReports))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Configure Email"
                              IconCssClass="menu-icon bi bi-gear me-1"
                              CssClass="col-12 col-lg-8 mb-1 mx-auto"
                              Click="@(e => OnMenuSelected(MenuOptions.ConfigureEmail))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                </div>
                break;
        }
        <div class="row col col-12 col-md-7 mx-auto">
            <DxButton Text="Return to menu" id="exitButton"
                      IconCssClass="menu-icon bi-door-closed me-1"
                      CssClass="col-12 col-lg-8 mb-1 mx-auto"
                      Click="@(e => OnCancel())"
                      RenderStyle="ButtonRenderStyle.Primary"
                      RenderStyleMode="ButtonRenderStyleMode.Outline">
            </DxButton>
        </div>
    </div>
}
<style>
    .text-box {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        flex-wrap: wrap;
        min-height: 1.75rem;
        padding: 0.25rem;
    }
</style>
@code {
    [CascadingParameter]
    LoginState? loginState { get; set; }

    [CascadingParameter(Name = "QueryResult")]
    string? QueryResult { get; set; }

    [Parameter]
    public EventCallback<PortalMenuResult> OnSelectedOptionCompleted { get; set; }

    [Parameter]
    public bool IsAdminPortal { get; set; }

    int emailDelimiter;
    Term? selectedTerm { get; set; }
    Course? selectedCourse { get; set; }
    Class? selectedClass { get; set; }
    Venue? selectedVenue { get; set; }
    TermAndCourse? termAndCourse;
    StudentGrid? studentGrid;
    MessageBox? messageBox;
    SelectEnrolmentType? selectEnrolmentType;
    int enrolmentTypeSelected = 1;
    bool focusRequired;
    MemberBadge memberBadgeReport;

    private List<ClassDate> ClassDates;
    ClassDate? SelectedClassDate;
    string CancellationReason = string.Empty;

    List<Enrolment>? Enrolments { get; set; } // Active & Waitlisted
    List<Enrolment>? EnrolmentsToSelectFrom { get; set; }
    Enrolment? selectedEnrolment = new();
    List<Person>? Students { get; set; } = new();
    List<StudentDetails>? StudentsAndLeaders { get; set; } = new();
    Person? selectedStudent;
    StudentDetails? selectedLookupStudent;
    bool isApple;

    bool IsReady;
    bool IsSmallLayout;
    SystemSettings? settings;
    Term? term;
    MarkupString? message;
    MarkupString welcomeText;
    string? SuccessMsg = null;
    LocalTime localTime;
    bool badgeReportIsReady;

    enum MenuOptions
    {
        Nothing,
        StudentLookup,
        AssignCourseClerk,
        ManageEnrolments,
        AddEditStudentLeave,
        Communicate,
        RecordAttendance,
        AttendanceHistory,
        LeaderReports,
        CancelClass,
        ConfigureEmail,
        StudentFees,
        VenueDetails
    }
    MenuOptions menuSelection = MenuOptions.Nothing;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // wire up the data
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        }
        ;
        IsReady = true;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var email = loginState.LoginEmail;
        if (loginState.SelectedPerson != null)
        {
            var welcome = $"Welcome <strong>{loginState.SelectedPerson.FullName}</strong>!";
            welcomeText = new MarkupString(welcome);
        }
        else
        {
            welcomeText = new MarkupString($"Welcome <strong>{loginState.LoginEmail}</strong>!");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            localTime = new LocalTime(js);
            isApple = await js.InvokeAsync<bool>("IsApple");
        }
        await js.InvokeVoidAsync("setFocus", "exitButton");
        focusRequired = false;
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task OnSaveEmailDelimiter()
    {
        var delimiter = (emailDelimiter == 0) ? "," : ";";
        var name = (emailDelimiter == 0) ? "comma" : "semi-colon";
        await localStorage.SetItemAsync("emailDelimiter", delimiter);
        await messageBox.ShowOkOnlyAsync("Email Delimiter Saved", $"Your email delimiter has been saved as {name} ({delimiter}).");
        menuSelection = MenuOptions.Nothing;
    }

    async Task OnAssignCourseClerk()
    {
        foreach (var e in Enrolments)
        {
            var isSelected = studentGrid.SelectedDataItems?.Contains(e);
            e.IsCourseClerk = (isSelected.GetValueOrDefault()) ? true : false;
        }
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            dbc.UpdateRange(Enrolments);
            await dbc.SaveChangesAsync();
        }
    }

    async Task OnToggleWaitlist()
    {
        var msg = string.Empty;
        if (await AreEnrolmentsSelected())
        {
            if (await IsMaxEnrolmentsExceeded()) return;
            if (await messageBox.ShowAsync("Toggle Waitlist For Selection",
                 $"<p>You are about to toggle the Waitlist status for {studentGrid.SelectedDataItems.Count()} students.<br/>" +
                 "This means selected enrolled students will be set to waitlisted, and <br/>" +
                 "selected waitlisted students will be set to enrolled.</p>" +
                 "<p>Students are <strong>not</strong> automatically informed of this action.<br/> " +
                 "Please ensure that you inform them yourself.</p>" +
                 "<p>Do you wish to continue?"))
            {
                foreach (var e in Enrolments)
                {
                    if (studentGrid.SelectedDataItems.Contains(e))
                    {
                        e.IsWaitlisted = !e.IsWaitlisted;
                        if (e.Person.FinancialTo < selectedTerm.Year && !e.Person.IsMultiCampusVisitor)
                        {
                            msg = $"{e.Person.FullName} set Waitlisted because they are unfinancial.<br/>";
                            e.IsWaitlisted = true;
                        }
                        if (e.Person.DateCeased != null)
                        {
                            msg = $"{e.Person.FullName} set Waitlisted because they are ceased.<br/>";
                            e.IsWaitlisted = true;
                        }
                    }
                }
                using (var dbc = await U3Adbfactory.CreateDbContextAsync())
                {
                    foreach (var o in studentGrid.SelectedDataItems)
                    {
                        var e = o as Enrolment;
                        if (!e.Person.IsMultiCampusVisitor)
                        {
                            dbc.Update(e);
                        }
                    }
                    await dbc.SaveChangesAsync();
                }
                using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
                {
                    foreach (var o in studentGrid.SelectedDataItems)
                    {
                        var e = o as Enrolment;
                        if (e.Person.IsMultiCampusVisitor)
                        {
                            var mcE = await dbcT.MultiCampusEnrolment.FindAsync(e.ID);
                            mcE.IsWaitlisted = e.IsWaitlisted;
                            if (mcE != null) { dbcT.Update(mcE); }
                        }
                    }
                    await dbcT.SaveChangesAsync();
                }
            }
            studentGrid.ClearSelections();
            if (msg != string.Empty)
            {
                await messageBox.ShowOkOnlyAsync("Students Waitlisted", msg);
            }
        }
    }

    async Task<bool> IsMaxEnrolmentsExceeded()
    {
        var result = false;
        var newEnrolments = 0;
        var newWaitlisted = 0;
        foreach (var item in studentGrid.SelectedDataItems)
        {
            if (((Enrolment)item).IsWaitlisted) newEnrolments++; else newWaitlisted++;
        }
        var currentCount = EnrolmentsToSelectFrom.Count(x => !x.IsWaitlisted);
        var newCount = currentCount + newEnrolments - newWaitlisted;
        var maxCount = selectedCourse.MaximumStudents;
        if (currentCount + newEnrolments - newWaitlisted > maxCount)
        {
            var msg = $"This selection would result in <strong>{newCount} total enrolments</strong> " +
                        $"which is <strong>{newCount - maxCount}</strong> greater than the maximum allowed <strong>({maxCount} students)</strong>.</br>" +
                        "Contact your Course/Venues coordinator to increase the maximum.";
            await messageBox.ShowOkOnlyAsync("Maximum students exceeded", msg);
            result = true;
        }
        return result;
    }

    async Task OnDeleteEnrolments()
    {
        if (await AreEnrolmentsSelected())
        {
            if (await messageBox.ShowAsync("Delete Enrolment For Selection",
                 $"<p><strong>Deletion is permanent!</strong><p>You are about to delete enrolment for {studentGrid.SelectedDataItems.Count()} students.</p>" +
                 "</p><p>Although the student may re-enrol, you cannot undo this deletion.<br/>" +
                 "Students are <strong>not</strong> automatically informed of this action. " +
                 "Please ensure that you have informed them yourself.</p>" +
                 "<p>Do you wish to continue?"))
            {
                using (var dbc = await U3Adbfactory.CreateDbContextAsync())
                {
                    foreach (var o in studentGrid.SelectedDataItems)
                    {
                        var e = o as Enrolment;
                        if (!e.Person.IsMultiCampusVisitor)
                        {
                            e = await dbc.Enrolment.FindAsync(e.ID);
                            dbc.Remove(e);
                            Enrolments.Remove(o as Enrolment);
                        }
                    }
                    await dbc.SaveChangesAsync();
                }
                using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
                {
                    foreach (var o in studentGrid.SelectedDataItems)
                    {
                        var e = o as Enrolment;
                        if (e.Person.IsMultiCampusVisitor)
                        {
                            var mcE = await dbcT.MultiCampusEnrolment.FindAsync((e as Enrolment).ID);
                            if (mcE != null) { dbcT.Remove(mcE); }
                            Enrolments.Remove(o as Enrolment);
                        }
                    }
                    await dbcT.SaveChangesAsync();
                }
                await messageBox.ShowOkOnlyAsync("Selection deleted", $"{studentGrid.SelectedDataItems.Count()} enrolments have been deleted.");
            }
            studentGrid.ClearSelections();
            await OnMenuSelected(MenuOptions.ManageEnrolments);
        }
    }

    async Task<bool> AreEnrolmentsSelected()
    {
        var result = true;
        if (studentGrid?.SelectedDataItems == null || studentGrid?.SelectedDataItems.Count() <= 0)
        {
            await messageBox.ShowOkOnlyAsync("Select enrolment(s)", "You must select one or more enrolments before using this option.");
            result = false;
        }
        return result;
    }

    async Task OnMenuSelected(MenuOptions selection)
    {
        if (termAndCourse?.selectedTerm == null) return;
        if (termAndCourse?.selectedCourse == null) return;
        if (termAndCourse?.selectedClass == null) return;
        if (termAndCourse?.Enrolments == null) return;
        selectedTerm = termAndCourse.selectedTerm;
        selectedCourse = termAndCourse.selectedCourse;
        selectedClass = termAndCourse.selectedClass;
        selectedVenue = selectedClass.Venue;
        Enrolments = termAndCourse.Enrolments;
        menuSelection = selection;
        if (menuSelection == MenuOptions.ManageEnrolments &&
                !selectedTerm.IsClassAllocationFinalised)
        {
            await messageBox.ShowOkOnlyAsync("Manage Enrolments not available",
                                $"This option is not yet available for term {selectedTerm.TermNumber}<br/>" +
                                "It will become available when the term's enrolment preparation is finalised.");
            menuSelection = MenuOptions.Nothing;
            return;
        }
        Students.Clear();
        StudentsAndLeaders.Clear();
        foreach (var e in termAndCourse.EnrolmentsWithLeaders)
        {
            StudentsAndLeaders.Add(new StudentDetails()
            {
                ID = e.PersonID,
                IsVisitor = e.Person.IsMultiCampusVisitor,
                Person = e.Person,
                Enrolment = e,
                FirstName = e.Person.FirstName,
                LastName = e.Person.LastNameWithVisitorTag,
                FullName = e.Person.FullNameWithVisitorTag
            });
        }
        foreach (var e in Enrolments) { Students.Add(e.Person); }
        selectedStudent = null;
        EnrolmentsToSelectFrom = Enrolments; // set the default
        if (menuSelection == MenuOptions.Communicate)
        {
            if (await selectEnrolmentType.ShowAsync())
            {
                switch (selectEnrolmentType.EnrolmentType)
                {
                    case 1:
                        EnrolmentsToSelectFrom = Enrolments.Where(x => !x.IsWaitlisted).ToList();
                        break;
                    case 2:
                        EnrolmentsToSelectFrom = Enrolments.Where(x => x.IsWaitlisted).ToList();
                        break;
                    default:
                        EnrolmentsToSelectFrom = Enrolments;
                        break;
                }
            }
            else { menuSelection = MenuOptions.Nothing; }
            ;
        }
        if (menuSelection == MenuOptions.CancelClass)
        {
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                var now = (await localTime.GetLocalTimeAsync()).Date;
                ClassDates = (await BusinessRule.SelectableAttendanceDatesAsync(dbc,
                                    selectedTerm,
                                    selectedClass,
                                    now)).Where(x => x.Date >= now).ToList();
                if (ClassDates.Count > 0) { SelectedClassDate = ClassDates[0]; }
                else
                {
                    await messageBox.ShowOkOnlyAsync("There are no classes",
                                 "There are no classes in the current term to cancel.");
                }
            }
        }
        if (menuSelection == MenuOptions.AssignCourseClerk)
        {
            EnrolmentsToSelectFrom = Enrolments.Where(x => !x.IsWaitlisted).ToList();
        }
    }

    async Task GetStudentEmailAddressList()
    {
        if (!await AreEnrolmentsSelected()) return;
        if (studentGrid == null) return;
        if (studentGrid.SelectedDataItems == null) return;
        var delimiter = await localStorage.GetItemAsync<string>("emailDelimiter");
        if (string.IsNullOrWhiteSpace(delimiter)) { delimiter = ","; }
        string mailto = $"mailto:?subject=U3A Course: {selectedCourse.Name}&bcc=";
        foreach (var obj in studentGrid.SelectedDataItems)
        {
            var e = (Enrolment)obj;
            if (!string.IsNullOrWhiteSpace(e.Person.Email))
            {
                mailto += $"{e.Person.Email}{delimiter}";
            }
            if (!string.IsNullOrWhiteSpace(e.Person.CarerSendToEmail))
            {
                mailto += $"{e.Person.CarerSendToEmail}{delimiter}";
            }
        }
        try
        {
            NavigationManager.NavigateTo(HttpUtility.UrlDecode(mailto.Remove(mailto.Length - 1)));
        }
        catch (Exception ex)
        {
            await messageBox.ShowOkOnlyAsync("Error Activating Mail Client",
                            $@"<p>A mail client is required to process your email.</p>" +
                            $"<p>Error: {ex.Message}");
        }
    }
    async Task GetStudentSMSAddressList()
    {
        if (!await AreEnrolmentsSelected()) return;
        if (studentGrid == null) return;
        if (studentGrid.SelectedDataItems == null) return;
        var smsto = $"sms:";
        if (isApple)
        {
            smsto = $"sms:/open?addresses=";
        }
        var count = 0;
        foreach (var obj in studentGrid.SelectedDataItems)
        {
            var e = (Enrolment)obj;
            if (!e.Person.SMSOptOut)
            {
                if (!string.IsNullOrWhiteSpace(e.Person.AdjustedMobile))
                {
                    smsto += $"{e.Person.Mobile.Trim().Replace(" ", "")},";
                    count++;
                }
                if (!string.IsNullOrWhiteSpace(e.Person.CarerSendToMobile))
                {
                    smsto += $"{e.Person.CarerSendToMobile},";
                    count++;
                }
            }
        }
        try
        {
            if (count > 0) NavigationManager.NavigateTo(smsto.Remove(smsto.Length - 1));
        }
        catch (Exception ex)
        {
            await messageBox.ShowOkOnlyAsync("Error Activating Phone App",
                  $@"<p>A phone app is required to process your email.</p><p>Error: {ex.Message}");
        }
    }

    async Task GetMemberBadges()
    {
        if (!await AreEnrolmentsSelected()) return;
        if (studentGrid == null) return;
        if (studentGrid.SelectedDataItems == null) return;
        memberBadgeReport = new() { U3Adbfactory = U3Adbfactory };
        List<Guid> PrintID = new();
        foreach (var e in studentGrid.SelectedDataItems)
        {
            PrintID.Add(((Enrolment)e).PersonID);
        }
        memberBadgeReport.SetParameters(PrintID);
        badgeReportIsReady = true;
        StateHasChanged();
    }

    async Task OnSelectedStudentChanged(Person student)
    {
        selectedEnrolment = null;
        selectedStudent = student;
        if (selectedStudent != null)
        {
            selectedEnrolment = Enrolments.FirstOrDefault(x => x.PersonID == selectedStudent.ID);
            focusRequired = true;
        }
    }
    async Task OnSelectedStudentLookupChanged(StudentDetails student)
    {
        selectedEnrolment = null;
        selectedLookupStudent = student;
        if (student != null)
        {
            selectedEnrolment = termAndCourse.EnrolmentsWithLeaders.FirstOrDefault(x => x.PersonID == student.ID);
            focusRequired = true;
        }
    }

    async Task DoCancellation()
    {
        if (string.IsNullOrWhiteSpace(CancellationReason))
        {
            await messageBox.ShowOkOnlyAsync("No Reason!",
                                "You must provide a reason for the cancellation.");
        }
        else
        {
            var d = new DateTime(SelectedClassDate.Date.Year,
                                        SelectedClassDate.Date.Month,
                                        SelectedClassDate.Date.Day);
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                var cancel = new CancelClass()
                {
                    //Class = await dbc.Class.FindAsync( selectedClass.ID),
                    ClassID = selectedClass.ID,
                    StartDate = d,
                    EndDate = d.AddDays(1).AddSeconds(-1),
                    Reason = CancellationReason
                };
                await dbc.AddAsync(cancel);
                await dbc.SaveChangesAsync();
            }
            await messageBox.ShowOkOnlyAsync("Class Cancelled",
                            "Your class has been cancelled. Please notify your students and the membership office by SMS or email, thank you.");
        }
    }

    async Task OnCancel()
    {
        await ReturnToMenu(PortalMenuResult.MenuOptionCancelled);
    }

    void OnReportComplete()
    {
        badgeReportIsReady = false;
        menuSelection = MenuOptions.Nothing;
        StateHasChanged();
    }

    async Task ReturnToMenu(PortalMenuResult result)
    {
        if (menuSelection == MenuOptions.Nothing)
        {
            await OnSelectedOptionCompleted.InvokeAsync(result);
        }
        else menuSelection = MenuOptions.Nothing; //redisplay sub-menu
    }
    async Task OnTermAndCourseCancelled()
    {
        await ReturnToMenu(PortalMenuResult.MemberDetailsCompleted);
    }

    async Task OnSMS(string phoneNo)
    {
        var phone = HttpUtility.UrlEncode(phoneNo.Trim().Replace(" ", ""));
        string smsto = $"sms:{phone}";
        try
        {
            NavigationManager.NavigateTo(smsto, true);
        }
        catch (Exception ex)
        {
            await messageBox.ShowOkOnlyAsync("Error Activating SMS Client",
                            $@"<p>An SMS client (Phone) is required to process your request.</p>" +
                            $"<p>Error: {ex.Message}");
        }
    }

    async Task OnPhone(string phoneNo)
    {
        var phone = HttpUtility.UrlEncode(phoneNo.Trim().Replace(" ", ""));
        string phoneURL = $"tel:{phone}";
        try
        {
            NavigationManager.NavigateTo(phoneURL, true);
        }
        catch (Exception ex)
        {
            await messageBox.ShowOkOnlyAsync("Error Activating Phone",
                            $@"<p>A Phone is required to process your request.</p>" +
                            $"<p>Error: {ex.Message}");
        }
    }

}
