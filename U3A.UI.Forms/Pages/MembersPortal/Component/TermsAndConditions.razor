@namespace U3A.UI.Forms

@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isMobileLayout" />
<DxLayoutBreakpoint DeviceSize="DeviceSize.Small" @bind-IsActive="@isTabletLayout" />
<DxLayoutBreakpoint DeviceSize="DeviceSize.Medium" @bind-IsActive="@isTabletLayout" />


@if (isReady)
{
    <section class="card border-info alert-info w-100 p-1" hidden="@isHidden">
        <div class=@($"text-center p-2 {fontSizeCssClass}")>
            <button class="btn-close float-right" onclick="@onCloseButtonClick" />
            <strong>Terms &amp; Conditions</strong><br />@introduction
        </div>
        <div class="input-group">
            <DxButton Text="Click to view our T & C's" SizeMode="SizeMode.Small"
                      CssClass=@((isConfirmationRequired)
                  ? "flex-grow-1"
                  : "popup-button mx-auto flex-grow-0")
                      IconCssClass="bi bi-eyeglasses menu-icon icon-color pe-2"
                      Click="@(e => OnTandCClicked())"
                      RenderStyle="ButtonRenderStyle.Info"
                      RenderStyleMode="ButtonRenderStyleMode.Contained">
            </DxButton>
            <DxCheckBox CssClass="flex-grow-1 mx-1 mt-2 text-danger" hidden="@(!isConfirmationRequired)"
                        CheckedChanged="@(async (bool value) => await ConfirmationChanged(value))"
                        Alignment="CheckBoxContentAlignment.Right"
                        LabelPosition="LabelPosition.Left">
                I have read & agree with the Terms & Conditions
            </DxCheckBox>
        </div>
    </section>

    <DxWindow @ref=@detailsForm
              AllowResize="false"
              AllowDrag=false
              Context="windowContext"
              CloseOnEscape=true
              ShowCloseButton=true
              ShowFooter=true
              Scrollable=true
              CssClass=@windowCssClass
              HeaderText="Terms & Conditions">
        <BodyTextTemplate>
            <div class="card overflow-scroll">
                <div class="card-body">
                    @(new MarkupString(htmlText))
                </div>
            </div>
        </BodyTextTemplate>
        <FooterContentTemplate>
            <DxButton CssClass="popup-button" Text="Close" RenderStyle="ButtonRenderStyle.Primary" Click="onClick" />
        </FooterContentTemplate>
    </DxWindow>
}
<style>
    .mobile-device {
        width: 100vw !important;
    }

    .tablet-device {
        width: 80vw !important;
    }

    .other-device {
        width: 50vw !important;
    }

    .small-font {
        font-size: x-small !important;
    }

    .float-right {
        float: right;
    }
    .icon-color {
        color: white !important;
    }
</style>

@code {
    [Parameter] public bool RequireConfirmation { get; set; }
    [Parameter] public EventCallback<bool> OnConfirmationChanged { get; set; }
    [Parameter] public Person Participant { get; set; }

    [Parameter, EditorRequired] public SystemSettings? SystemSettings { get; set; }
    [Parameter] public bool IsEnrolmentNotice { get; set; }
    [Parameter] public EventCallback OnCollapsed { get; set; }

    DxWindow? detailsForm;
    string htmlText;
    bool isReady;
    bool isConfirmed;
    bool isMobileLayout;
    bool isTabletLayout;
    string windowCssClass;
    string introduction;
    string fontSizeCssClass;
    bool isConfirmationRequired;

    bool isHidden = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        isConfirmationRequired = false;
        if (SystemSettings != null && SystemSettings.TermsAndConditionsEnabled)
        {
            htmlText = SystemSettings.TermsAndConditionsHTML;
            introduction = (IsEnrolmentNotice)
                                ? $"By participation, you acknowledge and accept the {SystemSettings?.U3AGroup} terms and conditions of membership."
                                : $"By your fee payment, you acknowledge and accept the {SystemSettings?.U3AGroup} terms and conditions of membership.";
            fontSizeCssClass = (isMobileLayout) ? "small-font" : "";
            if (!SystemSettings.DoNotRequireTermsAndConditionsConfirmationOnFeePayment)
            {
                if (RequireConfirmation)
                {
                    if (Participant?.DateTermsLastAgreed != null)
                    {
                        isConfirmationRequired = Participant?.DateTermsLastAgreed?.AddDays(120) < DateTime.UtcNow;
                    }
                    else
                    {
                        isConfirmationRequired = true;
                    }
                }
            }
            isReady = true;
        }
        if (!isConfirmationRequired) { await OnConfirmationChanged.InvokeAsync(true); }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SystemSettings.DoNotRequireTermsAndConditionsConfirmationOnFeePayment)
        {
            RequireConfirmation = false;
            isConfirmed = true;
        }
        await base.OnParametersSetAsync();
    }

    async void OnTandCClicked()
    {
        windowCssClass = (isMobileLayout)
                            ? "mobile-device vh-100"
                            : (isTabletLayout)
                                ? "tablet-device vh-100"
                                : "other-device vh-100";
        await detailsForm.ShowAsync();
    }

    async void onClick()
    {
        await detailsForm.CloseAsync();
    }

    async Task onCloseButtonClick()
    {
        isHidden = true;
        InvokeAsync(StateHasChanged);
        await OnCollapsed.InvokeAsync();
    }

    async Task ConfirmationChanged(bool value)
    {
        if (value && Participant != null && isConfirmationRequired)
        {
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                var p = await dbc.Person.FindAsync(Participant.ID);
                p.DateTermsLastAgreed = DateTime.UtcNow;
                await dbc.SaveChangesAsync();
            }
        }
        await OnConfirmationChanged.InvokeAsync(value);
    }
}
