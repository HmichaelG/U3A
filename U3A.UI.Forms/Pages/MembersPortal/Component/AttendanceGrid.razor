@namespace U3A.UI.Forms
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IJSRuntime js
@inject WorkStation ws

<DxLayoutBreakpoint MaxWidth="768"
                    @bind-IsActive="@IsSmallLayout" />
@if (!IsReady) {
    <LoadingIndicator />
}
else {
    <div class="text-center">As at @(summaryDate.ToLongDateString())</div>
    <DxGrid @ref=@grid Data="@ClassAttendanceSummary" CssClass="grid-height" id="myGrid"
        ShowAllRows="true"
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        KeyFieldName="ID"
        ValidationEnabled="true"
        AllowSort=true
        ShowSearchBox=true
        AllowSelectRowByClick="false">
        <Columns>
            <DxGridDataColumn Caption="Name" FieldName="Person.FullName" />
            <DxGridDataColumn Caption=@((IsSmallLayout) ? " " : "Present")
                          FieldName="Present"
                          Width=@((IsSmallLayout) ? "2rem" : "6rem")
                          DisplayFormat="{0:F0}">
                <CellDisplayTemplate>
                    @{
                        <div class="text-success">@context.Value</div>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn Caption=@((IsSmallLayout) ? " " : "With Apology")
                          FieldName="AbsentWithApology"
                          Width=@((IsSmallLayout) ? "2rem" : "6rem")
                          DisplayFormat="{0:F0}" >
                <CellDisplayTemplate>
                    @{
                        <div class="text-warning">@context.Value</div>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn Caption=@((IsSmallLayout) ? " " : "W/out Apology")
                          FieldName="AbsentWithoutApology"
                          Width=@((IsSmallLayout) ? "2rem" : "6rem")
                          DisplayFormat="{0:F0}" >
                <CellDisplayTemplate>
                    @{
                        <div class="text-danger">@context.Value</div>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
        </Columns>
    </DxGrid>
    if (IsSmallLayout) {
        <div class="input-group text-center">
            <div class="alert-success text-dark flex-grow-1">Present</div>
            <div class="alert-warning text-dark flex-grow-1">With Apology</div>
            <div class="alert-danger text-dark flex-grow-1">W/out Apology</div>
        </div>

    }
}
<style>
    .grid-height {
        height: calc(100dvh - @(ws.UseTopMenu ? (loginState.IsAdminOnBehalfOfMember) ? "24rem" : "18rem" : "20rem"));
    }

</style>


@code {
    bool IsReady;

    [CascadingParameter]
    public LoginState loginState { get; set; }
    [Parameter]
    public SystemSettings? Settings { get; set; }
    [Parameter]
    public Term? SelectedTerm { get; set; }
    [Parameter]
    public Class? SelectedClass { get; set; }
    [Parameter]
    public LocalTime? LocalTime { get; set; }

    List<AttendClassSummary>? ClassAttendanceSummary;

    bool IsSmallLayout;
    int sequence = 1;
    DxGrid? grid;
    DateTime summaryDate;
    string gridHeight;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync()) {
            summaryDate = (await LocalTime.GetLocalDateAsync());
            ClassAttendanceSummary = await BusinessRule.GetClassAttendanceSummary(dbc, summaryDate, SelectedTerm, SelectedClass);
        }
        IsReady = true;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) { grid?.AutoFitColumnWidths(); }
        return base.OnAfterRenderAsync(firstRender);
    }

}