@namespace U3A.UI.Forms

@inject IJSRuntime js
@inject WorkStation ws
@inject IDbContextFactory<U3ADbContext> U3Adbfactory


<DxLayoutBreakpoint MaxWidth="1360" @bind-IsActive="@IsSmallLayout" />

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <div class="mt-3">
        <DxGrid @ref=@grid Data="@Enrolments" CssClass="student-grid-style" id="myGrid"
        ShowAllRows="true"
        ShowSearchBox=true
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        KeyFieldName="ID"
        ValidationEnabled="true"
        SelectionMode="GridSelectionMode.Multiple"
        AllowSelectRowByClick="false"
        UnboundColumnData="Grid_CustomUnboundColumnData"
        @bind-SelectedDataItems="SelectedDataItems">
            <Columns>
                <DxGridSelectionColumn Width="1rem" />
                @*                 <DxGridDataColumn Caption="#" Width="1rem" FieldName="Sequence"
                                  Visible="@(!IsManageEnrolmentsView)"
                                  UnboundType="GridUnboundColumnType.Integer" />
 *@                <DxGridDataColumn Caption="Waitlist?" FieldName="IsWaitlisted" Width="4rem"
                Visible="@IsManageEnrolmentsView" />
                <DxGridDataColumn Caption="Name" FieldName="Person.FullNameWithVisitorTag">
                    <CellDisplayTemplate>
                        @{
                            if (context.DataItem != null)
                            {
                                Enrolment e = (Enrolment)context.DataItem;
                                var isCourseClerk = e.IsCourseClerk;
                                var hasEmail = !e.Person.IsEmailSilent;
                                var hasMobile = !string.IsNullOrEmpty(e.Person.Mobile) && !e.Person.IsPhoneSilent && !e.Person.SMSOptOut;
                                var hasPhone = !string.IsNullOrEmpty(e.Person.HomePhone) && !e.Person.IsPhoneSilent;
                                var highlightcss = (isCourseClerk)
                                ? "alert-link text-accent"
                                : "";
                                var width = (IsSmallLayout) ? "col col-9" : "col col-12";
                                var css = $"{width} text-start {highlightcss}";
                                var emailcss = (hasEmail) ? "bi-envelope" : "";
                                var mobilecss = (hasMobile) ? "bi-phone" : "";
                                var phonecss = (hasPhone) ? "bi-telephone" : "";
                                <div class="input-group">
                                    <div class=@css>@context.Value</div>
                                    <div class=@($"col col-1 {emailcss} {highlightcss}") hidden="@(!IsSmallLayout)" />
                                    <div class=@($"col col-1 {mobilecss} {highlightcss}") hidden="@(!IsSmallLayout)" />
                                    <div class=@($"col col-1 {phonecss} {highlightcss}") hidden="@(!IsSmallLayout)" />
                                </div>
                            }
                        }
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn Caption="No-SMS" FieldName="Person.SMSOptOut" Visible="false"
                Width="3rem">
                </DxGridDataColumn>
                <DxGridDataColumn Caption="Vax?" FieldName="Person.VaxCertificateViewed"
                Width="3rem" Visible="@(Settings.RequireVaxCertificate && !IsSmallLayout)">
                </DxGridDataColumn>
                <DxGridDataColumn Caption="Enrolled"
                FieldName="DateEnrolled"
                Visible="!IsSmallLayout"
                Width="4rem" DisplayFormat="{0:dd/MM/yy}" />
                <DxGridDataColumn Caption="Fin-To"
                FieldName="Person.FinancialToBriefText"
                Visible="!IsSmallLayout"
                Width="4rem" />
                <DxGridDataColumn Caption="Email"
                Visible="!IsSmallLayout"
                FieldName="Person.Email" />
                <DxGridDataColumn Caption="Mobile"
                Visible="!IsSmallLayout"
                FieldName="Person.MobileOrSilent"
                Width="6rem" />
                <DxGridDataColumn Caption="Home"
                Visible="!IsSmallLayout"
                FieldName="Person.HomePhoneOrSilent"
                Width="6rem" />
                <DxGridDataColumn Caption="Due" Width="3rem" FieldName="Due"
                Visible="@(!IsSmallLayout && AreFeesPayable)"
                DisplayFormat="c2"
                UnboundType="GridUnboundColumnType.Decimal" />
            </Columns>
        </DxGrid>
        <p>
            @(SelectedDataItemsCount().ToString("f0"))
            students selected.
        </p>
    </div>
}
<style>
    .student-grid-style {
    height: calc(100dvh - @(ws.UseTopMenu ? (loginState.IsAdminOnBehalfOfMember) ? "22rem" : "20rem" : "20rem") );
    }

    .badge-size {
    font-size: 0.7rem !important;
    }

</style>


@code {
    bool IsReady;

    [CascadingParameter]
    public LoginState loginState { get; set; }
    [Parameter]
    public SystemSettings? Settings { get; set; }
    [Parameter]
    public List<Enrolment>? Enrolments { get; set; }
    [Parameter]
    public IReadOnlyList<object> SelectedDataItems { get; set; }
    [Parameter]
    public bool IsManageEnrolmentsView { get; set; }
    [Parameter]
    public double FooterHeight { get; set; } = 0.25;  // percent of remaining window height for footer

    bool IsSmallLayout;
    int sequence = 1;
    DxGrid? grid;
    string gridHeight = "100px";
    MemberFeeCalculationService service;
    Dictionary<Guid, decimal> FeeDue;
    bool AreFeesPayable = false;

    protected override async Task OnInitializedAsync()
    {
        sequence = 1;
        FeeDue = new Dictionary<Guid, decimal>();
        if (Enrolments != null && Enrolments.Count > 0)
        {
            var course = Enrolments.First().Course;
            AreFeesPayable = (course.HasTermFees || course.CourseFeePerYear > 0);
            if (AreFeesPayable)
            {
                foreach (var e in Enrolments)
                {
                    var person = e.Person;
                    service = new MemberFeeCalculationService();
                    var due = await service.CalculateFeeAsync(U3Adbfactory, person);
                    FeeDue.Add(person.ID, due);
                }
            }
        }
        IsReady = true;
        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        grid?.AutoFitColumnWidths();
        sequence = 1;
        return base.OnAfterRenderAsync(firstRender);
    }

    int SelectedDataItemsCount()
    {
        var result = 0;
        if (SelectedDataItems != null) result = SelectedDataItems.Count();
        return result;
    }

    async void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        if (e.FieldName == "Sequence")
        {
            e.Value = sequence++;
        }
        if (e.FieldName == "Due" && AreFeesPayable)
        {
            var person = ((Enrolment)e.DataItem).Person;
            var kvp = FeeDue.FirstOrDefault(x => x.Key == person.ID);
            e.Value = kvp.Value;
        }
    }

    public void ClearSelections()
    {
        if (grid != null)
        {
            grid.ClearSelection();
        }
    }
}