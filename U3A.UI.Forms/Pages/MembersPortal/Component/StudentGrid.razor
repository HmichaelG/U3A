@namespace U3A.UI.Forms

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory


<DxLayoutBreakpoint MaxWidth="768"
                    @bind-IsActive="@IsSmallLayout" />
@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <DxGrid @ref=@grid Data="@Enrolments" CssClass="grid-height" id="myGrid"
            ShowAllRows="true"
            ShowSearchBox=true
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            KeyFieldName="ID"
            ValidationEnabled="true"
            SelectionMode="GridSelectionMode.Multiple"
            AllowSelectRowByClick="false"
            UnboundColumnData="Grid_CustomUnboundColumnData"
            @bind-SelectedDataItems="SelectedDataItems">
        <Columns>
            <DxGridSelectionColumn Width="1rem" />
            <DxGridDataColumn Caption="#" Width="1rem" FieldName="Sequence"
                              Visible="@(!IsManageEnrolmentsView)"
                              UnboundType="GridUnboundColumnType.Integer" />
            <DxGridDataColumn Caption="Waitlist?" FieldName="IsWaitlisted" Width="4rem"
                              Visible="@IsManageEnrolmentsView" />
            <DxGridDataColumn Caption="Name" FieldName="Person.FullNameWithVisitorTag">
                <CellDisplayTemplate>
                    @{
                        if (context.DataItem != null)
                        {
                            Enrolment e = (Enrolment)context.DataItem;
                            var isCourseClerk = e.IsCourseClerk;
                            var hasEmail = !e.Person.IsEmailSilent;
                            var hasMobile = !e.Person.IsPhoneSilent && !e.Person.SMSOptOut;
                            var namecss = "col-8 text-start ";
                            var emailcss = (hasEmail) ? "col-2 bi-envelope" : "col-2";
                            var mobilecss = (hasMobile) ? "col-2 bi-phone" : "col-2";
                            var outerCss = "w-100";
                            if (isCourseClerk) outerCss += " badge badge-size bg-success text-white";
                            <div class="@outerCss">
                                <div class="input-group">
                                    <div class=@namecss>@context.Value</div>
                                    <div class=@mobilecss></div>
                                    <div class=@emailcss></div>
                                </div>
                            </div>
                        }
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn Caption="NoSMS" FieldName="Person.SMSOptOut"
                              Width="3rem">
            </DxGridDataColumn>
            <DxGridDataColumn Caption="Vax?" FieldName="Person.VaxCertificateViewed"
                              Width="3rem" Visible="@(Settings.RequireVaxCertificate && !IsSmallLayout)">
            </DxGridDataColumn>
            <DxGridDataColumn Caption="Enrolled"
                              FieldName="DateEnrolled"
                              Visible="!IsSmallLayout"
                              Width="4rem" DisplayFormat="{0:dd/MM/yy}" />
            <DxGridDataColumn Caption="Fin-To"
                              FieldName="Person.FinancialToBriefText"
                              Visible="!IsSmallLayout"
                              Width="4rem" />
            <DxGridDataColumn Caption="Mobile"
                              Visible="!IsSmallLayout"
                              FieldName="Person.MobileOrSilent"
                              Width="6rem" />
            <DxGridDataColumn Caption="Home"
                              Visible="!IsSmallLayout"
                              FieldName="Person.HomePhoneOrSilent"
                              Width="6rem" />
            <DxGridDataColumn Caption="Due" Width="3rem" FieldName="Due"
                              Visible="@(!IsSmallLayout && AreFeesPayable)"
                              DisplayFormat="c2"
                              UnboundType="GridUnboundColumnType.Decimal" />
        </Columns>
    </DxGrid>
    <p>
        @(SelectedDataItemsCount().ToString("f0"))
        students selected.
    </p>
}
<style>
    .grid-height {
        height: @gridHeight;
    }

    .badge-size {
        font-size: 0.7rem !important;
    }

</style>


@code {
    bool IsReady;

    [Parameter]
    public SystemSettings? Settings { get; set; }
    [Parameter]
    public List<Enrolment>? Enrolments { get; set; }
    [Parameter]
    public IReadOnlyList<object> SelectedDataItems { get; set; }
    [Parameter]
    public bool IsManageEnrolmentsView { get; set; }
    [Parameter]
    public double FooterHeight { get; set; } = 0.25;  // percent of remaining window height for footer

    bool IsSmallLayout;
    int sequence = 1;
    DxGrid? grid;
    string gridHeight = "100px";
    MemberFeeCalculationService service;
    Dictionary<Guid, decimal> FeeDue;
    bool AreFeesPayable = false;

    protected override async Task OnInitializedAsync()
    {
        sequence = 0;
        service = new MemberFeeCalculationService();
        FeeDue = new Dictionary<Guid, decimal>();
        if (Enrolments != null && Enrolments.Count > 0)
        {
            var course = Enrolments.First().Course;
            AreFeesPayable = (course.CourseFeePerTerm > 0 || course.CourseFeePerYear > 0);
            if (AreFeesPayable)
            {
                foreach (var e in Enrolments)
                {
                    var person = e.Person;
                    var due = await service.CalculateFeeAsync(U3Adbfactory, person);
                    FeeDue.Add(person.ID, due);
                }
            }
        }
        IsReady = true;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var newHeight = await Window.FitToRemainingHeight(js, "myGrid", gridHeight, FooterHeight);
        if (newHeight != gridHeight) { gridHeight = newHeight; InvokeAsync(StateHasChanged); }
        sequence = 1;
        await base.OnAfterRenderAsync(firstRender);
    }

    int SelectedDataItemsCount()
    {
        var result = 0;
        if (SelectedDataItems != null) result = SelectedDataItems.Count();
        return result;
    }

    async void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        if (e.FieldName == "Sequence")
        {
            e.Value = sequence++;
        }
        if (e.FieldName == "Due" && AreFeesPayable)
        {
            var person = ((Enrolment)e.DataItem).Person;
            var kvp = FeeDue.FirstOrDefault(x => x.Key == person.ID);
            e.Value = kvp.Value;
        }
    }

    public void ClearSelections() { grid.ClearSelection(); }
}