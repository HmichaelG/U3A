@inherits LayoutComponentBase

@namespace U3A.UI.Forms

@inject IJSRuntime js
@inject NavigationManager NavigationManager
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> tenantDbfactory
@inject TenantInfoService tenantService

@attribute [Authorize]

@if (!IsReady) {
    <LoadingIndicator />
}
else {
    <MessageBox @ref="@messageBox" />
    <Progress @ref="@progress" />

    <DxFormLayout CssClass="col col-12 m-auto mb-2">
        @if (Enabled) {

            <DxFormLayoutItem Caption="Term" ColSpanXs="12">
                <TermsComboBox Terms="@terms"
                               @bind-SelectedTerm="@selectedTerm"
                               @bind-SelectedTerm:after=@(async() => await SelectedTermChanged(selectedTerm)) />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Course" ColSpanMd="12">
                <DxComboBox Data="@courses" NullText="@nullCourseText"
                            Enabled="@Enabled"
                            SearchMode="ListSearchMode.AutoSearch"
                            ListRenderMode="ListRenderMode.Virtual"
                            TextFieldName="@nameof(Course.Name)"
                            Value="@selectedCourse"
                            ValueChanged="@((Course course) => SelectedCourseChanged(course))">
                    <DxListEditorColumn FieldName="@nameof(Course.ConversionID)"
                                Caption="No"
                                Width="25%" />
                    <DxListEditorColumn FieldName="@nameof(Course.Name)"
                                Caption="Course"
                                Width="75%" />
                </DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Class" ColSpanMd="12">
                <DxComboBox @ref="@ClassComboBox" Data="@classes" Enabled="@(Enabled && classComboEnabled)" NullText="@classComboNullText"
                            TextFieldName="@nameof(Class.ClassSummary)"
                            Value="@selectedClass"
                            ValueChanged="@((Class selectedClass) => SelectedClassChanged(selectedClass))" />
            </DxFormLayoutItem>
        }
        else {
            <div class="text-center col-12">
                @(new MarkupString($"{selectedTerm?.Name} {selectedCourse?.Name}<br/>{selectedClass?.ClassSummary}"))
            </div>
        }
    </DxFormLayout>
}
@code {
    [CascadingParameter]
    LoginState? loginState { get; set; }

    [Parameter]
    public bool Enabled { get; set; }
    [Parameter]
    public EventCallback<PortalMenuResult> OnTermAndCourseCancelled { get; set; }
    [Parameter]
    public Term? selectedTerm { get; set; }

    public Course? selectedCourse { get; set; }
    public Class? selectedClass { get; set; }
    public List<Enrolment>? Enrolments { get; set; }
    public List<Enrolment>? EnrolmentsWithLeaders { get; set; }
    string nullCourseText = "Processing ... please wait";

    bool IsReady;
    SystemSettings? settings;
    Person? leader;
    MessageBox? messageBox { get; set; }
    Progress? progress;

    private List<Term> terms { get; set; }

    private List<Course> courses { get; set; }

    private List<Class> classes { get; set; }

    private string classComboNullText;
    private bool classComboEnabled;
    private DxComboBox<Class, Class?> ClassComboBox;
    bool isLeader;

    protected override async Task OnInitializedAsync() {
        // wire up the data
        IsReady = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            using (var dbContext = await U3Adbfactory.CreateDbContextAsync()) {
                var localTime = new LocalTime(js);
                leader = loginState.SelectedPerson;
                settings = await dbContext.SystemSettings
                            .OrderBy(x => x.ID)
                            .FirstOrDefaultAsync();
                var today = await localTime.GetLocalDateAsync();
                selectedTerm = await BusinessRule.CurrentTermAsync(dbContext, today);
                if (selectedTerm == null) { selectedTerm = await BusinessRule.CurrentEnrolmentTermAsync(dbContext); }
                if (selectedTerm == null) { selectedTerm = await BusinessRule.NextTermAsync(dbContext, today); }
                terms = await BusinessRule.SelectableRelaxedTermsAsync(dbContext);
                isLeader = await BusinessRule.IsLeaderOrClerk(dbContext, leader, selectedTerm);
                if (!isLeader) {
                    await messageBox.ShowOkOnlyAsync("No Leader Role", "You have no leadership role in the current year.");
                    await ReturnToMenu();
                }
                else {
                    await GetLeadersCourses();
                    InvokeAsync(StateHasChanged);
                }
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetLeadersCourses() {
        if (leader != null && selectedTerm != null) {
            try {
                using (var dbContext = await U3Adbfactory.CreateDbContextAsync()) {
                    courses = await BusinessRule.SelectableCoursesForLeader(dbContext, selectedTerm, leader);
                }
                if (courses.Count <= 0) {
                    nullCourseText = $"The course(s) you lead have no classes in term {selectedTerm.TermNumber}.";
                    selectedCourse = null;
                    selectedClass = null;
                }
                else {
                    if (selectedCourse == null || (!courses.Contains(selectedCourse))) {
                        selectedCourse = courses.FirstOrDefault();
                    }
                    await SetupClasses();
                }
            }
            catch (Exception e) { await ReturnToMenu(); }
        }
    }


    async Task SelectedTermChanged(Term term) {
        selectedTerm = term;
        selectedCourse = null;
        selectedClass = null;
        await GetLeadersCourses();
    }

    async Task SelectedCourseChanged(Course course) {
        selectedCourse = course;
        selectedClass = null;
        await SetupClasses();
    }

    async Task SelectedClassChanged(Class Class) {
        selectedClass = Class;
        await GetEnrolments();
    }

    async Task SetupClasses() {
        if (selectedCourse == null) return;
        Guid personID = loginState.SelectedPerson.ID;
        classes = selectedCourse.Classes
                        .Where(x => x.LeaderID == personID 
                                    || x.Leader2ID == personID 
                                    || x.Leader3ID == personID)
                        .ToList();
        foreach (var c in selectedCourse.Classes)
        {
            foreach (var clerk in c.Clerks)
            {
                if (clerk.ID == personID) { classes.Add(c); }
            }            
        }
        if (selectedClass == null || !classes.Contains(selectedClass)) {
            selectedClass = classes?.FirstOrDefault();
        }
        if (selectedClass != null)
        {
            if (classes?.Count <= 1)
            {
                classComboEnabled = false;
                classComboNullText = selectedClass.ClassDetailWithoutVenue;
            }
            else
            {
                classComboEnabled = true;
                classComboNullText = null;
            }
            await GetEnrolments();
        }
    }

    async Task GetEnrolments() {
        if (selectedTerm == null) return;
        if (selectedCourse == null) return;
        if (selectedClass == null) return;
        var tenant = await tenantService.GetTenantIdentifierAsync();
        List<Enrolment> mcE = new();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync()) {
            using (var dbcT = await tenantDbfactory.CreateDbContextAsync())
            {                
                EnrolmentsWithLeaders = await BusinessRule.GetEnrolmentIncludeLeadersAsync(dbc, selectedCourse, selectedClass, selectedTerm);
                Enrolments = await BusinessRule.EditableEnrolmentsAsync(dbc, selectedTerm, selectedCourse, selectedClass);
                if (selectedCourse.CourseParticipationTypeID == (int)ParticipationType.SameParticipantsInAllClasses)
                {
                    mcE = await BusinessRule.GetMultiCampusEnrolmentsAsync(dbc, dbcT, tenant,selectedCourse.ID);
                }
                else {
                    mcE = await BusinessRule.GetMultiCampusEnrolmentsAsync(dbc, dbcT, tenant, selectedCourse.ID,selectedClass.ID);
                }
                EnrolmentsWithLeaders.AddRange(mcE);
                EnrolmentsWithLeaders = EnrolmentsWithLeaders.OrderBy(x => x.Person.FullNameAlphaKey).ToList();
                Enrolments.AddRange(mcE);
                Enrolments = Enrolments.OrderBy(x => x.Person.FullNameAlphaKey).ToList();
            }
        }
    }


    async Task ReturnToMenu() {
        await OnTermAndCourseCancelled.InvokeAsync();
    }

}