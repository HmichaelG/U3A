@inherits LayoutComponentBase

@layout BasicLayout
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInMgr
@inject IJSRuntime js
@implements IDisposable;

@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Identity
@using System.Text
@using U3A.Data

@attribute [Authorize]

@if (IsReady)
{
    <AntiforgeryToken />
    <Progress @ref=@progress />
    <div class="vw-100">
        <div class="px-2 col-12 px-sm-0 col-md-10 col-lg-6 mx-auto">
            <div class="text-center alert alert-success text-dark col-12">
                @welcomeText @classText
            </div>
            <DxAccordion ExpandMode="AccordionExpandMode.Single" CssClass="col col-12"
                         ExpandCollapseAction="AccordionExpandCollapseAction.HeaderClick">

                <Items>
                    @if (ShowEnrolmentSubMneu)
                    {
                        <DxAccordionItem Text="Manage your course enrolments">
                            <ContentTemplate>
                                <div class="py-1">
                                    <TermsAndConditions SystemSettings="settings" IsEnrolmentNotice=true OnCollapsed="@(() => InvokeAsync(StateHasChanged))" />
                                </div>
                                <DxButton Text="Request course enrolments" Context="ThisContext"
                                          IconCssClass="bi-mortarboard menu-icon me-3 h2"
                                          CssClass="col-12 mt-1"
                                          Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoRequestMemberEnrolment))"
                                          RenderStyle="ButtonRenderStyle.Primary"
                                          RenderStyleMode="ButtonRenderStyleMode.Outline">
                                </DxButton>
                                <DxButton Text="Withdraw from course enrolments" Context="ThisContext"
                                          IconCssClass="bi-trash menu-icon me-3 h2"
                                          CssClass="col-12 mt-1"
                                          Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoWithdrawMemberEnrolment))"
                                          RenderStyle="ButtonRenderStyle.Primary"
                                          RenderStyleMode="ButtonRenderStyleMode.Outline">
                                </DxButton>
                                <DxButton Text="Return to menu"
                                          IconCssClass="bi-door-closed menu-icon me-3 h2"
                                          CssClass="col-12 mt-1"
                                          Click="@(e => OnMenuSelected(e,PortalMenuSelection.ShowMenu))"
                                          RenderStyle="ButtonRenderStyle.Primary"
                                          RenderStyleMode="ButtonRenderStyleMode.Outline">
                                </DxButton>
                            </ContentTemplate>
                        </DxAccordionItem>
                    }
                    else
                    {
                        <DxAccordionItem Text="What's New" Expanded=false CssClass="text-info" IconCssClass="bi bi-emoji-smile">
                            <ContentTemplate>
                                <WhatsNew />
                            </ContentTemplate>
                        </DxAccordionItem>
                        <DxAccordionItem Text="Main Menu" Expanded=true>
                            <ContentTemplate>
                                @if (settings?.InMaintenanceTill != null)
                                {
                                    <div class="alert alert-info text-dark text-center">
                                        <h5>Member Portal Maintenance Mode</h5>
                                        <p>Access to the system is currently disabled while we perform important work on our database.</p>
                                        <p>@(new MarkupString($"We expect the system to resume normal operations on or after <br/><strong>{settings?.InMaintenanceTill.Value.ToString("dd-MMM-yyyy hh:mm tt")}</strong>.")) </p>
                                    </div>
                                }
                                else
                                {
                                    <DxButton Text="Select linked member"
                                              Visible="@(loginState.LinkedPeople.Count > 1)"
                                              IconCssClass="bi-people menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoSelectLinkedMember))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="Your membership details"
                                              IconCssClass="bi-person menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoMemberMaintenance))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="Your membership fees"
                                              IconCssClass="bi-coin menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoMemberPayment))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="View your course enrolments"
                                              IconCssClass="bi-award menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoViewMemberEnrolment))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="Manage your course enrolments"
                                              IconCssClass="bi-mortarboard menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoShowEnrolmentSubmenu))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="Class Sign In / Sign Out"
                                              IconCssClass="bi-alarm menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoSignInSignOut))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="On Leave? Please let us know"
                                              IconCssClass="bi-airplane menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoMemberLeave))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="What's on today?"
                                              IconCssClass="bi-clock menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoWhatsOn))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="Your Leadership role"
                                              IconCssClass="bi-person-video3 menu-icon me-3 h2"
                                              CssClass="col-12 mt-1"
                                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoShowLeaderMenu))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                }
                                @if (loginState.IsAdminOnBehalfOfMember)
                                {
                                        <DxButton Text="Return to Admin Portal"
                                                  IconCssClass="bi-door-closed menu-icon me-3 h2"
                                                  CssClass="col-12 my-1"
                                                  Click="@OnReturnHome"
                                                  RenderStyle="ButtonRenderStyle.Primary"
                                                  RenderStyleMode="ButtonRenderStyleMode.Outline">
                                        </DxButton>
                                }
                                else
                                {
                                    <form action="Account/Logout" @formname="logout" method="post">
                                        <AntiforgeryToken />
                                        <input type="hidden" name="ReturnUrl" value="~/" />
                                        <DxButton Text="Logout, when you're finished"
                                                  IconCssClass="bi-door-closed menu-icon me-3 h2"
                                                  CssClass="col-12 my-1"
                                                  SubmitFormOnClick=true
                                                  RenderStyle="ButtonRenderStyle.Primary"
                                                  RenderStyleMode="ButtonRenderStyleMode.Outline">
                                        </DxButton>
                                    </form>
                                }
                            </ContentTemplate>
                        </DxAccordionItem>

                        <DxAccordionItem Text="Linked Members">
                            <ContentTemplate>
                                <div class="text-center alert alert-info text-dark">
                                    <p>
                                        A <strong>linked member</strong> is one who shares your email address.
                                        It is mainly intended for your spouse or partner but might also
                                        be used for friends without access to a digital device.
                                    </p>
                                    <p>When you link a member, you assume responsibilty for payment of fees and course enrolment for that member.</p>
                                    <p><strong>Please do not share your password</strong></p>
                                </div>
                                <DxButton Text="Link a new member"
                                          IconCssClass="bi-person-plus menu-icon me-3 h2"
                                          CssClass="col-12 mb-1"
                                          Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoLinkNewMember))"
                                          RenderStyle="ButtonRenderStyle.Primary"
                                          RenderStyleMode="ButtonRenderStyleMode.Outline">
                                </DxButton>
                                <DxButton Text="Link an existing member"
                                          IconCssClass="bi-person-plus menu-icon me-3 h2"
                                          CssClass="col-12 mb-1"
                                          Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoLinkExistingMember))"
                                          RenderStyle="ButtonRenderStyle.Primary"
                                          RenderStyleMode="ButtonRenderStyleMode.Outline">
                                </DxButton>
                                <DxButton Text="Unlink a member"
                                          IconCssClass="bi-person-dash menu-icon me-3 h2"
                                          CssClass="col-12 mb-1"
                                          Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoUnlinkMember))"
                                          RenderStyle="ButtonRenderStyle.Primary"
                                          RenderStyleMode="ButtonRenderStyleMode.Outline">
                                </DxButton>
                            </ContentTemplate>
                        </DxAccordionItem>
                        @if (!loginState.IsAdminOnBehalfOfMember)
                        {
                            <DxAccordionItem Text="Manage Credentials">
                                <ContentTemplate>
                                    <DxButton Text="Change your email address"
                                              IconCssClass="bi-shield-check menu-icon me-3 h2"
                                              CssClass="col-12 mb-1"
                                              Click="@(e => OnChangeCredential(e,"Email"))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="Change your password"
                                              IconCssClass="bi-shield-lock menu-icon me-3 h2"
                                              CssClass="col-12 mb-1"
                                              Click="@(e => OnChangeCredential(e,"ChangePassword"))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                    <DxButton Text="Two-Factor authentication"
                                              IconCssClass="bi-shield-check menu-icon me-3 h2"
                                              CssClass="col-12 mb-1"
                                              Click="@(e => OnChangeCredential(e,"TwoFactorAuthentication"))"
                                              RenderStyle="ButtonRenderStyle.Primary"
                                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                                    </DxButton>
                                </ContentTemplate>
                            </DxAccordionItem>
                        }
                    }
                </Items>
            </DxAccordion>
            <p class="text-center">@($"There are {openCircuits} users logged in.")</p>
            <footer class="mt-2 col col-12 text-muted">
                <div align="center">
                    &copy; @(DateTime.Today.Year) - U3Admin.org.au
                    <a href="Public/Support">Click for support</a>
                </div>
            </footer>
        </div>
    </div>
    <style>
        table {
            table-layout: fixed;
        }

        .table {
            padding-bottom: 0;
            margin-bottom: 0;
        }

        tr {
            line-height: 0.33rem;
            min-height: 0.33rem;
            height: 0.33rem;
        }
    </style>
}
@code {
    [CascadingParameter(Name = "OpenCircuits")]
    public int openCircuits { get; set; }


    [CascadingParameter]
    public LoginState? loginState { get; set; }

    [CascadingParameter(Name = "QueryResult")]
    public string? QueryResult { get; set; }

    [Parameter]
    public EventCallback<PortalMenuSelection> OnMenuOptionSelected { get; set; }

    [Parameter, EditorRequired]
    public Term? CurrentTerm { get; set; }

    [Parameter, EditorRequired]
    public bool ShowEnrolmentSubMneu { get; set; }

    bool IsReady;
    SystemSettings? settings;
    MarkupString? message;
    MarkupString welcomeText;
    MarkupString? classText;
    MessageBox? messageBox;
    string? SuccessMsg = null;
    Progress? progress;
    private string? currentUrl;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            settings = await dbc.SystemSettings.AsNoTracking().OrderBy(x => x.ID).FirstOrDefaultAsync();
        }
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        IsReady = true;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupClassesToday();
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await SetupTitle();
    }

    async Task SetupTitle()
    {
        var email = loginState.LoginEmail;
        Person person;
        DateTime? openingTime = null;
        Term nextTerm = default;
        if (loginState.SelectedPerson != null)
        {
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                person = await dbc.Person.FindAsync(loginState.SelectedPerson.ID);
                nextTerm = await BusinessRule.GetNextTermAsync(dbc, CurrentTerm);
                //Special case: enrolment day
                openingTime = await BusinessRule.IsEnrolmentDayLockoutPeriod(dbc, TimezoneAdjustment.GetLocalTime().Date);
            }
            var welcome = $"Welcome <strong>{person.FullName}</strong>";
            if (person.IsLifeMember)
            {
                welcome += $"<br/>Life Member";
            }
            else if (person.FinancialTo >= CurrentTerm.Year)
            {
                welcome += $"<br/>Financial to: <strong>{person.FinancialToText}</strong>";
                var services = new MemberFeeCalculationService();
                decimal fee = await services.CalculateFeeAsync(U3Adbfactory, person);
                if (fee > 0) welcome += $" Fees due: <strong>{fee.ToString("c2")}</strong>";
            }
            else
            {
                welcome += $"<br/>Your <strong>{CurrentTerm.Year}</strong> membership fees are now due";
            }
            welcomeText = new MarkupString(welcome);
        }
        else
        {
            welcomeText = new MarkupString($"Welcome <strong>{loginState.LoginEmail}</strong>");
        }
        //
        if (CurrentTerm != null)
        {
            if (TimezoneAdjustment.GetLocalTime().Date > CurrentTerm.EndDate)
            {
                if (nextTerm != null)
                {
                    var sOpeningTime = nextTerm?.EnrolmentStartDate.ToString("dddd, dd-MMM-yyyy");
                    welcomeText = new MarkupString($@"<h6><strong>{nextTerm.Year} Term-{nextTerm.TermNumber}</strong> membership and course enrolments will open</br>{sOpeningTime}.</h6>");
                }
                else
                {
                    welcomeText = new MarkupString(@"<h6>Membership renewal and course enrolments are currenlty closed.</h6>");
                }
            }

            // The day before new year enrolment day
            if (openingTime != null)
            {
                var sOpeningTime = openingTime?.ToString("ddd dd-MMM-yy hh:mm tt");
                welcomeText = new MarkupString($@"<h6><strong>{CurrentTerm.Year}</strong> membership and course enrolments will open</br>{sOpeningTime}.</h6>");
            }
        }
    }

    async Task SetupClassesToday()
    {
        string delTextStart;
        string delTextEnd;
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            settings = await dbc.SystemSettings.OrderBy(x => x.ID).FirstOrDefaultAsync();
            classText = null;
            var classesToday = await BusinessRule.GetMemberClassesToday(dbc, loginState.SelectedPerson, TimezoneAdjustment.GetLocalTime().Date);
            if (classesToday?.Count > 0)
            {
                var txt = new System.Text.StringBuilder();
                txt.AppendLine("<table class='table'>");
                txt.AppendLine("<thead><tr><td colspan='5' class='h6'>Today's Schedule</td></tr></thead>");
                txt.AppendLine("<tbody>");
                foreach (var item in classesToday)
                {
                    delTextStart = (item.IsCancelled) ? "<del>" : "";
                    delTextEnd = (item.IsCancelled) ? "</del>" : "";
                    txt.AppendLine("<tr>");
                    txt.AppendLine($"<th scope='row' class='text-start text-truncate'>{item.StartTime}</th>");
                    txt.AppendLine($"<td colspan=4 class='text-start'>{delTextStart}{item.Name}{delTextEnd}</td>");
                    txt.AppendLine("<tr>");
                }
                txt.AppendLine("</tbody>");
                txt.AppendLine("</table>");
                classText = new MarkupString(txt.ToString());
                await SetupTitle();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    void OnChangeEmail(MouseEventArgs e)
    {
        OnChangeCredential(e, "Email");
    }

    void OnChangeCredential(MouseEventArgs e, string page)
    {
        NavigationManager.NavigateTo("Account/Manage/" + page, true);
    }

    void OnReturnHome() => NavigationManager.NavigateTo("/AdminMemberPortal", true);

    async Task OnMenuSelected(MouseEventArgs e, PortalMenuSelection selection)
    {
        await OnMenuOptionSelected.InvokeAsync(selection);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
