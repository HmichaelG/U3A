@attribute [Authorize]

@inject ILogger<MemberPayment> Logger
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject TenantInfoService tenantService
@inject NavigationManager navMan


@implements IDisposable

@using Eway.Rapid
@using Eway.Rapid.Abstractions
@using Eway.Rapid.Abstractions.Request
@using Eway.Rapid.Abstractions.Response
@using Eway.Rapid.Abstractions.Models
@using Eway.Rapid.Abstractions.Interfaces
@using Microsoft.Extensions.Logging;



@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <DxLayoutBreakpoint MinWidth="1200"
                        @bind-IsActive="@IsSmallLayout" />

    <MessageBox @ref="@messageBox" />

    <Progress @ref="@progressBar" />

    <div class="col col-12 col-md-6 mx-auto">
        <DxLoadingPanel @bind-Visible="IsProcessing"
                        IsContentBlocked="true"
                        ApplyBackgroundShading="true"
                        IndicatorAreaVisible="false"
                        Text="Calculating fees due...">

            @switch (menuSelection)
            {
                case PortalMenuSelection.DoMemberPaymentPreamble:
                    <DxFormLayoutGroup Caption="@($"Membership Fees for: {loginState.SelectedPerson.FullName}")" HeaderCssClass="h4">
                        @if (showFeesDueToggle)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th scope="col">Description</th>
                                        <th scope="col" style="text-align: right">Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var fee in memberFees)
                                    {
                                        <tr>
                                            <td>@fee.Description</td>
                                            <td style="text-align: right">@(fee.Amount.ToString("c2"))</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div class="px-2 pt-2">
                                <div class="h6">It's your choice!</div>
                                <ul>
                                    <li><strong>Secure Online Payment</strong> is safe, fast and reliable. It is the recommended method of payment.</li>
                                    <li><strong>Direct Bank Payment</strong> is much slower due to additional reconciliation procedures required by our volunteer staff.</li>
                                </ul>
                            </div>
                        }
                        <div class="m-auto">
                            <TermsAndConditions RequireConfirmation="true" 
                                                Participant="@loginState?.SelectedPerson"
                                                OnConfirmationChanged="@((bool value) => areTermsConfirmed = value)"
                                                SystemSettings="@settings"
                                                OnCollapsed="@(() => InvokeAsync(StateHasChanged))" />
                        </div>
                    </DxFormLayoutGroup>
                    @if (!string.IsNullOrWhiteSpace(OnlineErrorMessage))
                    {
                        <div class="alert alert-warning text-dark text-center">
                            @OnlineErrorMessage
                        </div>
                    }
                    <DxButton Text="@AmountDueText"
                              CssClass="col-12 my-2"
                              Click="@(e => DoShowFeesDue())"
                              RenderStyle="ButtonRenderStyle.Light"
                              RenderStyleMode="ButtonRenderStyleMode.Contained">
                    </DxButton>

                    <DxFormLayoutGroup Visible=@(availablePayments.Count() > 0)
                                       Caption="Select your payment"
                                       ColSpanMd="12" CssClass="py-2">
                        <DxRadioGroup Items="@availablePayments" CssClass="pt-2 px-4"
                                      TextFieldName="Description"
                                      @bind-Value=@selectedPaymentType />
                    </DxFormLayoutGroup>

                    <DxButton Text="@((isOnlinePaymentEnabled) ? "Pay by Secure Online Payment" : "Online Payment is not currently available" )"
                              Enabled="@isOnlinePaymentEnabled"
                              IconCssClass="bi-credit-card me-1"
                              CssClass="col-12 my-1"
                              Click="@(e => OnPayOnline(e))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    <DxButton Text="Pay by Direct Bank Payment"
                              IconCssClass="bi-bank me-1"
                              CssClass="col-12 my-1"
                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoMemberPaymentDirectDebit))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    break;

                case PortalMenuSelection.DoMemberPaymentDirectDebit:
                    <DxFormLayoutGroup Caption="Direct Bank Payment" HeaderCssClass="h4">
                        <div class="p-2">
                            <div class="h5">Payment Instruction</div>
                            <p>Please create a payment using your banking software with the following detail... </p>
                            <div class="row">
                                <div class="col col-5"><strong>Amount Due:</strong></div>
                                <div class="col col-7">@feeAsString</div>
                            </div>
                            <div class="row">
                                <div class="col col-5"><strong>A/cc Name:</strong></div>
                                <div class="col col-7">@settings.U3AGroup</div>
                            </div>
                            <div class="row">
                                <div class="col col-5"><strong>A/cc BSB:</strong></div>
                                <div class="col col-7">@settings.BankBSB</div>
                            </div>
                            <div class="row">
                                <div class="col col-5"><strong>A/cc No:</strong></div>
                                <div class="col col-7">@settings.BankAccountNo</div>
                            </div>
                            <div class="row">
                                <div class="col col-5"><strong>Description:</strong></div>
                                <div class="col col-7">@($"{loginState.SelectedPerson.FirstAndLastName} {term.Year}")</div>
                            </div>
                            <br />
                            <p align="center" class="alert alert-info text-dark">
                                <em>
                                    <strong>Please Note:</strong><br>It is vital that the direct payment be completed with the above detail exactly as shown.
                                    Doing otherwise will incur unnecessary work for our volunteer staff and delay finalising your payment in our systems.<br />
                                    Please allow up to 5 working days to clear your payment.<br />
                                    <strong>Pay exactly the amount shown.</strong>
                                </em>
                            </p>
                        </div>
                    </DxFormLayoutGroup>
                    <DxButton Text="Changed your mind? Let's pay online"
                              IconCssClass="bi-emoji-smile me-1"
                              CssClass="col-12 my-1"
                              Click="@(e => OnMenuSelected(e,PortalMenuSelection.DoMemberPaymentPreamble))"
                              RenderStyle="ButtonRenderStyle.Primary"
                              RenderStyleMode="ButtonRenderStyleMode.Outline">
                    </DxButton>
                    break;
            }

            <DxButton Text="Return to menu"
                      IconCssClass="bi-door-closed me-1"
                      CssClass="col-12 my-1"
                      Click="@(e => OnCancel())"
                      RenderStyle="ButtonRenderStyle.Primary"
                      RenderStyleMode="ButtonRenderStyleMode.Outline">
            </DxButton>
        </DxLoadingPanel>
    </div>

}

@code {

    [CascadingParameter(Name = "QueryResult")]
    string? QueryResult { get; set; }

    [CascadingParameter]
    LoginState loginState { get; set; }

    [Parameter]
    public EventCallback<PortalMenuResult> OnSelectedOptionCompleted { get; set; }

    public bool IsOnlinePaymentFinalised;
    bool isOnlinePaymentEnabled;

    U3ADbContext? dbc { get; set; }

    bool IsReady = false;
    bool areTermsConfirmed;
    bool IsSmallLayout;
    bool showFeesDueToggle;
    SystemSettings? settings;
    Term? term;
    string Title;
    string AmountDueText = "Processing ...";
    PortalMenuSelection menuSelection;
    MessageBox? messageBox;
    Progress progressBar;
    MemberFeeCalculationService feeService;
    List<MemberFee> memberFees = new List<MemberFee>();
    List<MemberPaymentAvailable> availablePayments = new();
    MemberPaymentAvailable selectedPaymentType;
    string clickText = "Click here for details.";
    bool IsProcessing;
    string OnlineErrorMessage;
    string feeAsString;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        feeService = new MemberFeeCalculationService();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            availablePayments = await feeService.GetAvailableMemberPaymentsAsync(dbc, loginState?.SelectedPerson);
            if (availablePayments.Count() > 0) selectedPaymentType = availablePayments.First();
            term = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
            if (term == null) term = await BusinessRule.CurrentTermAsync(dbc);
            settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        }
        await CalculateFeeAsync();
        Title = settings?.U3AGroup;
        menuSelection = PortalMenuSelection.DoMemberPaymentPreamble;
        var tInfo = await tenantService.GetTenantInfoAsync();
        isOnlinePaymentEnabled = (!string.IsNullOrWhiteSpace(tInfo.EwayAPIKey));
        IsReady = true;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                // Process Eway response, if any
                bool hasUnprocessedPayment = await BusinessRule.HasUnprocessedOnlinePayment(dbc, loginState.SelectedPerson);
                if (hasUnprocessedPayment)
                {
                    FinaliseEwayPayment();
                }
                //Calculate fees
                await CalculateFees();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task CalculateFees()
    {
        decimal fee = await CalculateFeeAsync();
        int billingYear = feeService.BillingYear;
        var payType = "fees payable";
        if (fee < 0)
        {
            fee = Math.Abs(fee);
            payType = "account credit";
        }
        AmountDueText = $"{billingYear} {payType} is: {fee.ToString("c2")}. {clickText}";
        if (loginState.IsAdminOnBehalfOfMember) await DoShowFeesDue();
        IsProcessing = false;
        StateHasChanged();
    }

    async Task DoShowFeesDue()
    {
        if (!showFeesDueToggle)
        {
            decimal fee = await CalculateFeeAsync();
            memberFees = feeService.GetMemberFees(loginState.SelectedPerson.ID);
            if (AmountDueText.EndsWith(clickText)) AmountDueText = AmountDueText.Replace(clickText, "");
            showFeesDueToggle = true;
        }
        else
        {
            if (!AmountDueText.EndsWith(clickText)) AmountDueText += clickText;
            showFeesDueToggle = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    async Task OnMenuSelected(MouseEventArgs e, PortalMenuSelection selection)
    {
        if (!await AreThereFeesToBePaid()) return;
        if (!await AreTermsConfirmed()) return;
        menuSelection = selection;
        StateHasChanged();
    }

    async Task ReturnToMenu(PortalMenuResult result)
    {
        await OnSelectedOptionCompleted.InvokeAsync(result);
    }

    async Task OnCancel()
    {
        if (loginState.SelectedPerson != null)
        {
            await ReturnToMenu(PortalMenuResult.MenuOptionCancelled);
        }
        else
        {
            navMan.NavigateTo("Identity/Account/Logout", true);
        }
    }

    string GetFeeAsString(decimal fullFee)
    {
        decimal result = (selectedPaymentType == null) ? fullFee : selectedPaymentType.Amount;
        return result.ToString("c2");
    }

    async Task<decimal> CalculateFeeAsync()
    {
        decimal result = await feeService.CalculateFeeAsync(U3Adbfactory, loginState.SelectedPerson, term);
        feeAsString = GetFeeAsString(result);
        return result;
    }

    async Task<bool> AreTermsConfirmed()
    {
        if (!areTermsConfirmed)
        {
            await messageBox.ShowOkOnlyAsync("Confirm Terms & Conditions", "Please confirm you have read and agree to our terms & conditions.");
        }
        return areTermsConfirmed;
    }

    async Task OnPayOnline(MouseEventArgs e)
    {
        if (!await AreThereFeesToBePaid()) return;
        if (!await IsAdminOnU3ADesktop()) return;
        if (!await AreTermsConfirmed()) return;
        IsProcessing = true;
        InvokeAsync(StateHasChanged);
        string email = "";
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            try
            {
                var paymentService = new EwayPaymentService(dbc);
                email = (!string.IsNullOrWhiteSpace(loginState.LoginEmail))
                                ? loginState.LoginEmail
                                : loginState.SelectedPerson.Email;
                decimal fee = (selectedPaymentType == null)
                            ? await CalculateFeeAsync()
                            : selectedPaymentType.Amount;
                int? termsPaid = (selectedPaymentType == null)
                                    ? null
                                    : selectedPaymentType.TermsPaid;
                var paymentURL = await paymentService.CreatePayment(dbc,
                                                loginState.AdminEmail,
                                                navMan.BaseUri,
                                                loginState.SelectedPerson,
                                                email,
                                                loginState.SelectedPerson.PersonIdentity,
                                                $"{settings.U3AGroup} {term.Year} membership fees",
                                                term.Name,
                                                fee, termsPaid);
                if (paymentURL != null) { navMan.NavigateTo(paymentURL); }
            }
            catch (EwayRequestException ex)
            {
                IsProcessing = false;
                await InvokeAsync(StateHasChanged);
                var msg = $@"<p>An exception has occurred attempting to connect to the Online Payment Gateway (Eway).<br/>
                            The error message was...<br/><br/>
    {ex.Message}<br/><br/>
                            Please contact your U3A administration for resolution.<br/>
                            We appreciate your understanding in this matter.</p>";
                await messageBox.ShowAsync("Payment Gateway Connection Issue", msg);
                await OnCancel();
            }
            catch (Exception ex)
            {
                IsProcessing = false;
                await InvokeAsync(StateHasChanged);
                var msg = "<p>An exception has occurred attempting to connect to the Online Payment Gateway (Eway).<br/>" +
                            "We suggest you wait a little and try again later.<br/>" +
                            "If the issue persists, please contact your administration.<p>" +
                            "<p>Error details are...<br/>" +
                            $"{ex.Message}</p>" +
                            "<p>We appreciate your understanding in this matter.</p>";
                await messageBox.ShowAsync("Payment Gateway Connection Issue", msg);
            }
        }
    }

    async Task<bool> IsAdminOnU3ADesktop()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            if (dbc.TenantInfo.UseEwayTestEnviroment) return true;
        }
        if (!loginState.IsAdminOnBehalfOfMember) return true;
        bool result = false;
        var value = await js.InvokeAsync<string?>("GetSessionState", "isU3ADesktop");
        if (value != null) result = true;
        if (!result)
        {
            await messageBox.ShowOkOnlyAsync("Not U3A Desktop",
                "Our security policy requires that payments made on behalf of another member must be processed via the <strong>U3A Desktop</strong> application.");
        }
        return result;
    }

    async Task ProcessEmail(String error, String email, Person person)
    {
        string sendEmailAddress = "";
        string sendEmailDisplayName = "";
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            var emailSender = await EmailFactory.GetEmailSenderAsync(dbc);
            var settings = await dbc.SystemSettings.OrderBy(x => x.ID)
                            .FirstOrDefaultAsync() ?? throw new ArgumentNullException(nameof(SystemSettings));
            if (settings != null)
            {
                sendEmailAddress = settings.SendEmailAddesss;
                sendEmailDisplayName = settings.SendEmailDisplayName;
            }
            if (string.IsNullOrWhiteSpace(sendEmailAddress)) { return; }
            var msg = $@"<p>Email Address: {email}<br/>
                         Member: {person.FullName}<br/><br/>
                         Error: {error}";
            await emailSender.SendEmailAsync(
                            EmailType.Transactional,
                            "system@u3admin.org.au",
                            "System Postman",
                            sendEmailAddress,
                            sendEmailDisplayName,
                            $"HEADS UP!!! Eway Payment issue",
                            msg,
                            string.Empty
                            );
        }
    }

    async Task FinaliseEwayPayment()
    {
        var service = new EwayPaymentService();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            var payment = await BusinessRule.GetUnprocessedOnlinePayment(dbc, loginState.SelectedPerson);
            if (payment == null) { return; } // payment cancelled by user
            try
            {
                IsProcessing = true;
                InvokeAsync(StateHasChanged);
                term = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
                if (term == null) term = await BusinessRule.CurrentTermAsync(dbc);
                await service.FinaliseEwayPyamentAsync(dbc, payment, term);
                selectedPaymentType = null;
                availablePayments.Clear();
                await CalculateFees();
            }
            catch (EwayResponseException ex)
            {
                decimal fee = await CalculateFeeAsync();
                if (fee > 0) { OnlineErrorMessage = ex.Message; }
            }
            catch (Exception ex)
            {
                OnlineErrorMessage = ex.Message;
            }
            finally
            {
                IsProcessing = false;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    async Task<bool> AreThereFeesToBePaid()
    {
        bool result = true;
        var fee = await CalculateFeeAsync();
        if (fee == 0)
        {
            await messageBox.ShowOkOnlyAsync("There's nothing to pay", "Your membership fees are fully paid.");
            result = false;
        }
        if (fee < 0)
        {
            await messageBox.ShowOkOnlyAsync("There's nothing to pay",
                    $"Your membership fees are {Math.Abs(fee).ToString("c2")} in credit." +
                    "<br/>You may be entitled to a refund. Please request it from the office.");
            result = false;
        }
        return result;
    }
    public void Dispose()
    {
        dbc?.Dispose();
    }

}