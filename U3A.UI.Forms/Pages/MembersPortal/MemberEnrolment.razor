@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService
@inject IJSRuntime js
@inject NavigationManager NavMan
@inject IConfiguration config
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILogger<MemberEnrolment> Logger

@using System.Web
@using Microsoft.AspNetCore.Builder
@using Microsoft.Extensions.Configuration;
@using System.Text.RegularExpressions;
@using Microsoft.Extensions.Logging
@using System.Diagnostics

@attribute [Authorize]

<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@IsMobileLayout" />

@if (!IsReady)
{
    if (!IsPreview)
    {
        <LoadingIndicator />
    }
}
else
{
    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />
    <Progress @ref="ProgressBar" PopupVisible=@isProgressVisible />
    <MessageBox @ref="messageBoxWithClassDetail">
        <TextTemplate>
            <ClassDetail Class="@selectedClass" FilterText="@filterText" />
        </TextTemplate>
    </MessageBox>

    <MessageBox @ref="messageBox" />
    <div class=@((IsPreview)
     ? "col-10 mx-auto"
     : "col col-md-11 col-lg-8 mx-auto")>
        <div class="h6 pt-2 col-12" align="center">
            @term?.TermSummary
        </div>
        @if (isNotInEnrolmentPeriod)
        {
            <p class="alert alert-danger text-dark col-12 my-2" align="center">
                @(enrolmentLockoutText)
            </p>
        }
        <div class="list-detail mx-auto" hidden=@(isListboxShowingSummary || IsReadOnly)>
            <div class="d-flex">
                <DxTextBox @ref=@filterTextBox
                           CssClass="filter-text-box me-2 flex-grow-1"
                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                           Text="@filterText"
                           TextChanged="@(async (newValue) => await OnFilterTextChanged(newValue))"
                           BindValueMode="BindValueMode.OnInput"
                           InputDelay="500"
                           NullText="Search">
                </DxTextBox>
                <DxComboBox Data="@ReportStyleList" CssClass="combo-list-box"
                            Value="@reportStyle"
                            ValueChanged="@((ReportStyle style) => OnReportStyleChanged(style))"
                            TextFieldName="@nameof(ReportStyleWrapper.ListText)"
                            ValueFieldName="@nameof(ReportStyleWrapper.Type)" />
            </div>
            <DxTabs @ref="dxTabs" TabClick="@OnTabClick" CssClass="">
                <DxTabPage Text="All" />
                <DxTabPage Text="Mon" />
                <DxTabPage Text="Tue" />
                <DxTabPage Text="Wed" />
                <DxTabPage Text="Thu" />
                <DxTabPage Text="Fri" />
                <DxTabPage Text="W/E" />
            </DxTabs>
        </div>
        <DxGrid Data="@ListboxData" id="listBox" @ref=@listGrid
                KeyFieldName="ID"
                ShowAllRows=true
                VirtualScrollingEnabled=true
                AllowSelectRowByClick=false
                AllowGroup=false
                AllowSort=false
                PagerVisible=false
                CssClass="mt-1 listbox-scroll">
            <Columns>
                <DxGridDataColumn Width="100%">
                    <HeaderCaptionTemplate>
                        <div class="d-flex my-auto">
                            @if (IsEnrolmentRequestView)
                            {
                                <div class="flex-grow-1" />
                                <DxButton @ref=@listboxViewButton Text="@ListboxViewButtonText"
                                          SizeMode="SizeMode.Small"
                                          RenderStyle="ButtonRenderStyle.Primary"
                                          Click="ToggleListboxViewButton" CssClass="flex-grow-0" />
                            }
                        </div>
                    </HeaderCaptionTemplate>
                    <CellDisplayTemplate>
                        @{
                            var c = (Class)context.DataItem;

                            @if (reportStyle == ReportStyle.Brief && !isListboxShowingSummary)
                            {
                                <div class="mx-1 d-flex">
                                    <div class="flex-grow-1 @((IsEnrolmentRequestView && c.IsSelected) ? "bg-primary-subtle" : "")">
                                        @(HighlightSearchText($"{c.OnDay.Day.Trim()}: {c.Course.NameAndNumber}"))
                                        <span>
                                            @(
                                            (!string.IsNullOrWhiteSpace(c.Course.OfferedBy)
                                            ? $" | {c.Course.OfferedBy}" : "")
                                                )
                                        </span>
                                    </div>
                                    @if (IsEnrolmentRequestView)
                                    {
                                        <DxButton Text="@GetBriefStatus(c)" CssClass="flex-grow-0"
                                                  SizeMode="SizeMode.Small"
                                                  IconCssClass="@($"bi {selectButtonIcon}")"
                                                  RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                  Click="@(async () => await SelectedDataItemChanged(c))" />
                                    }
                                </div>
                            }
                            else
                            {
                                <DxFormLayout CssClass="mx-auto list-detail">
                                    <DxFormLayoutGroup Context="thatContext" HeaderCssClass="h5">
                                        <CaptionTemplate>
                                            <div class="mx-1 d-flex w-100 my-auto">
                                                <div class="flex-gro-1 selected-box @((IsEnrolmentRequestView && c.IsSelected) ? "bg-primary-subtle" : "")">
                                                    @(HighlightSearchText($"{c.OnDay.Day.Trim()}: {c.Course.NameAndNumber}"))
                                                </div>
                                            </div>
                                        </CaptionTemplate>
                                        <Items>
                                            <div class="mt-2 d-flex justify-content-center w-100">
                                            @if (IsReadOnly)
                                                {
                                                    <div class="h6 text-primary">@GetStatus(c)</div>
                                                }
                                                else
                                                {
                                                    <DxButton Text="@GetStatus(c)"
                                                    SizeMode="SizeMode.Large"
                                                    IconCssClass="@($"bi {selectButtonIcon}")"
                                                    RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                    Click="@(async () => await SelectedDataItemChanged(c))" />
                                                }
                                            </div>
                                            @if (!string.IsNullOrEmpty(c.Course.OfferedBy))
                                            {
                                                <div class="row px-2 px-md-3 col-12">
                                                    <div class="text-info col-12 text-center h6">@($"Offered By: {c.Course.OfferedBy}")</div>
                                                </div>
                                            }
                                            <div class="w-100 text-center">
                                                @if (c.Course.CourseFeePerYear != 0)
                                                {
                                                    <div class="text-info"><strong>Course Fee: @($"{c.Course.CourseFeePerYear.ToString("c2")} {c.Course.CourseFeePerYearDescription}")</strong></div>
                                                }
                                                @if (c.Course.CourseFeePerTerm != 0)
                                                {
                                                    <div class="text-info"><strong>Fee / Term: @($"{c.Course.CourseFeePerTerm.ToString("c2")} {c.Course.CourseFeePerTermDescription}")</strong></div>
                                                }
                                            </div>

                                            <div class="py-1 px-1 col-12" hidden="@isListboxShowingSummary">
                                                <em style="white-space: pre-line">
                                                    @(HighlightSearchText(c.Course.Description))
                                                </em>
                                            </div>

                                            @if (reportStyle == ReportStyle.Detail || isListboxShowingSummary)
                                            {
                                                <div class="col-small ps-1"><strong>Offered:</strong></div>
                                                <div class="col-large">@c.OfferedSummary</div>
                                                <div class="col-small ps-1"><strong>Type:</strong></div>
                                                <div class="col-large">@HighlightSearchText(c.Course.CourseType.Name)</div>
                                                <div class="col-small ps-1"><strong>Class:</strong></div>
                                                <div class="col-large">@(GetClassDetails(c))</div>
                                                <div class="col-small ps-1"><strong>Venue:</strong></div>
                                                <div class="col-large">@HighlightSearchText(c.Venue?.Name)</div>
                                                <div class="offset-small col-large">@c.Venue?.Address</div>
                                                <div class="col-small px-1"><strong>Leader:</strong></div>
                                                <div class="col-large">@HighlightSearchText(c.PrimaryLeader)</div>

                                                @if (c.CourseContacts.Count > 0)
                                                {
                                                    var contact = c.SelectedCourseContact;
                                                    <div class="col-small px-1"><strong>Contact:</strong></div>
                                                    var p = contact.Person;
                                                    <div class="col-large">
                                                        @($"({contact.ContactType}) {HighlightSearchText(p.FullNameWithPostNominals)}")
                                                    </div>
                                                    var phone = "";
                                                    if (!p.IsPhoneSilent && !string.IsNullOrWhiteSpace(p.HomePhone))
                                                    {
                                                        phone = $"Phone: {p.AdjustedHomePhone} ";
                                                    }
                                                    if (!p.IsPhoneSilent && !string.IsNullOrWhiteSpace(p.Mobile))
                                                    {
                                                        phone += $"Mobile: {p.AdjustedMobile}";
                                                        if (p.SMSOptOut) phone += $" {constants.NO_SMS}";
                                                    }
                                                    <div class="offset-small col-large">@phone.Trim()</div>
                                                    if (!p.IsEmailSilent)
                                                    {
                                                        <div class="offset-small col-large mb-2">@($"Email: {p.Email}")</div>
                                                    }

                                                    <div class="col-12" hidden="@(!IsReadOnly)">
                                                        <div class="input-group mb-1">
                                                            @if (c.Venue.CanMapAddress)
                                                            {
                                                                <DxButton CssClass="flex-grow-1"
                                                                          IconCssClass="bi bi-globe"
                                                                          Text="Map"
                                                                          RenderStyle="@ButtonRenderStyle.Primary"
                                                                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                                          Click="() => c.ShowMap = !c.ShowMap" />
                                                            }
                                                            @if (!p.IsEmailSilent && !string.IsNullOrWhiteSpace(p.Email))
                                                            {
                                                                <DxButton CssClass="flex-grow-1"
                                                                          IconCssClass="bi bi-envelope"
                                                                          Text="Email"
                                                                          RenderStyle="@ButtonRenderStyle.Primary"
                                                                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                                          Click="() => OnEmail(c.Course.Name, p.Email)" />
                                                            }
                                                            @if (!p.IsPhoneSilent && !p.SMSOptOut && !string.IsNullOrWhiteSpace(p.Mobile))
                                                            {
                                                                <DxButton CssClass="flex-grow-1"
                                                                          IconCssClass="bi bi-phone"
                                                                          Text="SMS"
                                                                          RenderStyle="@ButtonRenderStyle.Primary"
                                                                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                                          Click="() => OnSMS(p.Mobile)" />
                                                            }
                                                            @if (!p.IsPhoneSilent && !string.IsNullOrWhiteSpace(p.HomePhone))
                                                            {
                                                                <DxButton CssClass="flex-grow-1"
                                                                          IconCssClass="bi bi-telephone"
                                                                          Text="Home"
                                                                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                                          RenderStyle="@ButtonRenderStyle.Primary"
                                                                          Click="() => OnPhone(p.HomePhone)" />
                                                            }
                                                            @if (!p.IsPhoneSilent && !string.IsNullOrWhiteSpace(p.Mobile))
                                                            {
                                                                <DxButton CssClass="flex-grow-1"
                                                                          IconCssClass="bi bi-phone"
                                                                          Text="Mobile"
                                                                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                                          RenderStyle="@ButtonRenderStyle.Primary"
                                                                          Click="() => OnPhone(p.Mobile)" />
                                                            }
                                                            @if (c.CourseContacts.Count > 1)
                                                            {
                                                                <DxButton CssClass="flex-grow-1"
                                                                          IconCssClass="bi bi-arrow-right"
                                                                          IconPosition="ButtonIconPosition.AfterText"
                                                                          Text="Contact"
                                                                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                                          RenderStyle="@ButtonRenderStyle.Primary"
                                                                          Click="async() => await GetNextCourseContact(c)" />
                                                            }
                                                        </div>
                                                    </div>

                                                }


                                            }
                                            <!-- Report Style Detail -->

                                            <div class="row col col-12" hidden="@IsReadOnly">
                                                <div class="col-3 px-1 text-center"><strong>Max</strong></div>
                                                <div class="col-3 px-1 text-center"><strong>Min</strong></div>
                                                <div class="col-3 px-1 text-center"><strong>Enrolled</strong></div>
                                                <div class="col-3 px-1 text-center"><strong>Waitlist</strong></div>
                                                <div class="col-3 px-1 text-center">@c.Course.MaximumStudents</div>
                                                <div class="col-3 px-1 text-center">@c.Course.RequiredStudents</div>
                                                <div class="col-3 px-1 text-center">@c.TotalActiveStudents</div>
                                                <div class="col-3 px-1 text-center">@c.TotalWaitlistedStudents</div>
                                            </div>

                                            <DxButton CssClass="w-100 mb-1" IconCssClass="bi bi-globe2"
                                                      Visible=@(!string.IsNullOrWhiteSpace(c.Course.AdditionalInformationURL))
                                                      Text="Additional Information" RenderStyle="@ButtonRenderStyle.Primary"
                                                      RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                      Click="async () => await OnAddnInfoURLClick(c)" />
                                            <div class="px-2 pt-2 w-100" hidden="@(!IsReadOnly || !c.ShowMap)">
                                                @if (c.Venue.CanMapAddress)
                                                {
                                                    var link = $"https://www.google.com/maps/embed/v1/place?key={googleMapAPIKey}&q={HttpUtility.UrlEncode($"{c.Venue?.Name} {c.Venue?.Address}")}";
                                                    <iframe width="100%"
                                                            height="250rem"
                                                            style="border:thin"
                                                            loading="lazy"
                                                            allowfullscreen
                                                            referrerpolicy="no-referrer-when-downgrade"
                                                            src="@link" />
                                                }
                                                else
                                                {
                                                    <div class="col-12 text-center h6">Map data is not available</div>
                                                }
                                            </div>
                                            @{
                                                string? message = null;
                                                if (c.TermNumber != term.TermNumber) { message = $"Enrol for {c.OfferedSummary}"; }
                                                if (c.TermNumber == prevTerm.TermNumber) { message = $"This is a Term {prevTerm.TermNumber} class"; }
                                                if (c.TotalActiveStudents >= c.Course.MaximumStudents) { message = "Class is Full"; }
                                                if (!c.Course.AllowAutoEnrol) { message = "Class is Closed"; }
                                                if (message != null)
                                                {
                                                    <div class="watermark"
                                                         hidden="@(isListboxShowingSummary)">
                                                        @message
                                                    </div>
                                                }
                                            }
                                        </Items>
                                    </DxFormLayoutGroup>
                                </DxFormLayout>
                            }
                        }<!-- Report Style not Brief -->
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>

        <div class="align-items-end">
            <div class="h6 col-12 text-primary" align="center">
                @(new MarkupString(selectionCountText))
            </div>

            <div class="input-group">
                <DxButton CssClass="flex-grow-1"
                          Visible=@(!IsPreview)
                          IconCssClass="bi-door-open"
                          Text="Return to menu"
                          RenderStyle="@ButtonRenderStyle.Secondary" Click="@OnReturnToMenu" />
            </div>
        </div>
    </div>
}
<style>
    .filter-text-box {
        margin: auto;
        background: url(images/search.svg) no-repeat scroll 5px 5px;
        padding-left: 30px;
    }

    .combo-list-box {
        margin: auto;
        background: url(images/list-ul.svg) no-repeat scroll 5px 5px;
        padding-left: 30px;
    }

    .selected-box {
        width: 100%;
        position: relative;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .weblink-button {
        width: 80%;
        margin: auto
    }

    .highlight {
        background-color: yellow !important;
    }

    .listbox-scroll {
        height: @listHeight;
    }

    .list-detail {
        width: 98%;
        margin: auto;
    }

    .col-small {
        -webkit-box-flex: 0;
        -webkit-flex: 0 0 auto;
        -ms-flex: 0 0 auto;
        flex: 0 0 auto;
        width: 20%;
    }

    .col-large {
        -webkit-box-flex: 0;
        -webkit-flex: 0 0 auto;
        -ms-flex: 0 0 auto;
        flex: 0 0 auto;
        width: 80%;
    }

    .offset-small {
        margin-left: 20%;
    }

    .watermark {
        width: 100%;
        text-align: center;
        font-size: 2rem;
        font-weight: 500;
        opacity: 0.4;
        color: magenta;
        position: absolute;
        bottom: 10%;
    }
</style>
@code {
    const string EXPERIMENTAL_TEXT = $@"<div class='alert alert-warning text-dark text-center'><h5>This class is Experimental</h5>
                        You have requested enrolment in a class that is currently experimental.<br/>
                        This means the class has features that are new and are still undergoing full implementation.
                        While you are encouraged to participate in this class, you should be aware that implementation
                        and the feature-set may change. Thank you for your participation!
                        </div>";

    [CascadingParameter]
    LoginState loginState { get; set; }

    [Parameter]
    public EventCallback<PortalMenuResult> OnSelectedOptionCompleted { get; set; }
    [Parameter]
    public EventCallback<bool> OneReadyStatusChanged { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public bool IsPreview { get; set; }

    [Parameter]
    public bool IsEnrolmentRequestView { get; set; }

    [Parameter]
    public bool IsEnrolmentWithdrawalView { get; set; }

    [Parameter]
    public Guid? QRClassID { get; set; }

    [Parameter]
    public Term PreviewTerm { get; set; }

    Progress? ProgressBar;
    bool isProgressVisible { get; set; }

    Term? term;
    Term? prevTerm;
    List<Class> ListboxData;
    List<Class>? Classes;
    List<Class> selectedClasses = new List<Class>();
    List<Class> deletedClasses = new List<Class>();
    Class selectedClass;
    List<ReportStyleWrapper> ReportStyleList = new ReportStyleList();
    ReportStyle reportStyle = ReportStyle.Detail;

    DxButton? listboxViewButton;
    DxTabs? dxTabs;
    DxGrid? listGrid;
    DxTextBox filterTextBox;

    int activeTabIndex;
    string listHeight = "60vh;";

    string selectionCountText = string.Empty;
    bool isListboxShowingSummary = true;
    internal ErrorPopup? ErrorPopup { get; set; }
    internal string? ErrorHeader;
    internal string? ErrorMessage;
    MessageBox? messageBox;
    MessageBox? messageBoxWithClassDetail;
    string? googleMapAPIKey;
    bool showCourseFullWatermark = false;
    bool IsMobileLayout;

    Person perosn;
    bool isFinancial;
    bool isNotInEnrolmentPeriod = false;
    bool IsReady = false;
    bool isDirty = false;
    SystemSettings settings;
    DateTime today;
    MarkupString? enrolmentLockoutText;
    string selectButtonIcon;

    // Search filter function
    string? _filterText = null;
    string? filterText
    {
        get { return _filterText; }
        set
        {
            _filterText = value;
            ListboxData = (string.IsNullOrWhiteSpace(_filterText))
                            ? ResetFilter()
                            : FilterClassByName();
        }
    }

    async Task OnFilterTextChanged(string text)
    {
        await filterTextBox.FocusAsync();
        filterText = text;
    }

    List<Class> FilterClassByName()
    {
        if (dxTabs != null) { activeTabIndex = dxTabs.ActiveTabIndex = 0; }
        var result = Classes.FindAll(x => searchText(x).IndexOf(_filterText, StringComparison.CurrentCultureIgnoreCase) >= 0);
        return result;
    }

    MarkupString HighlightSearchText(string searchText)
    {
        string result = "";
        if (searchText == null) return new MarkupString(string.Empty);
        if (string.IsNullOrWhiteSpace(_filterText)) return new MarkupString(searchText);
        var pattern = Regex.Escape(_filterText);
        Regex regex = new Regex(pattern, RegexOptions.IgnoreCase);
        MatchCollection matches = regex.Matches(searchText);
        foreach (Match match in matches.Reverse())
        {
            foreach (Group group in match.Groups)
            {
                foreach (Capture capture in group.Captures.Reverse())
                {
                    searchText = searchText.Insert(capture.Index + capture.Length, "</span>");
                    searchText = searchText.Insert(capture.Index, "<span class='highlight'>");
                }
            }
        }
        return new MarkupString(searchText);
    }

    string searchText(Class c)
    {
        return $"{c.Course.ConversionID} {c.Course.Name} {c.Course.CourseType.Name} {c.Leader?.FullName} {c.Venue?.Name} {c.GuestLeader}";
    }

    List<Class> ResetFilter()
    {
        if (isListboxShowingSummary)
        {
            return selectedClasses.ToList();
        }
        else
        {
            if (dxTabs == null || activeTabIndex == 0)
            {
                return Classes;
            }
            else
            {
                if (activeTabIndex < 6)
                {
                    //Monday - Friday
                    return Classes.Where(x => x.OnDayID == activeTabIndex).ToList();
                }
                else
                {
                    //Weekend
                    return Classes.Where(x => x.OnDayID == activeTabIndex ||
                                                x.OnDayID == 0).ToList();
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await OneReadyStatusChanged.InvokeAsync(false); // disable external user input

        var watch = Stopwatch.StartNew();

        deletedClasses = new List<Class>();
        activeTabIndex = 0;
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            today = dbc.GetLocalTime().Date;
            using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
            {
                // wire up the data
                settings = await dbc.SystemSettings.OrderBy(x => x.ID).FirstOrDefaultAsync();
                if (IsPreview)
                {
                    term = PreviewTerm;
                }
                else
                {
                    term = BusinessRule.CurrentEnrolmentTerm(dbc);
                }
                if (term == null)
                {
                    var currentTerm = BusinessRule.CurrentTerm(dbc);
                    if (dbc.GetLocalTime().Date < currentTerm.EnrolmentStartDate)
                    {
                        SetUnavialable(currentTerm);
                    }
                    else
                    {
                        // Fallback to read-only mode if enrolment term is null
                        var nextTerm = await BusinessRule.GetNextTermAsync(dbc);
                        if (nextTerm != null)
                        {
                            term = currentTerm = nextTerm;
                            SetUnavialable(nextTerm);
                        }
                    }
                }
                if (term != null)
                {
                    prevTerm = await BusinessRule.GetPreviousTermAsync(dbc, term.Year, term.TermNumber) ?? term;
                    var exludeOffScheduleActivities = (IsReadOnly) ? false : true;

                    if (PreviewTerm != null)
                    {
                        // slow database lookup, required because PreviewTerm is selectable.
                        Classes = await BusinessRule.GetClassDetailsAsync(dbc, term, settings, exludeOffScheduleActivities);
                    }
                    else
                    {
                        // Fast lookup from Schedule cache
                        isFinancial = false;
                        if (loginState.SelectedPerson.FinancialTo >= term.Year) { isFinancial = true; }
                        Classes = await BusinessRule.RestoreClassesFromScheduleAsync(dbc, dbcT, tenantService, term, settings, exludeOffScheduleActivities, isFinancial);
                    }
                    if (Classes != null)
                    {
                        if (loginState?.SelectedPerson != null)
                        {
                            selectedClasses = BusinessRule.GetClassDetailsForStudent(Classes, loginState.SelectedPerson);
                            if (selectedClasses.Count() > 0) isListboxShowingSummary = false;
                            if (IsReadOnly && selectedClasses.Count() <= 0) Classes.Clear();
                            SetReviewButtonText();
                        }
                        else if (IsPreview)
                        {
                            isListboxShowingSummary = true; // force a flip
                        }
                    }
                }
            }
        }
        googleMapAPIKey = config.GetValue<string>("GoogleMapAPIKey");
        if (string.IsNullOrWhiteSpace(googleMapAPIKey)) googleMapAPIKey = config.GetConnectionString("GoogleMapAPIKey");

        watch.Stop();
        Logger.LogInformation("Member Enrolment: OnInitializedAsync() {duration}ms", watch.ElapsedMilliseconds);

        IsReady = true;
        await ShowSelectedClasses();
        await OneReadyStatusChanged.InvokeAsync(true); // enable external user input
    }

    void SetUnavialable(Term? term)
    {
        if (term != null)
        {
            var sOpeningTime = term?.EnrolmentStartDate.ToString("dddd, dd-MMM-yyyy");
            enrolmentLockoutText = new MarkupString($@"<h6><strong>{term.Year} Term-{term.TermNumber}</strong> membership and course enrolments will open</br>{sOpeningTime}.</h6>");
        }
        isListboxShowingSummary = false;
        isNotInEnrolmentPeriod = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            filterText = null;
            if (IsEnrolmentRequestView && isNotInEnrolmentPeriod && (term == null || Classes == null))
            {
                await ReturnToMenu(PortalMenuResult.EnrolmentCancelledTermNotDefined);
            }
            else
            {
                if (IsReadOnly && messageBox != null)
                {
                    if (selectedClasses?.Count() <= 0)
                    {
                        await messageBox?.ShowOkOnlyAsync("No Enrolment In Current Term",
                                $"You have no enrolments in {term.Year} Term {term.TermNumber}.<br>" +
                                "Use <strong>Change your course enrolments</strong> to add/delete enrolments.");
                        await ReturnToMenu(PortalMenuResult.MenuOptionCancelled);
                    }
                }
            }
        }
        else
        {
            var style = await localStorage.GetItemAsync<int?>("ClassListStyle");
            if (style != null) reportStyle = (ReportStyle)style;
            if (Classes != null && QRClassID != null)
            {
                // We have a class ID passed in via QueryRequest
                Class thisClass = Classes.Find(x => x.ID == QRClassID);
                if (thisClass != null)
                {
                    await SelectedClassChanged(thisClass);
                    QRClassID = null; //clear so we dont double process the request
                }
                else
                {
                    await messageBox?.ShowOkOnlyAsync("Selected class is not available",
                            $"We're very sorry. Your selected class is no longer available.");
                }
            }
            var offset = (loginState.IsAdminOnBehalfOfMember) ? 0.175 : 0.15;
            var newHeight = await Window.FitToRemainingHeight(js, "listBox", listHeight, offset);
            if (newHeight != listHeight)
            {
                listHeight = newHeight;
                InvokeAsync(StateHasChanged);
            }
        }
        ProgressBar?.Close();
    }

    async Task OnReportStyleChanged(ReportStyle value)
    {
        reportStyle = value;
        await localStorage.SetItemAsync<int>("ClassListStyle", (int)reportStyle);
        InvokeAsync(StateHasChanged);
    }

    async Task OnEmail(string courseName, string email)
    {
        string mailto = $"mailto:?subject=U3A Course: {courseName}&To={email}";
        try
        {
            NavMan.NavigateTo(mailto, true);
        }
        catch (Exception ex)
        {
            await messageBox.ShowOkOnlyAsync("Error Activating Mail Client",
                            $@"<p>A mail client is required to process your email.</p>" +
                            $"<p>Error: {ex.Message}");
        }
    }

    async Task OnSMS(string mobile)
    {
        var phone = HttpUtility.UrlEncode(mobile.Trim().Replace(" ", ""));
        string smsto = $"sms:{phone}";
        try
        {
            NavMan.NavigateTo(smsto, true);
        }
        catch (Exception ex)
        {
            await messageBox.ShowOkOnlyAsync("Error Activating SMS Client",
                                    $@"<p>An SMS client (Phone) is required to process your request.</p>" +
                                    $"<p>Error: {ex.Message}");
        }
    }

    async Task OnPhone(string phoneNo)
    {
        var phone = HttpUtility.UrlEncode(phoneNo.Trim().Replace(" ", ""));
        string phoneURL = $"tel:{phone}";
        try
        {
            NavMan.NavigateTo(phoneURL, true);
        }
        catch (Exception ex)
        {
            await messageBox.ShowOkOnlyAsync("Error Activating Phone",
                                    $@"<p>A Phone is required to process your request.</p>" +
                                    $"<p>Error: {ex.Message}");
        }
    }

    MarkupString GetClassDetails(Class c)
    {
        var result = new MarkupString(c.ClassDetailWithoutVenue);
        if (c.Course.ClassSummaries.Count > 1)
        {
            string text = string.Empty;
            foreach (var thisClass in c.Course.ClassSummaries)
            {
                text = $"{text}{thisClass}<br/>";
            }
            if (text != string.Empty) result = new MarkupString(text);
        }
        return result;
    }

    string GetBriefStatus(Class context)
    {
        var status = GetStatus(context);
        return (status.ToLower().Contains("select")) ? "Select" : "Withdraw";
    }

    string GetStatus(Class context)
    {
        var result = string.Empty;
        DateTime? classEndDate = null;
        if (IsPreview) { result = "Preview Only"; return result; }
        if (!IsReadOnly && !isListboxShowingSummary && !isNotInEnrolmentPeriod)
        {
            if (selectedClasses.Contains(context))
            {
                (result, classEndDate) = getEnrolmentStatus(context);
                result = $"{result} - Click to withdraw";
                selectButtonIcon = "bi-x-circle";
            }
            else
            {
                result = "Click to select";
                selectButtonIcon = "bi-check-circle";
            }
        }
        else
        {
            (result, classEndDate) = getEnrolmentStatus(context);

            if (!IsReadOnly
            && !isNotInEnrolmentPeriod
            && isListboxShowingSummary
            && classEndDate?.Date >= today)
            {
                result += " - Click to withdraw";
                selectButtonIcon = "bi-x-circle";
            }
        }
        return result;
    }

    (string, DateTime?) getEnrolmentStatus(Class context)
    {
        var c = context;
        var result = string.Empty;
        DateTime? classEndDate = null;
        string status;
        Enrolment? e = c.IsSelectedByEnrolment;
        // Enrolled in class - display the status
        status = BusinessRule.GetMemberPortalEnrolmentStatus(c, e, term, settings,today);
        classEndDate = term.EndDate;
        if (c.TermNumber != term.TermNumber)
        {
            result = $"Term {c.TermNumber}: {status}";
        }
        else
        {
            result = status;
        };

        return (result, classEndDate);
    }

    async Task<List<Class>> GetAcceptableClasses()
    {
        if (selectedClasses?.Count() <= 0) return selectedClasses.ToList();
        List<Class> leaderExceptions = new List<Class>();
        List<Class> acceptableClasses = new List<Class>();
        bool isClassInTerm = false;
        //IsSelectedByEnrolment == null when newly selected
        foreach (var c in selectedClasses.Where(x => x.IsSelectedByEnrolment == null))
        {
            if ((new Guid?[] { c.LeaderID, c.Leader2ID, c.Leader3ID }).Contains(loginState.SelectedPerson.ID))
            {
                leaderExceptions.Add(c);
            }
            else { acceptableClasses.Add(c); }
        }
        if (leaderExceptions.Any())
        {
            var msg = "<p>You have or are attempting to enrol in classes you lead.<br/>" +
            "Course leaders do not enrol in their own classes.</p>";
            foreach (var c in leaderExceptions)
            {
                msg += $"<p><strong>Course:</strong> {c.Course.Name}</p>";
            }
            await messageBox.ShowOkOnlyAsync("You are the leader!", msg);
        }
        return acceptableClasses;
    }

    async Task ReturnToMenu(PortalMenuResult result)
    {
        await OnSelectedOptionCompleted.InvokeAsync(result);
    }

    async Task GetNextCourseContact(Class context)
    {
        IsReady = false;
        InvokeAsync(StateHasChanged);
        var c = selectedClasses.FirstOrDefault(x => x.ID == context.ID);
        if (c != null)
        {
            c.GetNextCourseContact();
            ListboxData = selectedClasses;
        }
        IsReady = true;
    }

    string ListboxViewButtonText = "Show selected only";
    async Task ToggleListboxViewButton()
    {
        isListboxShowingSummary = !isListboxShowingSummary;
        if (isListboxShowingSummary)
        {
            ListboxViewButtonText = "Show all courses";
            ListboxData = selectedClasses;
        }
        else
        {
            ListboxViewButtonText = "Show selected only";
            await GetData();
        }
        await InvokeAsync(StateHasChanged);
    }

    async Task ShowSelectedClasses()
    {
        selectedClass = null;
        if (IsEnrolmentRequestView || IsPreview)
        {
            //Enrolment request view
            filterText = null;
            await GetData();
            isListboxShowingSummary = false;
        }
        else
        {
            //Enrolment withdrawal view
            ListboxData = selectedClasses;
            isListboxShowingSummary = true;
        }
        SetReviewButtonText();
        ScrollListboxToTop();
    }

    async Task GetData()
    {
        List<Class> c = new();
        if (term != null)
        {
            c = Classes.Where(x => x.TermNumber >= term?.TermNumber).ToList();
        }
        // only show this term's classes & inter-term classes from last term.
        if (prevTerm != null)
        {
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                c.AddRange(Classes.Where(x => x.TermNumber == prevTerm.TermNumber
                                                && BusinessRule.IsClassEndDateInInterTermPeriod(dbc, x, prevTerm, prevTerm.EndDate, term.StartDate)).ToList());
            }
        }
        ListboxData = c.Distinct<Class>().ToList();
    }

    void ScrollListboxToTop()
    {
        listGrid?.MakeRowVisible(0);
    }

    bool showingWebLink { get; set; } = false;
    async Task OnAddnInfoURLClick(Class c)
    {
        showingWebLink = true;
        try
        {
            await js.InvokeVoidAsync("open", c.Course.AdditionalInformationURL, "_blank");
        }
        finally
        {
            listGrid.ClearSelection();
            showingWebLink = false;
        }
    }

    async Task<bool> SelectedDataItemChanged(bool IsSelected, Class selectedClass)
    {
        selectedClass.IsSelected = IsSelected;
        await SelectedClassChanged(selectedClass);
        return selectedClass.IsSelected;
    }

    async Task SelectedDataItemChanged(Class selectedClass)
    {
        if (selectedClass == null) { return; }
        if (showingWebLink) { return; }
        if (IsReadOnly || IsPreview) { return; }
        SelectedClassChanged(selectedClass);
    }

    async Task SelectedClassChanged(Class thisClass)
    {
        selectedClass = thisClass;
        if (isNotInEnrolmentPeriod) { listGrid.ClearSelection(); return; }
        if (selectedClasses.Contains(selectedClass))
        {

            // Otherwise process withdrawal
            if (await messageBox.ShowAsync("Class will be withdrawn",
                       $"<p>Enrolment in the class, <strong>{selectedClass.Course.Name}</strong> will be <strong>withdrawn</strong>.</p>" +
                       "Do you wish to continue?"))
            {
                selectedClasses.Remove(selectedClass);
                if (!deletedClasses.Contains(selectedClass)) { deletedClasses.Insert(0, selectedClass); }
                selectedClass.IsSelected = false;
                isDirty = true;
            }
        }
        else
        {
            // process enrolment request
            var caption = "Request enrolment";
            var experimentalMsg = (string.IsNullOrWhiteSpace(selectedClass.Course.OfferedBy))
                    ? "" : EXPERIMENTAL_TEXT;
            var message = $"<p>Enrolment in the class, <strong>{selectedClass.Course.Name}</strong> will be requested.</p>" +
                        WaitlistWarning() + experimentalMsg +
                       "<p>Do you wish to continue?</p>";
            bool result = true;
            if (reportStyle == ReportStyle.Detail)
            {
                result = await messageBox.ShowAsync(caption, message);
            }
            else
            {
                result = await messageBoxWithClassDetail.ShowAsync(caption, message);
            }
            if (result)
            {
                selectedClasses.Insert(0, selectedClass);
                selectedClass.IsSelected = true;
                isDirty = true;
            }
        }

        listGrid.ClearSelection();
        if (isDirty) { await SaveChanges(); }
    }

    bool isWorking;
    async Task SaveChanges()
    {
        if (isWorking) return;
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
            {
                try
                {
                    listGrid.BeginUpdate();
                    isWorking = true;
                    // Post changes to the database.
                    dbc.ChangeTracker.Clear();
                    var acceptableClasses = await GetAcceptableClasses();
                    await BusinessRule.DeleteEnrolmentsRescinded(dbc, dbcT, deletedClasses, loginState.SelectedPerson, term, prevTerm);
                    var addedEnrolments = await BusinessRule.AddEnrolmentRequests(dbc, dbcT, acceptableClasses, loginState.SelectedPerson, term, prevTerm);
                    await BusinessRule.CreateEnrolmentSendMailAsync(dbc);
                    await BusinessRule.CreateMultiCampusEnrolmentSendMailAsync(dbcT, Classes, settings);
                    await dbc.SaveChangesAsync();
                    await dbcT.SaveChangesAsync();
                    RemoveDeletedFromMaster();
                    selectedClasses = BusinessRule.GetClassDetailsForStudent(Classes, loginState.SelectedPerson);
                    foreach (var c in selectedClasses)
                    {
                        BusinessRule.AssignClassCounts(term, c);
                    }
                    if (addedEnrolments.Count() > 0)
                    {
                        await messageBox.ShowOkOnlyAsync("Enrolment summary", await BusinessRule.GetEnrolmentStatusMarkup(dbc, addedEnrolments, term, settings));
                    }
                    StateHasChanged();
                    isDirty = false;
                }
                catch (Exception ex)
                {
                    ErrorHeader = "Save to database error";
                    ErrorMessage = Helpers.GetErrorMessage(ex);
                    await ErrorPopup.ShowPopupAsync();
                }
                finally
                {
                    await ShowSelectedClasses();
                    listGrid.EndUpdate();
                    isWorking = false;
                }
            }
        }
    }

    void RemoveDeletedFromMaster()
    {
        List<Enrolment> deleteList = new();
        foreach (var c in deletedClasses)
        {
            var thisClass = Classes.FirstOrDefault(x => x.ID == c.ID);
            if (thisClass != null)
            {
                foreach (var e in thisClass.Course.Enrolments.Where(x => x.PersonID == loginState.SelectedPerson.ID))
                {
                    deleteList.Add(e);
                }
                foreach (var e in deleteList) { c.Course.Enrolments.Remove(e); }

                deleteList.Clear();
                foreach (var e in thisClass.Enrolments.Where(x => x.PersonID == loginState.SelectedPerson.ID))
                {
                    deleteList.Add(e);
                }
                foreach (var e in deleteList) { c.Enrolments.Remove(e); }
            }
        }
        deletedClasses.Clear();
    }

    string WaitlistWarning()
    {
        var result = string.Empty;
        if (selectedClass.TotalActiveStudents >= selectedClass.Course.MaximumStudents || !selectedClass.Course.AllowAutoEnrol)
        {
            var reason = "Full";
            if (!selectedClass.Course.AllowAutoEnrol) reason = "Closed";
            var extendedReason = "Full";
            if (!selectedClass.Course.AllowAutoEnrol) extendedReason = "Closed.<br/>A closed class means the leader has requested that new enrolments be suspended";
            result = $@"<div class='alert alert-danger text-dark text-center'><h5>Class is {reason}</h5>
                        You have requested enrolment in a class that is {extendedReason}.<br/>
                        Your request will be <strong>Waitlisted</strong> meaning you will
                        be notified should a place become available in the future.
                        Please do not attend classes in which you are waitlisted.
                        </div>";
        }
        else if (!BusinessRule.IsClassInTerm(selectedClass, term.TermNumber)
            &&
        !BusinessRule.IsClassInTerm(selectedClass, prevTerm.TermNumber))
        {
            result = @"<div class='alert alert-danger text-dark text-center'><h5>Class is not currently available this term</h5>
                        You have requested enrolment in a class that is not available this term.<br/>
                        Your request will be <strong>Waitlisted</strong> until enrolment opens and allocation occurs.
                        </div>";

        }
        return result;
    }

    void OnTabClick(TabClickEventArgs e)
    {
        activeTabIndex = e.TabIndex;
        filterText = null; // force a list reset
        ScrollListboxToTop();
    }

    void SetReviewButtonText()
    {
        selectionCountText = $"You have {selectedClasses?.Count()} class requests.<br/>";
        int[] day = new int[7];
        for (int i = 1; i <= 6; i++)
        {
            day[i] = selectedClasses.Where(x => x.OnDayID == i).Count();
            if (i == 6) day[i] = selectedClasses.Where(x => x.OnDayID == 0).Count();
        }
        selectionCountText += $"Mon: {day[1]} Tue: {day[2]} Wed: {day[3]} Thu: {day[4]} Fri: {day[5]} W/E: {day[6]}";
    }

    void OnMapLink(MouseEventArgs args)
    {
        NavMan.NavigateTo("https://www.google.com/maps/embed/v1/place?key=AIzaSyCWgrdB2BvU2ShE9Q5xOSBcTdigmAzUm4k&q=Space+Needle,Seattle+WA", true);
    }

    async Task OnReturnToMenu()
    {
        if (loginState.SelectedPerson != null)
        {
            if (isDirty)
            {
                if (await messageBox.ShowAsync("You have changes to save",
                        "You must save your changes now or they will be lost.<br/>" +
                        "Would you like to save them now?"))
                {
                    await SaveChanges();
                }
            }
            if (IsReadOnly)
            {
                await ReturnToMenu(PortalMenuResult.MenuOptionCompleted);
            }
            else
            {
                await ReturnToMenu(PortalMenuResult.EnrolmentSubmenuOptionCancelled);
            }
        }
        else
        {
            NavMan.NavigateTo("Identity/Account/Logout", true);
        }
    }

}
