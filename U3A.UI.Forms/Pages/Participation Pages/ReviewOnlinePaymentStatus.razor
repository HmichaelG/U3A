@page "/ReviewOnlinePaymentStatus"

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="row">
        <ContextHelpTitle Title="Review Online Payment Status" HelpTopic="Review-Online-Payment-Status.html"></ContextHelpTitle>
    </div>
    <div class="row">
        <div class="col-11 d-none d-md-inline">
            Review the status of payment attempts made online.
        </div>

    </div>
    <br />

    <MessageBox @ref="@messageBox" />
    <Progress @ref=@progressBar />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

    <FullScreen>
        <ContentTemplate>
            <DxGrid Data="@PaymentStatus" @ref=@mainGrid
                    AutoExpandAllGroupRows="true"
                    SelectionMode="GridSelectionMode.Single"
                    SelectedDataItem="selectedPaymentStatus"
                    SelectedDataItemChanged="OnSelectionChanged"
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    UnboundColumnData="Grid_UnboundColumnData"
                    ShowAllRows="true"
                    KeyFieldName="ID">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid>
                        <CustomButtonContent>
                            <DxToolbarItem Context="a" BeginGroup="true" Alignment="ToolbarItemAlignment.Right">
                                <Template>
                                    <div class="input-group">
                                        <div class="flex-grow-0 pt-1 pe-2">From:</div>
                                        <DxDateEdit @bind-Date=@fromDate CssClass="flex-grow-1" />
                                    </div>
                                </Template>
                            </DxToolbarItem>
                            <DxToolbarItem Context="a" Alignment="ToolbarItemAlignment.Right">
                                <Template>
                                    <div class="input-group">
                                        <div class="flex-grow-0 pt-1 px-2">To:</div>
                                        <DxDateEdit @bind-Date=@toDate CssClass="flex-grow-1" />
                                    </div>
                                </Template>
                            </DxToolbarItem>
                            <DxToolbarItem Text="Process"
                                           Alignment="ToolbarItemAlignment.Right"
                                           RenderStyle="ButtonRenderStyle.Primary"
                                           Tooltip="Retrieve records for the selected dates."
                                           Click="OnProcess" />
                            <DxToolbarItem Text="Full Msg" BeginGroup="true"
                                           Alignment="ToolbarItemAlignment.Right"
                                           Tooltip="Display the full Eway result message."
                                           RenderStyle="ButtonRenderStyle.Primary"
                                           Click="OnFullMsg" />
                            <DxToolbarItem Text="Re-Submit"
                                           Alignment="ToolbarItemAlignment.Right"
                                           Tooltip="Re-submit the selected payment to Eway and process receipt, if successful."
                                           RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                           RenderStyle="ButtonRenderStyle.Primary"
                                           Enabled=@(selectedPaymentStatus != null && string.IsNullOrWhiteSpace(selectedPaymentStatus.Status))
                                           Click="OnResubmit" />
                        </CustomButtonContent>
                    </GridToolbar>
                </ToolbarTemplate>
                <Columns>
                    <DxGridSelectionColumn Width="4rem" />
                    <DxGridDataColumn Width="5rem" Caption="Date"
                                      FieldName="Created"
                                      DisplayFormat="dd-MMM-yyyy"
                                      UnboundType="GridUnboundColumnType.DateTime"
                                      SortOrder="GridColumnSortOrder.Descending" />
                    <DxGridDataColumn Width="5rem" Caption="Time"
                                      FieldName="CreatedTime"
                                      DisplayFormat="hh:mm tt"
                                      UnboundType="GridUnboundColumnType.DateTime" />
                    <DxGridDataColumn Width="6rem" Caption="Status" FieldName="Status" />
                    <DxGridDataColumn Caption="Result Code" FieldName="ResultDescription" />
                    <DxGridDataColumn Caption="Participant" FieldName="Participant" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Width="6rem" Caption="Mobile" FieldName="Mobile" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Width="6rem" Caption="Phone" FieldName="Phone" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Caption="Email" FieldName="Email" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Caption="Processed By" FieldName="ProcessedBy" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Caption="W/Station ID" FieldName="WorkstationID" Visible=false />
                </Columns>
            </DxGrid>
        </ContentTemplate>
    </FullScreen>
}

@code {
    bool IsReady;
    OnlinePaymentStatus? selectedPaymentStatus;
    private List<OnlinePaymentStatus> PaymentStatus { get; set; }
    private List<Person> People { get; set; }
    private DxGridCommandColumnEx? GridCommandColumn;
    MessageBox? messageBox;

    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal string ErrorHeader;
    internal string ErrorMessage;
    U3ADbContext dbc { get; set; }
    TimeSpan? offset;
    DateTime fromDate;
    DateTime toDate;

    Progress? progressBar;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        toDate = TimezoneAdjustment.GetLocalTime().Date;
        fromDate = TimezoneAdjustment.GetLocalTime().Date.AddDays(-14);
        await GetDataAsync();
        IsReady = true;
    }

    async Task OnProcess()
    {
        await progressBar.ShowSmallSpinnerAsync();
        await GetDataAsync();
        await progressBar.Close();
    }
    async Task GetDataAsync()
    {
        PaymentStatus = await BusinessRule.GetOnlinePaymentStatus(dbc,fromDate,toDate);
        People = await BusinessRule.EditablePersonAsync(dbc);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localTime = new LocalTime(js);
            offset = await localTime.GetTimezoneOffsetAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void Grid_UnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        var payStatus = e.DataItem as OnlinePaymentStatus;
        var p = People.Find(x => x.ID == payStatus.PersonID);
        if (e.FieldName == "Participant")
        {
            e.Value = p?.FullName ?? "*** Not Available ***";
        }
        if (e.FieldName == "Phone")
        {
            e.Value = p?.AdjustedHomePhone;
        }
        if (e.FieldName == "Mobile")
        {
            e.Value = p?.AdjustedMobile;
        }
        if (e.FieldName == "Email")
        {
            e.Value = p?.Email;
        }
        if (e.FieldName == "ProcessedBy")
        {
            if (p?.Email != payStatus.User) e.Value = payStatus.User;
        }
        if (e.FieldName == "Created")
        {
            e.Value = payStatus.CreatedOn + offset;
        }
        if (e.FieldName == "CreatedTime")
        {
            e.Value = payStatus.CreatedOn + offset;
        }
    }

    void OnSelectionChanged(object payment)
    {
        if (payment != null)
        {
            selectedPaymentStatus = (OnlinePaymentStatus)payment;
            StateHasChanged();
        }
    }
    async Task OnResubmit()
    {
        if (selectedPaymentStatus == null) { return; }
        await progressBar.ShowSmallSpinnerAsync();
        var term = BusinessRule.CurrentEnrolmentTerm(dbc);
        if (term == null) term = await BusinessRule.CurrentTermAsync(dbc);
        if (term == null) { return; }
        var paymentService = new EwayPaymentService(dbc);
        try
        {
            await paymentService.FinaliseEwayPyamentAsync(dbc, selectedPaymentStatus, term);
            await messageBox.ShowOkOnlyAsync("Payment Resubmitted", "The payment has been successfully resubmitted.");
            await GetDataAsync();
        }
        catch (Exception ex)
        {
            var person = await dbc.Person.FindAsync(selectedPaymentStatus.PersonID);
            await messageBox.ShowOkOnlyAsync("Resubmit error",
                        $"Error processing online payment for {person.FullName}.<br/>{ex.Message}");
        }
        finally
        {
            selectedPaymentStatus = null;
            await progressBar.Close();
        }
    }

    async Task OnFullMsg()
    {
        if (selectedPaymentStatus != null)
        {
            await messageBox.ShowOkOnlyAsync("Result Message", selectedPaymentStatus.ResultLongDescription);
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
