@page "/ReviewOnlinePaymentStatus"

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    if (!IsEmbedded)
    {
            <ContextHelpTitle Title="Review Online Payment Status" HelpTopic="Review-Online-Payment-Status.html"
                              Subtitle="Review the status of payment attempts made online." />
    }

    <MessageBox @ref="@messageBox" />
    <Progress @ref=@progressBar />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

    <FullScreen DisplayOffset="@((IsEmbedded) ? 13 : 8)" HideToggle="@IsEmbedded">
        <ContentTemplate>
            <DxGrid Data="@PaymentStatus" @ref=@mainGrid
            AutoExpandAllGroupRows="true"
            SelectionMode="GridSelectionMode.Single"
            SelectedDataItem="selectedPaymentStatus"
            SelectedDataItemChanged="OnSelectionChanged"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            UnboundColumnData="Grid_UnboundColumnData"
            ShowAllRows="true"
            KeyFieldName="ID">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid LayoutKey="{41DF3299-CBB3-452F-82B9-0A579829ED66}">
                        <CustomButtonContent>
                            <DxToolbarItem Context="a" BeginGroup="true" Alignment="ToolbarItemAlignment.Right">
                                <Template>
                                    <div class="d-flex">
                                        <div class="flex-grow-0 pt-1 pe-2">From:</div>
                                        <DxDateEdit Date=@startDate DateChanged="@((DateTime newValue) => OnStartDateChanged(newValue))" CssClass="flex-grow-1" />
                                    </div>
                                </Template>
                            </DxToolbarItem>
                            <DxToolbarItem Context="a" Alignment="ToolbarItemAlignment.Right">
                                <Template>
                                    <div class="d-flex">
                                        <div class="flex-grow-0 pt-1 px-2">To:</div>
                                        <DxDateEdit Date=@endDate DateChanged="@((DateTime newValue) => OnEndDateChanged(newValue))" CssClass="flex-grow-1" />
                                    </div>
                                </Template>
                            </DxToolbarItem>
                            <DxToolbarItem Text="Full Msg" BeginGroup="true"
                            Alignment="ToolbarItemAlignment.Right"
                            Tooltip="Display the full Eway result message."
                            IconCssClass="bi bi-chat"
                            RenderStyle="ButtonRenderStyle.Primary"
                            Click="OnFullMsg" />
                            <DxToolbarItem Text="Re-Submit" BeginGroup="true"
                            Alignment="ToolbarItemAlignment.Right"
                            IconCssClass="bi bi-arrow-clockwise"
                            Tooltip="Re-submit the selected payment to Eway and process receipt, if successful."
                            RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                            RenderStyle="ButtonRenderStyle.Primary"
                            Enabled=@(selectedPaymentStatus != null && !finalisedCodes.Contains(selectedPaymentStatus.ResultCode))
                            Click="OnResubmit" />
                            <DxToolbarItem Visible="@IsEmbedded" Context="a" BeginGroup="true" Alignment="ToolbarItemAlignment.Right">
                                <Template>
                                    <ContextHelpTitle Title="" HelpTopic="Review-Online-Payment-Status.html"
                                    ButtonIconCssClass="bi bi-question-circle-fill help-btn"
                                    ActivationStyle="@HelpActivationStyle.ButtonOnlyNoMessges" />
                                </Template>
                            </DxToolbarItem>
                        </CustomButtonContent>
                    </GridToolbar>
                </ToolbarTemplate>
                <Columns>
                    <DxGridSelectionColumn Width="4rem" />
                    <DxGridDataColumn Width="5rem" Caption="Date"
                    FieldName="Created"
                    DisplayFormat="dd-MMM-yyyy"
                    UnboundType="GridUnboundColumnType.DateTime"
                    SortOrder="GridColumnSortOrder.Descending" />
                    <DxGridDataColumn Width="5rem" Caption="Time"
                    FieldName="CreatedTime"
                    DisplayFormat="hh:mm tt"
                    UnboundType="GridUnboundColumnType.DateTime" />
                    <DxGridDataColumn Width="6rem" Caption="Status" FieldName="Status" />
                    <DxGridDataColumn Caption="Result Code" FieldName="ResultDescription" />
                    <DxGridDataColumn Caption="Participant" FieldName="Participant" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Width="6rem" Caption="Mobile" FieldName="Mobile" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Width="6rem" Caption="Phone" FieldName="Phone" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Caption="Email" FieldName="Email" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Visible="false" Caption="Processed By" FieldName="ProcessedBy" UnboundType="GridUnboundColumnType.String" />
                </Columns>
            </DxGrid>
        </ContentTemplate>
    </FullScreen>
}

@code {
    [Parameter]
    public bool IsEmbedded { get; set; }

    bool IsReady;
    OnlinePaymentStatus? selectedPaymentStatus;
    private List<OnlinePaymentStatus> PaymentStatus { get; set; }
    private List<Person> People { get; set; }
    private DxGridCommandColumnEx? GridCommandColumn;
    MessageBox? messageBox;

    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal string ErrorHeader;
    internal string ErrorMessage;
    U3ADbContext dbc { get; set; }
    TimeSpan? offset;
    DateTime startDate;
    DateTime endDate;
    string[] finalisedCodes = { "00", "--" }; 

    Progress? progressBar;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        startDate = endDate = dbc.GetLocalDate();
        if (!IsEmbedded) startDate = startDate.AddDays(-7);
        await GetDataAsync();
        IsReady = true;
    }

    async Task OnStartDateChanged(DateTime newValue)
    {
        startDate = newValue;
        await GetDataAsync();
    }
    async Task OnEndDateChanged(DateTime newValue)
    {
        endDate = newValue;
        await GetDataAsync();
    }
    async Task GetDataAsync()
    {
        PaymentStatus = await BusinessRule.GetOnlinePaymentStatus(dbc, startDate, endDate);
        People = await BusinessRule.EditablePersonAsync(dbc);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localTime = new LocalTime(js);
            offset = await localTime.GetTimezoneOffsetAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void Grid_UnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        var payStatus = e.DataItem as OnlinePaymentStatus;
        var p = People.Find(x => x.ID == payStatus.PersonID);
        if (e.FieldName == "Participant")
        {
            e.Value = p?.FullName ?? "*** Not Available ***";
        }
        if (e.FieldName == "Phone")
        {
            e.Value = p?.AdjustedHomePhone;
        }
        if (e.FieldName == "Mobile")
        {
            e.Value = p?.AdjustedMobile;
        }
        if (e.FieldName == "Email")
        {
            e.Value = p?.Email;
        }
        if (e.FieldName == "ProcessedBy")
        {
            if (p?.Email != payStatus.User) e.Value = payStatus.User;
        }
        if (e.FieldName == "Created")
        {
            e.Value = dbc?.GetLocalDate(payStatus.CreatedOn);
        }
        if (e.FieldName == "CreatedTime")
        {
            e.Value = dbc.GetLocalTime(payStatus.CreatedOn);
        }
    }

    void OnSelectionChanged(object payment)
    {
        if (payment != null)
        {
            selectedPaymentStatus = (OnlinePaymentStatus)payment;
            StateHasChanged();
        }
    }
    async Task OnResubmit()
    {
        if (selectedPaymentStatus == null) { return; }
        await progressBar.ShowSmallSpinnerAsync();
        var term = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
        if (term == null) term = await BusinessRule.CurrentTermAsync(dbc);
        if (term == null) { return; }
        var paymentService = new EwayPaymentService(dbc);
        try
        {
            await paymentService.FinaliseEwayPyamentAsync(dbc, selectedPaymentStatus, term);
            await messageBox.ShowOkOnlyAsync("Payment Resubmitted", "The payment has been successfully resubmitted.");
            await GetDataAsync();
        }
        catch (EwayResponseException ex)
        {
            var person = await dbc.Person.FindAsync(selectedPaymentStatus.PersonID);
            await messageBox.ShowOkOnlyAsync("Resubmit error",
                        $"Error processing online payment for {person.FullName}.<br/>{ex.Message}");
        }
        catch (Exception ex)
        {
            var person = await dbc.Person.FindAsync(selectedPaymentStatus.PersonID);
            await messageBox.ShowOkOnlyAsync("Resubmit error",
                        $"Error processing online payment for {person.FullName}.<br/>{ex.Message}");
        }
        finally
        {
            selectedPaymentStatus = null;
            await progressBar.Close();
        }
    }

    async Task OnFullMsg()
    {
        if (selectedPaymentStatus != null)
        {
            await messageBox.ShowOkOnlyAsync("Result Message", selectedPaymentStatus.ResultLongDescription);
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
