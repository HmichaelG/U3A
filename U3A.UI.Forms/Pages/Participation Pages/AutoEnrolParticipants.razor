@page "/AutoEnrolParticipants"

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager NavigationManager
@implements IDisposable


@attribute [Authorize]

@if (!IsReady) {
    <LoadingIndicator />
}
else {

    <div class="container-md py-md-5">
        <div class="row">
            <div class="col col-md-2" />
            <div class="col col-md-8 border border-primary py-2">
                <ContextHelpTitle Title="Auto-Enrol Participants" HelpTopic="Auto-Enrol-Participants.html"></ContextHelpTitle>
                <CollapsableContent AlertText=@($@"<strong>Auto-Enrol Participants</strong> is now an automated procedure.<br />
                              It is executed hourly to move waitlisted students into active enrolment if available.<br />
                              Randomised automatic enrolment occurs {autoEnrolOccirence.ToLower()} on
                              {autoEnrolDay} in week {-settings?.AutoEnrolAllocationWeek} prior to term start.")
                                  OnToggleAlert="@(() => InvokeAsync(StateHasChanged))" />
                <p>
                    This procedure will automatically enrol participants into their selected courses.<br />
                    Auto-enrolment is considered a fair and equitable way of allocating participants to an oversubscribed course.
                </p>
                <p>For Term 1 the procedure allocates places as follows...</p>
                <ol>
                    <li>The first <strong>@settings.AutoEnrolNewParticipantPercent%</strong> of places are allocated to new participants, if any.</li>
                    <li>The remainder of places are allocated on a <strong>@settings.AutoEnrolRemainderMethod</strong> basis.</li>
                </ol>
                <p>
                    For Terms 2 thru 4 procedure allocates places on a first in wins basis.
                    The parameters applied to these rules may be changed in System Settings.
                </p>
                <p>
                    <strong>Is Term Auto-Enrolment Finalised?</strong> (see below) should be checked on the final auto-enrolment prior to the start of term 1.<br />
                    Once checked, any future term enrolment will be automatically enrolled if a place is available.
                    If left unchecked, enrolment requests will be waitlisted only.
                </p>
                <p>
                    <strong>Queue email for ALL participants?</strong> (see below) should be checked on the first auto-enrolment for each term.<br />
                    Normally, only participants whose enrolment waitlist status has changed will receive an email.
                    If checked, an enrolment email will be queued for every participant irrespective of changed waitlist status.
                </p>


                <MessageBox @ref="@messageBox" />

                <DxFormLayout Enabled=@IsProcessing>
                    <DxFormLayoutItem Caption="Current Enrolment Term" ColSpanMd="8">
                        <DxComboBox Data="@terms" NullText="Select the Term to bring forward from."
                                    TextFieldName="@nameof(Term.TermSummary)"
                                    Value="@processTerm"
                                    ValueChanged="@((Term term) => OnTermChanged(term))" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Is Term Random Enrolment Finalised?" ColSpanMd="8">
                        <DxCheckBox Alignment="CheckBoxContentAlignment.Right" @bind-Checked="@IsClassAllocationFinalised"
                                    Enabled=@(!IsClassAllocationFinalised) />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Queue Email For ALL participants?" ColSpanMd="8">
                        <DxCheckBox Alignment="CheckBoxContentAlignment.Right" @bind-Checked="@ForceEmailQueue" />
                    </DxFormLayoutItem>
                    <p />
                    <DxFormLayoutItem ColSpanMd="12">
                        <Template>
                            <DxButton Visible=@(!IsProcessing) Text="Process" RenderStyle="@ButtonRenderStyle.Primary" Click="@Process" />
                            <DxButton Visible=@(!IsProcessing) Text="Cancel" RenderStyle="@ButtonRenderStyle.Secondary" Click="@Close" />
                            <DxButton Context="buttonContext" Visible=@(IsProcessing)
                                      RenderStyle="ButtonRenderStyle.Success" CssClass="col col-12"
                                      RenderStyleMode="ButtonRenderStyleMode.Contained">
                                <span class="spinner-border spinner-border-sm" role="status" />&nbsp;Processing
                            </DxButton>
                        </Template>
                    </DxFormLayoutItem>
                </DxFormLayout>

            </div>
            <div class="col col-md-2" />
        </div>

    </div>

}
@code {
    bool IsReady;
    bool IsProcessing;
    bool IsClassAllocationFinalised { get; set; }
    bool DoFullEnrolment;
    bool ForceEmailQueue;
    string? errorMessage;
    SystemSettings? settings;
    Term? processTerm;
    Term? FirstTermNextYear;
    string? autoEnrolDay;
    string? autoEnrolOccirence;
    List<Term> terms { get; set; }

    MessageBox? messageBox;
    U3ADbContext dbc { get; set; }

    protected override async Task OnInitializedAsync() {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        autoEnrolDay = dbc.WeekDay.First(x => x.ID == settings.AutoEnrolAllocationDay).Day;
        autoEnrolOccirence = new AutoEnrollOccurrences().First(x => x.Key == settings.AutoEnrolAllocationOccurs).Value;
        terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
        processTerm = await BusinessRule.CurrentTermAsync(dbc);
        if (processTerm != null) {
            FirstTermNextYear = await BusinessRule.FirstTermNextYearAsync(dbc, processTerm.Year);
            if (FirstTermNextYear != null
                && DateTime.Today >= FirstTermNextYear.EnrolmentStartDate) { processTerm = FirstTermNextYear; }
            IsClassAllocationFinalised = processTerm.IsClassAllocationFinalised;
        }
        IsReady = true;
    }

    void OnTermChanged(Term newValue) {
        processTerm = newValue;
        IsClassAllocationFinalised = processTerm.IsClassAllocationFinalised;
        StateHasChanged();
    }


    async Task Process() {
        if (await IsDataOk()) {
            errorMessage = null;
            IsProcessing = true;
            StateHasChanged();
            await BusinessRule.AutoEnrolParticipantsAsync(dbc, processTerm,
                                                            IsClassAllocationFinalised,
                                                            ForceEmailQueue);
            IsProcessing = false;
            StateHasChanged();
            await messageBox.ShowOkOnlyAsync("Process Complete", "Enrolments have been allocated.");
            NavigationManager.NavigateTo("/");
        }
    }

    async Task<bool> IsDataOk() {
        bool result = true;
        string? msg = null;
        if (processTerm == null) {
            msg = "<p>*** You must select the current Term ***</p>";
            await messageBox.ShowOkOnlyAsync("Select the Term", msg);
            result = false;
        }
        return result;
    }

    void Close() {
        NavigationManager.NavigateTo("/");
    }

    public void Dispose() {
        dbc?.Dispose();
    }

}
