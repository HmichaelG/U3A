@page "/AutoEnrolParticipants"

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService
@inject NavigationManager NavigationManager
@inject WorkStation ws

@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="mt-4 d-flex flex-column box-position">
        <div class="col col-md-8 border p-2">
            <ContextHelpTitle Title="Auto-Enrol Participants"
                                  ActivationStyle="HelpActivationStyle.ButtonAndTitleNoMessages"
                                  HelpTopic="Auto-Enrol-Participants.html" />
                <CollapsableContent DismissKey="{B89FB2B1-3559-4A94-A6B2-9E19CDA285F7}"
                                    AlertText=@($@"<p><strong>Auto-Enrol Participants</strong> is now an automated procedure.<br />
                                It is executed hourly to move waitlisted students into active enrolment if available.<br />
                                Randomised automatic enrolment occurs {autoEnrolOccirence.ToLower()} on
                                {autoEnrolDay} in week {-settings?.AutoEnrolAllocationWeek} prior to term start.</p>")
                                    OnToggleAlert="@(() => InvokeAsync(StateHasChanged))" />
                @if (BusinessRule.IsEnrolmentBlackoutPeriod(settings))
                {
                    var localEndTime = GetEnrolmentBlackoutEndTime();
                    <h5>Enrolment Blackout Period in force till @localEndTime.ToString(constants.STD_DATETIME_FORMAT)</h5>
                }
                <p>
                    This procedure will automatically enrol participants into their selected courses.<br />
                    Auto-enrolment is considered a fair and equitable way of allocating participants to an oversubscribed course.
                </p>
                <p>For Term 1 the procedure allocates places as follows...</p>
                <ol>
                    <li>The first <strong>@settings.AutoEnrolNewParticipantPercent%</strong> of places are allocated to new participants, if any.</li>
                    <li>The remainder of places are allocated on a <strong>@settings.AutoEnrolRemainderMethod</strong> basis.</li>
                </ol>
                <p>
                    For Terms 2 thru 4 procedure allocates places on a first in wins basis.
                    The parameters applied to these rules may be changed in System Settings.
                </p>
                <p>
                    <strong>Is Term Auto-Enrolment Finalised?</strong> (see below) should be checked on the final auto-enrolment prior to the start of term 1.<br />
                    Once checked, any future term enrolment will be automatically enrolled if a place is available.
                    If left unchecked, enrolment requests will be waitlisted only.
                </p>
                <p>
                    <strong>Queue email for ALL participants?</strong> (see below) should be checked on the first auto-enrolment for each term.<br />
                    Normally, only participants whose enrolment waitlist status has changed will receive an email.
                    If checked, an enrolment email will be queued for every participant irrespective of changed waitlist status.
                </p>


                <MessageBox @ref="@messageBox" />

                <DxFormLayout Enabled=@IsProcessing>
                    <DxFormLayoutItem Caption="Current Enrolment Term" ColSpanMd="12">
                        <TermsComboBox Terms="@terms"
                                       @bind-SelectedTerm="@selectedTerm"
                                       @bind-SelectedTerm:after=@(() => SelectedTermChanged(selectedTerm)) />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Is Term Random Enrolment Finalised?" ColSpanMd="12">
                        <DxCheckBox Alignment="CheckBoxContentAlignment.Right" @bind-Checked="@IsClassAllocationFinalised"
                                    Enabled=@(!IsClassAllocationFinalised) />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Queue Email For ALL participants?" ColSpanMd="12">
                        <DxCheckBox Alignment="CheckBoxContentAlignment.Right" @bind-Checked="@ForceEmailQueue" />
                    </DxFormLayoutItem>
                    <p />
                    <DxFormLayoutItem ColSpanMd="12">
                        <Template>
                            <DxButton Visible=@(!IsProcessing) Text="Process" RenderStyle="@ButtonRenderStyle.Primary" Click="@Process" />
                            <DxButton Visible=@(!IsProcessing) Text="Cancel" RenderStyle="@ButtonRenderStyle.Secondary" Click="@Close" />
                            <DxButton Context="buttonContext" Visible=@(IsProcessing)
                                      RenderStyle="ButtonRenderStyle.Success" CssClass="col col-12"
                                      RenderStyleMode="ButtonRenderStyleMode.Contained">
                                <span class="spinner-border spinner-border-sm" role="status" />&nbsp;Processing
                            </DxButton>
                        </Template>
                    </DxFormLayoutItem>
                </DxFormLayout>

            </div>
        </div>
}
<style>
    .box-position {
        align-items: @((ws.IsLargeScreen) ? "start" : "center");
    }
</style>

@code {
    bool IsReady;
    bool IsProcessing;
    bool IsClassAllocationFinalised { get; set; }
    bool DoFullEnrolment;
    bool ForceEmailQueue;
    string? errorMessage;
    SystemSettings? settings;
    Term? selectedTerm;
    Term? FirstTermNextYear;
    string? autoEnrolDay;
    string? autoEnrolOccirence;
    List<Term> terms { get; set; }

    MessageBox? messageBox;
    U3ADbContext dbc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        autoEnrolDay = dbc.WeekDay.First(x => x.ID == settings.AutoEnrolAllocationDay).Day;
        autoEnrolOccirence = new AutoEnrollOccurrences().First(x => x.Key == settings.AutoEnrolAllocationOccurs).Value;
        terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
        selectedTerm = await BusinessRule.CurrentTermAsync(dbc);
        if (selectedTerm != null)
        {
            FirstTermNextYear = await BusinessRule.FirstTermNextYearAsync(dbc, selectedTerm.Year);
            if (FirstTermNextYear != null
                && DateTime.Today >= FirstTermNextYear.EnrolmentStartDate) { selectedTerm = FirstTermNextYear; }
            IsClassAllocationFinalised = selectedTerm.IsClassAllocationFinalised;
        }
        IsReady = true;
    }

    void SelectedTermChanged(Term newValue)
    {
        selectedTerm = newValue;
        IsClassAllocationFinalised = selectedTerm.IsClassAllocationFinalised;
        StateHasChanged();
    }


    async Task Process()
    {
        if (await IsDataOk())
        {
            errorMessage = null;
            IsProcessing = true;
            StateHasChanged();
            DateTime? emailDate = (BusinessRule.IsEnrolmentBlackoutPeriod(settings))
                                    ? settings.EnrolmentBlackoutEndsUTC : null;
            await BusinessRule.AutoEnrolParticipantsAsync(dbc, selectedTerm,
                                                            IsClassAllocationFinalised,
                                                            ForceEmailQueue, emailDate);
            var tenant = await tenantService.GetTenantInfoAsync();
            await BusinessRule.BuildScheduleAsync(dbc, TenantDbfactory, tenant.Identifier);
            IsProcessing = false;
            StateHasChanged();
            await messageBox.ShowOkOnlyAsync("Process Complete",
                    $"{selectedTerm.Name} Enrolments have been allocated.");
            NavigationManager.NavigateTo("/");
        }
    }

    async Task<bool> IsDataOk()
    {
        bool result = true;
        string? msg = null;
        if (selectedTerm == null)
        {
            msg = "<p>*** You must select the current Term ***</p>";
            await messageBox.ShowOkOnlyAsync("Select the Term", msg);
            result = false;
        }
        else
        {
            if (BusinessRule.IsEnrolmentBlackoutPeriod(settings))
            {
                var localEndTime = GetEnrolmentBlackoutEndTime();
                result = await messageBox.ShowAsync("Enrolment Blackout",
                                                    $@"<p>You are in the enrolment blackout period till
                                            {localEndTime.ToString(constants.STD_DATETIME_FORMAT)}.
                                                    This procedure may cause enrolment email to be generated.</p>
                                                <p>Are you sure you wish to continue?</p");
            }
        }
        return result;
    }

    DateTime GetEnrolmentBlackoutEndTime()
    {
        var utcEndTime = settings.EnrolmentBlackoutEndsUTC.GetValueOrDefault();
        return dbc.GetLocalTime(utcEndTime);
    }

    void Close()
    {
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
