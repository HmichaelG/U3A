@page "/PersonMnt"


@using System.Diagnostics
@using DevExpress.Data.Filtering;
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using U3A.Data

@inject NavigationManager NavMan
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IWebHostEnvironment environment
@inject UserManager<ApplicationUser> UserManager


@implements IDisposable

@attribute [Authorize]

<form autocomplete="off">
    @if (!IsReady)
    {
        <LoadingIndicator />
    }
    else
    {

        <div class="row" hidden="@IsEmbedded">
            <ContextHelpTitle Title="Participants" HelpTopic="Add_Edit-Participants.html" />
        </div>
        <div class="row" hidden="@IsEmbedded">
            <div class="d-none col-lg-11 d-lg-inline">
                Participants are any persons participating in your U3A. This may include students, staff, volunteers, course leaders etc.
            </div>
        </div>


        <MessageBox @ref="@messageBox" />
        <Progress @ref="@ProgressBar" />
        <DateFilter @ref=DateFilter />

        <SelectDocumentTemplatePopup @ref="@selectDocumentTemplatePopup" dbContext="@dbc"
                                     DocumentTemplates="@DocumentTemplates" SendTo="@SendTo" />

        <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

        <div hidden="@IsEmbedded">
            <DxTabs @ref="@dxTabs" TabClick="@OnTabClick">
                <DxTabPage Text="Participants" />
                <DxTabPage Text="Leaders" />
                <DxTabPage Text="Clerks" />
                <DxTabPage Text="Committee" />
                <DxTabPage Text="Life Members" />
                <DxTabPage Text="All Volunteers" />
                <DxTabPage Text="@DateJoinedTabCaption" Click="@OnDateJoinedTabClick" />
                <DxTabPage Text="@DateCeasedTabCaption" Click="@OnDateCeasedTabClick" />
                <DxTabPage Text="@LastUpdateTabCaption" Click="@OnLastUpdateTabClick" />
                <DxTabPage Text="Unfinancial" />
                <DxTabPage Text="All Records" />
            </DxTabs>
        </div>

        <FullScreen>
            <ContentTemplate>
                <DxGrid Data="@Persons" @ref=@mainGrid
                        @bind-SelectedDataItems="@SelectedDataItems"
                        KeyFieldName="ID"
                        PopupEditFormCssClass="popup-width"
                        EditMode="GridEditMode.PopupEditForm"
                        CustomizeEditModel="Grid_CustomizeEditModel"
                        EditModelSaving="Grid_EditModelSaving"
                        PopupEditFormHeaderText="Add/Edit Participant"
                        DataItemDeleting="Grid_DataItemDeleting">
                    <ToolbarTemplate>
                        <GridToolbar LinkedGrid=@mainGrid LayoutKey="{CCDCC0AB-5B0D-40D5-BB06-7A21E3EDCAFA}"
                                     SpreadsheetHeaderRows="2"
                                     ToolbarFilterClosed="@(OnToolbarFilterClosed)">
                            <CustomButtonContent>
                                <DxToolbarItem IconCssClass="bi bi-envelope" Name="Communicate" Text="Communicate"
                                               BeginGroup=true
                                               Click=@OnCommunicate
                                               RenderStyle="ButtonRenderStyle.Primary"
                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                               Alignment="ToolbarItemAlignment.Right"
                                               Tooltip="Send email and/or SMS to participants">
                                </DxToolbarItem>
                            </CustomButtonContent>
                        </GridToolbar>
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridSelectionColumn FixedPosition="GridColumnFixedPosition.Left"
                                               Width="2rem" Visible="@(DateCeasedTabCaption == "Date Ceased")" />
                        <DxGridCommandColumnEx FixedPosition="GridColumnFixedPosition.Left"
                                               Width="6rem" DeleteButtonVisible=@(!IsEmbedded) />
                        <DxGridDataColumn FixedPosition="GridColumnFixedPosition.Left"
                                          Caption="ID" FieldName="PersonIdentity" Width="4rem" />
                        <DxGridDataColumn FixedPosition="GridColumnFixedPosition.Left"
                                          Caption="Name" FieldName="FullNameAlpha" Width="8rem" />
                        <DxGridDataColumn Caption="Gender" FieldName="Gender" Width="5rem" />
                        <DxGridDataColumn Caption="LegacyID" FieldName="ConversionID" Visible=false DisplayFormat="{0:F0}" />
                        <DxGridBandColumn Caption="Address">
                            <Columns>
                                <DxGridDataColumn Caption="Street" FieldName="Address" Visible=true Width="12rem" />
                                <DxGridDataColumn Caption="City" FieldName="City" Width="9rem" />
                                <DxGridDataColumn Caption="State" FieldName="State" Visible=false />
                                <DxGridDataColumn Caption="P'code" FieldName="Postcode" DisplayFormat="{0:D}" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Contact Detail">
                            <Columns>
                                <DxGridDataColumn Caption="Email" FieldName="Email" Visible=true Width="15rem" />
                                <DxGridDataColumn Caption="Domain" FieldName="Domain" Visible=false />
                                <DxGridDataColumn Caption="Phone" FieldName="HomePhone" Visible=false />
                                <DxGridDataColumn Caption="Mobile" FieldName="AdjustedMobile" Visible=true Width="5rem" />
                                <DxGridDataColumn Caption="Silent?" FieldName="SilentNumberShortDisplayText" Visible=true Width="4rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Mail Options">
                            <Columns>
                                <DxGridDataColumn Caption="Trx Via" FieldName="@nameof(Person.SendTransactionalEmailVia)" Visible=true Width="5rem" />
                                <DxGridDataColumn Caption="B'cast Via" FieldName="Communication" Visible=true Width="5rem" />
                                <DxGridDataColumn Caption="SMS Opt-Out?" FieldName="SMSOptOut" Visible=false Width="6rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Leadership Role">
                            <Columns>
                                <DxGridDataColumn Caption="Leader?" FieldName="IsCourseLeader" Visible="@true" Width="5rem" />
                                <DxGridDataColumn Caption="Clerk?" FieldName="IsCourseClerk" Visible="@true" Width="5rem" />
                                <DxGridDataColumn Caption="Life?" FieldName="IsLifeMember" Visible="@true" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Emergency Contact" Visible="false">
                            <Columns>
                                <DxGridDataColumn Caption="Contact" FieldName="ICEContact" Visible=false />
                                <DxGridDataColumn Caption="Phone" FieldName="ICEPhone" Visible=false />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridDataColumn Caption="Vax-Cert?" FieldName="VaxCertificateViewed" Visible="@settings.RequireVaxCertificate" Width="4rem" />
                        <DxGridDataColumn Caption="Occupation" FieldName="Occupation" Visible=false />
                        <DxGridDataColumn Caption="DOB" FieldName="BirthDate" Visible=false />
                        <DxGridDataColumn Caption="Joined" FieldName="DateJoined" Width="6rem" />
                        <DxGridDataColumn Caption="Fin-To" FieldName="FinancialToBriefText" Width="6rem" SortMode="GridColumnSortMode.Value" />
                        <DxGridDataColumn Caption="Ceased" FieldName="DateCeased" Visible="@(DateCeasedTabCaption != "Date Ceased" || dxTabs.ActiveTabIndex == 9)" />
                        <DxGridDataColumn Caption="Last Update" FieldName="UpdatedOn" Width="8rem"
                                          DisplayFormat="d/M/yy HH:mm" Visible="@(LastUpdateTabCaption != "Last Update")" />
                    </Columns>
                    <GroupSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                           FieldName="ID" DisplayText="{0:n0}  Participants"
                                           FooterColumnName="FullNameAlpha" />
                    </GroupSummary>
                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                           FieldName="ID" DisplayText="{0:n0}  Participants"
                                           FooterColumnName="FullNameAlpha" />
                    </TotalSummary>

                    <EditFormTemplate Context="EditFormContext">
                        @{
                            var editItem = (Person)EditFormContext.EditModel;
                        }
                        <DxFormLayout style="white-space:nowrap">
                            <DxFormLayoutItem ColSpanMd="12">
                                <ValidationSummary />
                            </DxFormLayoutItem>
                            <div style="white-space:normal" class="m-2 w-100 alert alert-warning text-center" hidden="@(!isEmailEditing)">
                                <strong>NB:</strong> The recommended way of changing an Email address is via <b>Manage Credentials</b> within the  Member Portal.
                                <br />Changing an Email address using this procedure should be considered a measure of last resort as it bypasses important validation checks.
                            </div>
                            <DxFormLayoutGroup Caption="Personal" ColSpanMd="6">
                                <DxFormLayoutItem Caption="Title" ColSpanMd="12">
                                    <DxComboBox TData="string" TValue="string"
                                                NullText="(Optional) Select or Enter Title"
                                                Data="@titles"
                                                @bind-Text="@editItem.Title"
                                                AllowUserInput="true" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="First Name" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@editItem.FirstName" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Last Name" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@editItem.LastName" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Post-Nominals" ColSpanMd="12">
                                    <DxTextBox NullText="(Optional) PhD, BComm, RN etc"
                                               @bind-Text="@editItem.PostNominals" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Gender" ColSpanMd="12">
                                    <DxComboBox Data="@gender" @bind-Value="@editItem.Gender" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Birth Date" ColSpanMd="12">
                                    <DxDateEdit @bind-Date="@editItem.BirthDate"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Occupation/Skill" ColSpanMd="12">
                                    <DxMemo @bind-Text="@editItem.Occupation" Rows="3" autocomplete="new-password" />
                                </DxFormLayoutItem>
                            </DxFormLayoutGroup>
                            <DxFormLayoutGroup Caption="Address / Contact Information" ColSpanMd="6">
                                <DxFormLayoutItem Caption="Street" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@editItem.Address" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="City" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@editItem.City" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="State" ColSpanMd="6">
                                    <DxComboBox Data="@states" @bind-Value="@editItem.State" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Postcode" ColSpanMd="6">
                                    <DxSpinEdit @bind-Value="@editItem.Postcode" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Email" ColSpanMd="12" >
                                    <DxTextBox @bind-Text="@editItem.Email" onblur="@((EventArgs e) => {if (isEmailEditing) isEmailEditing = false;})"                                               
                                               autocomplete="new-password"
                                               ReadOnly="@(!isEmailEditing)" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                                        <Buttons>
                                            <DxEditorButton CssClass="text-warning"
                                                            IconCssClass="bi bi-pencil"
                                                            Click="@(() => {if (!isEmailEditing) isEmailEditing = true;})" />
                                        </Buttons>
                                    </DxTextBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Home Phone" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@editItem.HomePhone" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Mobile Phone" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@editItem.Mobile" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Silent Contacts" ColSpanMd="12">
                                    <DxComboBox Data="silentContactList"
                                                @bind-Value="@editItem.SilentContact"
                                                ValueFieldName="@nameof(SilentContactWrapper.Type)"
                                                TextFieldName="@nameof(SilentContactWrapper.DisplayText)">
                                    </DxComboBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Mail Preference" ColSpanMd="6">
                                    <DxComboBox Data="@Communication" @bind-Value="@editItem.Communication" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="SMS Opt-Out?" ColSpanMd="6">
                                    <DxCheckBox @bind-Checked="@editItem.SMSOptOut"
                                                Alignment="CheckBoxContentAlignment.Right" autocomplete="new-password" />
                                </DxFormLayoutItem>
                            </DxFormLayoutGroup>
                            <DxFormLayoutGroup Caption="In Case of Emergency" ColSpanMd="6">
                                <DxFormLayoutItem Caption="Contact" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@editItem.ICEContact" autocomplete="new-password" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Phone" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@editItem.ICEPhone" autocomplete="new-password" />
                                </DxFormLayoutItem>
                            </DxFormLayoutGroup>

                            <DxFormLayoutGroup Caption="Membership" ColSpanMd="6">
                                <Items>
                                    <DxFormLayoutItem Caption="Financial To" ColSpanMd="6">
                                        <DxTextBox Text="@editItem.FinancialToText"
                                                   TextExpression="@(() => editItem.FinancialToText)"
                                                   ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Date Joined" ColSpanMd="6">
                                        <DxDateEdit @bind-Date="@editItem.DateJoined" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Date Ceased" ColSpanMd="6">
                                        <DxDateEdit @bind-Date="@editItem.DateCeased" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Life Member?" ColSpanMd="6">
                                        <DxCheckBox @bind-Checked="@editItem.IsLifeMember"
                                                    Alignment="CheckBoxContentAlignment.Right" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Vax Certificate?" ColSpanMd="6"
                                                      Visible="@settings.RequireVaxCertificate">
                                        <DxCheckBox @bind-Checked="@editItem.VaxCertificateViewed"
                                                    Alignment="CheckBoxContentAlignment.Right" />
                                    </DxFormLayoutItem>
                                </Items>
                            </DxFormLayoutGroup>
                        </DxFormLayout>
                    </EditFormTemplate>
                </DxGrid>
            </ContentTemplate>
        </FullScreen>
    }
</form>

<style>
    .popup-width {
        min-width: min(65rem, 100%);
    }
</style>


@code {
    [Parameter]
    public bool IsEmbedded { get; set; }

    [Parameter]
    public string gridHeight { get; set; } = "800px";

    bool IsReady;
    IReadOnlyList<object> SelectedDataItems { get; set; }
    DateTime selectedDate;
    SystemSettings settings;
    Communication Communication;
    Term? currentTerm;
    Term? firstTermNextYear;
    PersonTitles titles = new PersonTitles();
    List<SilentContactWrapper> silentContactList = new SilentContactList();

    private List<Person> Persons { get; set; }
    private AUState states;
    private Gender gender;
    private List<Person> SendTo { get; set; }
    private List<DocumentTemplate> DocumentTemplates;
    private SelectDocumentTemplatePopup? selectDocumentTemplatePopup;
    private DateFilter DateFilter;
    private string DateJoinedTabCaption = "Date Joined";
    private string DateCeasedTabCaption = "Date Ceased";
    private string LastUpdateTabCaption = "Last Update";
    DxTabs? dxTabs;

    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal Progress? ProgressBar;
    internal string ErrorHeader;
    internal string ErrorMessage;
    U3ADbContext? dbc { get; set; }
    DocumentServer server;
    int emailsSent;
    bool isGridFilterSet;
    bool isEmailEditing;

    MessageBox? messageBox { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        states = new AUState();
        gender = new Gender();
        Communication = new Communication();
        dbc = await U3Adbfactory.CreateDbContextAsync();
        DocumentTemplates = await BusinessRule.SelectableDocumentTemplatesAsync(dbc);
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        server = new DocumentServer(dbc);
        server.DocumentSentEvent += Server_DocumentSent;
        currentTerm = await BusinessRule.CurrentTermAsync(dbc);
        await GetData();
        IsReady = true;
    }

    async Task GetData()
    {
        Persons = await BusinessRule.EditablePersonAsync(dbc);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (currentTerm == null)
            {
                await messageBox.ShowOkOnlyAsync("Current Term is undefined", "Use <strong>Add/Edit Enrolment Terms</strong> to set the current term.");
                NavMan.NavigateTo("/");
            }
            else if (!isGridFilterSet)
            {
                int tab = (IsEmbedded) ? 10 : 0;
                await SetupTab(tab);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var editModel = (Person)e.EditModel;
            editModel.DateJoined = DateTime.Today;
            editModel.State = dbc.TenantInfo.State;
        }
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Person)e.EditModel;
        if (!await IsDataOK(editModel)) { e.Cancel = true; return; }
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new Person() : dbc.Person.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        if (dataItem != null)
        {
            if (e.IsNew)
            {
                if (!(await AddEmail(editModel.Email, editModel.PersonIdentity))) { e.Cancel = true; return; }
            }
            else if (editModel.Email?.Trim().ToLower() != dataItem.Email?.Trim().ToLower())
            {
                if (!(await ChangeEmail(dataItem.Email, editModel.Email, editModel.PersonIdentity))) { e.Cancel = true; return; }
            }
            editModel.CopyTo(dataItem);
            // Post changes to the database.
            if (e.IsNew) await dbc.AddAsync(dataItem);
            if (await SaveChangesAsync())
            {
                // update the Grid.
                if (e.IsNew)
                {
                    Persons.Insert(0, dataItem);
                }
                else
                {
                    int idx = Persons.FindIndex(x => x.ID == dataItem.ID);
                    Persons[idx] = dataItem;
                }
            }
        }
    }

    async Task<bool> AddEmail(string email, string personIdentity)
    {
        var result = true;
        if (string.IsNullOrWhiteSpace(email)) { return true; }
        var hasher = new PasswordHasher<IdentityUser>();
        var user = await UserManager.FindByEmailAsync(email);
        if (user is null)
        {
            user = new ApplicationUser()
                {
                    Email = email,
                    UserName = email,
                    EmailConfirmed = true,
                    PasswordHash = hasher.HashPassword(null, personIdentity)
                };
            var callResult = await UserManager.CreateAsync(user);
            if (!callResult.Succeeded)
            {
                var msg = string.Empty;
                foreach (var err in callResult.Errors)
                {
                    msg += $"&nbsp;&nbsp;{err.Description}<br/>";
                }
                result = await messageBox.ShowAsync("Email change failed",
                                $@"<p>Your attempt to add the email address has failed because...<br/>{msg}</p>
                        <p>Are you sure you wish to continue?</p>");
            }
        }
        return result;
    }

    async Task<bool> ChangeEmail(string originalEmail, string newEmail, string personIdentity)
    {
        var result = true;
        IdentityResult callResult;
        var hasher = new PasswordHasher<IdentityUser>();
        ApplicationUser? user = null;
        if (!string.IsNullOrWhiteSpace( originalEmail)) user = await UserManager.FindByEmailAsync(originalEmail);
        if (user is null)
        {
            user = new ApplicationUser()
                {
                    Email = newEmail,
                    UserName = newEmail,
                    EmailConfirmed = true,
                    PasswordHash = hasher.HashPassword(null, personIdentity)
                };
            callResult = await UserManager.CreateAsync(user);
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(newEmail))
            {
                user.UserName = newEmail;
                user.Email = newEmail;
                callResult = await UserManager.UpdateAsync(user);
                var token = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                _ = await UserManager.ConfirmEmailAsync(user, token);
            }
            else
            {
                callResult = await UserManager.DeleteAsync(user);
            }
        }
        if (!callResult.Succeeded)
        {
            var msg = string.Empty;
            foreach (var err in callResult.Errors)
            {
                msg += $"&nbsp;&nbsp;{err.Description}<br/>";
            }
            result = await messageBox.ShowAsync("Email change failed",
                            $@"<p>Your attempt to change the email address has failed because...<br/>{msg}</p>
                        <p>Are you sure you wish to continue?</p>");
        }

        return result;
    }

    async Task<bool> IsDataOK(Person person)
    {
        bool result = true;
        if (Persons != null)
        {
            var dupHTML = await BusinessRule.GetDuplicateMarkupToContinue(dbc, person);
            if (!string.IsNullOrWhiteSpace(dupHTML))
            {
                var args = new MessageBoxArgs();
                args.Caption = "Duplicate Participant?";
                args.Message = dupHTML;
                args.OKButtonText = "Continue";
                result = await messageBox.ShowAsync(args);
            }
        }
        return result;
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        Person person = (Person)e.DataItem;
        dbc.Remove(person);
        await SaveChangesAsync();
        await GetData();
    }

    async Task<bool> SaveChangesAsync()
    {
        bool result = false;
        try
        {
            // Post changes to the database.
            await dbc.SaveChangesAsync();
            result = true;
        }
        catch (Exception ex)
        {
            ErrorHeader = "Save to database error";
            ErrorMessage = Helpers.GetErrorMessage(ex);
            await ErrorPopup.ShowPopupAsync();
            dbc?.ChangeTracker?.Clear();
        }
        return result;
    }

    async void OnDateJoinedTabClick()
    {
        if (await DateFilter.ShowAsync())
        {
            CriteriaOperator co = null;
            switch (DateFilter.FilterType)
            {
                case DateFilter.FilterTypes.OnOrAfter:
                    co = CriteriaOperator.FromLambda<Person>(x => x.DateJoined > DateFilter.FromDate.AddDays(-1));
                    DateJoinedTabCaption = $"Joined After: {DateFilter.FromDate.ToShortDateString()}";
                    break;
                case DateFilter.FilterTypes.OnOrBefore:
                    co = CriteriaOperator.FromLambda<Person>(x => x.DateJoined < DateFilter.FromDate.AddDays(1));
                    DateJoinedTabCaption = $"Joined Before: {DateFilter.FromDate.ToShortDateString()}";
                    break;
                case DateFilter.FilterTypes.DateRange:
                    co = CriteriaOperator.FromLambda<Person>(x => x.DateJoined > DateFilter.FromDate.AddDays(-1) &&
                                                   x.DateJoined < DateFilter.ToDate.AddDays(1));
                    DateJoinedTabCaption = $"Joined {DateFilter.FromDate.ToShortDateString()} - {DateFilter.ToDate.ToShortDateString()}";
                    break;
            }
            if (co != null) mainGrid.SetFilterCriteria(co);
        }
    }

    async void OnDateCeasedTabClick()
    {
        if (await DateFilter.ShowAsync())
        {
            CriteriaOperator co = null;
            switch (DateFilter.FilterType)
            {
                case DateFilter.FilterTypes.OnOrAfter:
                    co = CriteriaOperator.FromLambda<Person>(x => x.DateCeased != null && x.DateCeased > DateFilter.FromDate.AddDays(-1));
                    DateCeasedTabCaption = $"Ceased After: {DateFilter.FromDate.ToShortDateString()}";
                    break;
                case DateFilter.FilterTypes.OnOrBefore:
                    co = CriteriaOperator.FromLambda<Person>(x => x.DateCeased != null && x.DateCeased < DateFilter.FromDate.AddDays(1));
                    DateCeasedTabCaption = $"Ceased Before: {DateFilter.FromDate.ToShortDateString()}";
                    break;
                case DateFilter.FilterTypes.DateRange:
                    co = CriteriaOperator.FromLambda<Person>(x => x.DateCeased != null && x.DateCeased > DateFilter.FromDate.AddDays(-1) &&
                                                   x.DateCeased < DateFilter.ToDate.AddDays(1));
                    DateCeasedTabCaption = $"Ceased {DateFilter.FromDate.ToShortDateString()} - {DateFilter.ToDate.ToShortDateString()}";
                    break;
            }
            if (co != null) mainGrid.SetFilterCriteria(co);
        }
    }

    async void OnLastUpdateTabClick()
    {
        if (await DateFilter.ShowAsync())
        {
            CriteriaOperator co = null;
            switch (DateFilter.FilterType)
            {
                case DateFilter.FilterTypes.OnOrAfter:
                    co = CriteriaOperator.FromLambda<Person>(x => x.UpdatedOn > DateFilter.FromDate.AddDays(-1));
                    LastUpdateTabCaption = $"Updated After: {DateFilter.FromDate.ToShortDateString()}";
                    break;
                case DateFilter.FilterTypes.OnOrBefore:
                    co = CriteriaOperator.FromLambda<Person>(x => x.UpdatedOn < DateFilter.FromDate.AddDays(1));
                    LastUpdateTabCaption = $"Updated Before: {DateFilter.FromDate.ToShortDateString()}";
                    break;
                case DateFilter.FilterTypes.DateRange:
                    co = CriteriaOperator.FromLambda<Person>(x => x.UpdatedOn > DateFilter.FromDate.AddDays(-1) &&
                                                   x.UpdatedOn < DateFilter.ToDate.AddDays(1));
                    LastUpdateTabCaption = $"Updated {DateFilter.FromDate.ToShortDateString()} - {DateFilter.ToDate.ToShortDateString()}";
                    break;
            }
            if (co != null) mainGrid.SetFilterCriteria(co);
        }
    }

    async void OnTabClick(TabClickEventArgs e)
    {
        await SetupTab(e.TabIndex);
    }

    async void OnToolbarFilterClosed()
    {
        dxTabs.ActiveTabIndex = 0;
        await SetupTab(0);
        await InvokeAsync(StateHasChanged);
    }

    async Task SetupTab(int TabIndex)
    {
        if (mainGrid == null) return;
        CriteriaOperator co = null;
        DateJoinedTabCaption = "Date Joined";
        DateCeasedTabCaption = "Date Ceased";
        LastUpdateTabCaption = "Last Update";
        mainGrid.BeginUpdate();
        switch (TabIndex)
        {
            case 0:             // All financial participants not Ceased
                co = CriteriaOperator.FromLambda<Person>(x => !(x.FinancialTo < currentTerm.Year
                                                                || (x.FinancialTo == currentTerm.Year
                                                                    && (x.FinancialToTerm != null && x.FinancialToTerm < currentTerm.TermNumber))
                                                                )
                                                                && x.DateCeased == null);
                break;
            case 1:             // Leaders
                co = CriteriaOperator.FromLambda<Person>(x => x.IsCourseLeader && x.DateCeased == null && x.FinancialTo >= currentTerm.Year);
                break;
            case 2:             // Clerks
                co = CriteriaOperator.FromLambda<Person>(x => x.IsCourseClerk && x.DateCeased == null && x.FinancialTo >= currentTerm.Year);
                break;
            case 3:             // Committe
                co = CriteriaOperator.FromLambda<Person>(x => x.IsCommitteeMember && x.DateCeased == null);
                break;
            case 4:             // Life
                co = CriteriaOperator.FromLambda<Person>(x => x.IsLifeMember && x.DateCeased == null);
                break;
            case 5:             // Volunteer
                co = CriteriaOperator.FromLambda<Person>(x => x.IsVolunteer && x.DateCeased == null);
                break;
            case 9:             // Unfinancial
                co = CriteriaOperator.FromLambda<Person>(x => (x.FinancialTo < currentTerm.Year
                                                                || (x.FinancialTo == currentTerm.Year
                                                                    && (x.FinancialToTerm != null && x.FinancialToTerm < currentTerm.TermNumber))
                                                                )
                                                                && x.DateCeased == null);
                break;
            case 10:             // All Records
                co = null;
                break;
        }

        if (co != null) mainGrid.SetFilterCriteria(co); else mainGrid.ClearFilter();
        mainGrid.EndUpdate();
        isGridFilterSet = true;
    }

    async Task OnCommunicate()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await messageBox.ShowOkOnlyAsync("Make a Selection", "Select one or more participants to communicate with.");
            return;
        }
        SendTo = SelectedDataItems.Cast<Person>().OrderBy(x => x.FullNameAlpha).ToList();
        if (await selectDocumentTemplatePopup.ShowAsync())
        {
            emailsSent = 0;
            await ProgressBar.ShowAsync("Sending ... Please Wait", SelectedDataItems.Count);
            List<ExportData> exportData = await BusinessRule.GetExportDataAsync(dbc, SendTo);
            bool overridePreference = selectDocumentTemplatePopup.OverrideCommunicationPreference;
            await server.MailMerge(dbc, selectDocumentTemplatePopup.SelectedDocumentTemplate, exportData, overridePreference);
            await ProgressBar.Close();
            await messageBox.ShowOkOnlyAsync("Communication Complete", server.GetHTMLResult());
        }
    }

    async void Server_DocumentSent(object sender, DocumentSentEventArgs e)
    {
        emailsSent += e.DocumentsSent;
        await ProgressBar.SetValueAsync(emailsSent);
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
