@page "/ReceiptMnt"

@inject NavigationManager NavManager
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="row  align-content-start">
        <ContextHelpTitle Title="Add/Edit Receipts" HelpTopic="Add_Edit-Receipts.html" />
    </div>
    <div class="row">
        <div class="col-10 d-none d-md-inline">
            This procedure is intended to make adjustments and correct errors only, as
            <br />Receipts are normally created via <em>Bank Data Import</em> or the <em>Online Payment Gateway</em> (Member Portal).
            <br />At all times, the total of receipts displayed below must balance actual monies received.
            <br /><strong>Note: </strong>This procedure is intended to correct receipt transactions only. Use <em>Fee Adjustment</em> to adjust fees owing.
            <br /><strong>Hint: </strong>Group by date to display sub-totals on a daily basis.
        </div>
        <div class="col col-lg-2">
            <YearComponent @ref="@yearComponent" OnYearChangedEvent="SelectedYearChanged" />
        </div>

    </div>
    <br />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />
    <MessageBox @ref="@messageBox" PopupWidth="@messageBoxWidth" />
    <Progress @ref="@ProgressBar" />

    <DxGrid Data="@Receipts" @ref=@mainGrid CssClass="grid-height" id="myGrid"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            ShowFilterRow="false"
            ShowAllRows="false"
            KeyFieldName="ID"
            PageSize="30"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] {10, 20,30, 40,60,80, 100, 200,400 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerSwitchToInputBoxButtonCount="10"
            PagerVisibleNumericButtonCount="10"
            PagerVisible="true"
            PopupEditFormCssClass="popup-width"
            PopupEditFormHeaderText="Add/Edit Receipt"
            ValidationEnabled="true"
            CustomizeEditModel="OnCustomizeEditModel"
            EditMode="GridEditMode.PopupEditForm"
            EditModelSaving="Grid_EditModelSaving">
        <ToolbarTemplate>
            <GridToolbar LinkedGrid=@mainGrid />
        </ToolbarTemplate>
        <Columns>
            <DxGridCommandColumnEx @ref="GridCommandColumn" Width="5rem" DeleteButtonVisible=true
                                   EditButtonVisible="true" OnDeleteButtonClick="(DataItem) => DoDeleteConfirmation(DataItem)" />
            <DxGridDataColumn Caption="First Name" FieldName="Person.FirstName" Width="10rem" />
            <DxGridDataColumn Caption="Last Name" FieldName="Person.LastName" Width="10rem" />
            <DxGridDataColumn Caption="Date" FieldName="Date" DisplayFormat="@constants.SHORT_DATE_FORMAT" Width="8rem" />
            <DxGridDataColumn Caption="Description" FieldName="Description" />
            <DxGridDataColumn Caption="Identifier" FieldName="Identifier" />
            <DxGridDataColumn Caption="Financial-To" FieldName="Person.FinancialTo" DisplayFormat="{0:####}" />
            <DxGridDataColumn Caption="Amount" FieldName="Amount" DisplayFormat="{0:c2}" />
            <DxGridDataColumn Caption="Last Update" FieldName="UpdatedOn" DisplayFormat="@constants.SHORT_DATE_FORMAT" Width="8rem" Visible=false />
            <DxGridDataColumn Caption="Updated By" FieldName="User" Visible=false />
        </Columns>
        <GroupSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                               FieldName="Description" DisplayText="{0:n0} Receipts"
                               FooterColumnName="Identifier" />
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                               DisplayText="{0:c2}"
                               FieldName="Amount"
                               FooterColumnName="Amount" />
        </GroupSummary>
        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" DisplayText="{0:n0} Receipts" FieldName="Description" FooterColumnName="Identifier" />
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Amount" />
        </TotalSummary>

        <EditFormTemplate Context="EditFormContext">
            @{
                var editItem = (Receipt)EditFormContext.EditModel;
            }
            <DxFormLayout>
                <DxFormLayoutItem ColSpanMd="12">
                    <ValidationSummary />
                </DxFormLayoutItem>
                <DxFormLayoutGroup Caption="Participant's Receipt Details">
                    <DxFormLayoutItem Caption="Received From" ColSpanMd="12">
                        <DxComboBox Data="Persons"
                                    ListRenderMode="ListRenderMode.Virtual"
                                    FilteringMode="DataGridFilteringMode.Contains"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    @bind-Value="editItem.Person"
                                    TextFieldName="@nameof(Person.PersonSummary)">
                            <DxListEditorColumn FieldName="@nameof(Person.LastName)"
                                                Caption="Last Name" />
                            <DxListEditorColumn FieldName="@nameof(Person.FirstName)"
                                                Caption="First Name" />
                            <DxListEditorColumn FieldName="@nameof(Person.Mobile)"
                                                Caption="Mobile" />
                            <DxListEditorColumn FieldName="@nameof(Person.Email)"
                                                Caption="Email" />
                        </DxComboBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Current Financial To" ColSpanMd="12" Visible="@(editItem.Person != null)">
                        <div class="border p-1">@editItem?.Person?.FinancialTo</div>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Date" ColSpanMd="12">
                        <DxDateEdit @bind-Date="@editItem.Date" Mask=@constants.STD_DATE_FORMAT>
                        </DxDateEdit>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Description" ColSpanMd="12">
                        <DxTextBox @bind-Text="@editItem.Description" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Identifier" ColSpanMd="12">
                        <DxTextBox @bind-Text="@editItem.Identifier" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Amount" ColSpanMd="12">
                        <DxMaskedInput @bind-Value="@editItem.Amount" Mask="@NumericMask.Currency" />
                    </DxFormLayoutItem>
                </DxFormLayoutGroup>
                <DxFormLayoutGroup Caption="Participant's Financial Status"
                                   Visible="@((editItem.Person != null && ProcessingYear > editItem.Person.FinancialTo) ||
                                                (originalReceipt != null && ProcessingYear >= originalReceipt.Person.FinancialTo))">
                    @if (editItem.Person != null && editItem.Person.FinancialTo < ProcessingYear)
                    {
                        <DxFormLayoutItem Caption=@($"Set {editItem.Person.FullName} Financial To year to {ProcessingYear}?") ColSpanMd="12">
                            <DxCheckBox @bind-Checked=@setFinancialTo Alignment="CheckBoxContentAlignment.Right" />
                        </DxFormLayoutItem>
                    }
                    @if (originalReceipt != null && ProcessingYear == originalReceipt.Person.FinancialTo)
                    {
                        <DxFormLayoutItem Caption=@($"Reset {originalReceipt.Person.FullName} Financial To year to {ProcessingYear-1}?") ColSpanMd="12">
                            <DxCheckBox @bind-Checked=@resetOriginalFinancialTo Alignment="CheckBoxContentAlignment.Right" />
                        </DxFormLayoutItem>
                    }
                </DxFormLayoutGroup>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>

}<style>
     .popup-width {
         min-width: 40rem;
     }

     .grid-height {
         height: @gridHeight;
     }

</style>

@code {
    bool IsReady;
    bool setFinancialTo;
    bool resetOriginalFinancialTo;
    List<Receipt>? Receipts { get; set; }
    IEnumerable<Person>? Persons { get; set; }
    SystemSettings settings;
    YearComponent? yearComponent;
    Receipt originalReceipt;
    int ProcessingYear;

    DxGridCommandColumnEx? GridCommandColumn;
    MessageBox? messageBox;
    MessageBoxDialogResult messageDialogResult;
    Progress? ProgressBar;
    string? messageBoxWidth;
    string gridHeight = "100px";

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    string? ErrorHeader;
    string? ErrorMessage;
    U3ADbContext? dbc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        settings = dbc.SystemSettings.FirstOrDefault();
        IsReady = true;
    }

    void OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        setFinancialTo = false;
        resetOriginalFinancialTo = false;
        var editModel = (Receipt)e.EditModel;
        if (e.IsNew)
        {
            originalReceipt = default;
            editModel.ProcessingYear = ProcessingYear;
            editModel.Date = DateTime.Today;
            editModel.Description = "Manual Receipt Adjustment";
            setFinancialTo = true;
        }
        else
        {
            originalReceipt = new Receipt();
            editModel.CopyTo(originalReceipt);
            originalReceipt.Person = dbc.Person.Find(editModel.Person.ID);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await RefreshData();
        }
        var newHeight = await Window.FitToRemainingHeight(js, "myGrid", gridHeight);
        if (newHeight != gridHeight) { gridHeight = newHeight; InvokeAsync(StateHasChanged); }
    }


    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Receipt)e.EditModel;
        if (!e.Cancel)
        {
            // Re-query a data item from the store.
            var dataItem = e.IsNew
                                ? new Receipt()
                                : dbc.Receipt.Find(editModel.ID);
            // Assign changes from the edit model to the data item.
            if (dataItem != null)
            {
                editModel.CopyTo(dataItem);
                dataItem.Person = dbc.Person.Find(editModel.Person.ID);
                // Post changes to the database.
                if (e.IsNew)
                {
                    if (setFinancialTo)
                    {
                        await BusinessRule.SetPersonDetailsForNewReceipt(dbc, dataItem);
                    }
                    else
                    {
                        dataItem.FinancialTo = 0;
                    }
                    await dbc.AddAsync(dataItem);
                }
                else
                {
                    if (resetOriginalFinancialTo) await BusinessRule.ResetPersonDetailsForDeletedReceipt(dbc, originalReceipt, ProcessingYear);
                    if (setFinancialTo) await BusinessRule.SetPersonDetailsForEditedReceipt(dbc, originalReceipt, dataItem);
                }
                if (await SaveChangesAsync()) await RefreshData();
            }
        }
    }

    async Task DoDeleteConfirmation(Object dataItem)
    {
        var receipt = (Receipt)dataItem;
        MessageBoxArgs args = new MessageBoxArgs()
            {
                Caption = $"Reset {receipt.Person.FullName}'s Financial Status?",
                OKButtonText = "Yes and also delete",
                NoButtonText = "No, but delete anyway",
                Message = $"Reset {receipt.Person.FullName}'s Financial To year to {ProcessingYear - 1}?",
                ShowNoButton = true
            };
        _ = await messageBox.ShowAsync(args);
        switch (messageBox.MessageBoxResult)
        {
            case MessageBoxDialogResult.OkButtonClicked:
                await BusinessRule.ResetPersonDetailsForDeletedReceipt(dbc, receipt, ProcessingYear);
                await DeleteReceipt(receipt);
                break;
            case MessageBoxDialogResult.NoButtonClicked:
                await DeleteReceipt(receipt);
                break;
            case MessageBoxDialogResult.CancelButtonClicked:
                break;
        }
    }

    async Task DeleteReceipt(Receipt receipt)
    {
        dbc.Remove(receipt);
        await SaveChangesAsync();
        await RefreshData();
    }

    async Task<bool> SaveChangesAsync()
    {
        bool result = false;
        try
        {
            // Post changes to the database.
            await dbc.SaveChangesAsync();
            result = true;
        }
        catch (Exception ex)
        {
            ErrorHeader = "Save to database error";
            ErrorMessage = Helpers.GetErrorMessage(ex);
            await ErrorPopup.ShowPopupAsync();
            dbc?.ChangeTracker?.Clear();
        }
        return result;
    }


    async Task SelectedYearChanged(int NewYear)
    {
        await RefreshData();
    }

    async Task RefreshData()
    {
        if (yearComponent != null)
        {
            mainGrid.BeginUpdate();
            ProcessingYear = yearComponent.Year;
            Persons = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
            Receipts = await BusinessRule.EditableReceiptsForYearAsync(dbc, ProcessingYear);
            mainGrid.EndUpdate();
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
