@page "/ReceiptMnt"

@inject NavigationManager NavManager
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="row align-content-start">
        <ContextHelpTitle Title="Add/Edit Receipts & Refunds" HelpTopic="Add_Edit-Receipts.html" />
    </div>
    <div class="d-flex flex-row">
        <div class="flex-grow-1">
            This procedure is intended to make adjustments and correct errors only, as
            <br />Receipts are normally created via <em>Bank Data Import</em> or the <em>Online Payment Gateway</em> (Member Portal).
            <br />At all times, the total of receipts displayed below must balance actual monies received.
            <br /><strong>Note: </strong>This procedure is intended to correct receipt transactions only. Use <em>Fee Adjustment</em> to adjust fees owing.
            <br /><strong>Hint: </strong>Group by date to display sub-totals on a daily basis.
        </div>
        <div class="flex-grow-0 me-4">
            <YearComponent @ref="@yearComponent" OnYearChangedEvent="SelectedYearChanged" />
        </div>

    </div>
    <br />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />
    <MessageBox @ref="@messageBox" PopupWidth="@messageBoxWidth" />
    <Progress @ref="@ProgressBar" />

    <FullScreen DisplayOffset="13">
        <ContentTemplate>
            <DxGrid Data="@Receipts" @ref=@mainGrid
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
                    ShowFilterRow="false"
                    ShowAllRows="false"
                    KeyFieldName="ID"
                    PageSize="30"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] { 10, 20, 30, 40, 60, 80, 100, 200, 400 })"
                    PageSizeSelectorAllRowsItemVisible="true"
                    PagerSwitchToInputBoxButtonCount="10"
                    PagerVisibleNumericButtonCount="10"
                    PagerVisible="true"
                    PopupEditFormCssClass="popup-width"
                    PopupEditFormHeaderText="Add/Edit Receipt"
                    ValidationEnabled="true"
                    CustomizeEditModel="OnCustomizeEditModel"
                    EditMode="GridEditMode.PopupEditForm"
                    EditModelSaving="Grid_EditModelSaving">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid LayoutKey="{91092999-6C8B-4F8F-BC01-8A5F5FD28340}" />
                </ToolbarTemplate>
                <Columns>
                    <DxGridCommandColumnEx @ref="GridCommandColumn" Width="5rem" DeleteButtonVisible=true
                                           EditButtonVisible="true" OnDeleteButtonClick="(DataItem) => DoDeleteConfirmation(DataItem)" />
                    <DxGridDataColumn Caption="Name" FieldName="Person.FullNameAlpha" Width="15rem" />
                    <DxGridDataColumn Caption="Date" FieldName="Date" DisplayFormat="@constants.SHORT_DATE_FORMAT" Width="8rem" />
                    <DxGridDataColumn Caption="Description" FieldName="Description" />
                    <DxGridDataColumn Caption="Identifier" FieldName="Identifier" />
                    <DxGridDataColumn Caption="Receipt Fin-To" FieldName="FinancialToText" Width="8rem" TextAlignment="GridTextAlignment.Right" />
                    <DxGridDataColumn Caption="Current Fin-To" FieldName="Person.FinancialToText" Width="8rem" TextAlignment="GridTextAlignment.Right" />
                    <DxGridDataColumn Caption="Amount" FieldName="Amount" DisplayFormat="{0:c2}" Width="6rem" />
                    <DxGridDataColumn Caption="Fee" FieldName="MerchantFee" DisplayFormat="{0:c2}" Width="6rem" />
                    <DxGridDataColumn Caption="Last Update" FieldName="UpdatedOn" DisplayFormat="@constants.SHORT_DATE_FORMAT" Width="8rem" Visible=false />
                    <DxGridDataColumn Caption="Updated By" FieldName="User" Visible=false />
                    <DxGridDataColumn Width="3rem" Caption="Details" AllowGroup="false" ExportEnabled="false" FixedPosition="GridColumnFixedPosition.Right">
                        <CellDisplayTemplate>
                            <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" tooltip="Show Account &/or Enrolment Details" CssClass="w-100"
                                      RenderStyle="ButtonRenderStyle.Primary" IconCssClass="text-primary bi bi-zoom-in" Text=""
                                      Click="async() => {var selectedPerson = (((Receipt)context.DataItem)).Person;
                                                await MemberDrawerRequested.InvokeAsync((selectedPerson,currentTerm)); }">
                            </DxButton>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
                <GroupSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                       FieldName="ID" DisplayText="{0:n0} Receipts"
                                       FooterColumnName="Identifier" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                                       DisplayText="{0:c2}"
                                       FieldName="Amount"
                                       FooterColumnName="Amount" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                                       DisplayText="{0:c2}"
                                       FieldName="MerchantFee"
                                       FooterColumnName="MerchantFee" />
                </GroupSummary>
                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" DisplayText="{0:n0} Receipts" FieldName="ID" FooterColumnName="Identifier" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Amount" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MerchantFee" />
                </TotalSummary>

                <EditFormTemplate Context="EditFormContext">
                    @{
                        var editItem = (Receipt)EditFormContext.EditModel;
                    }
                    <DxFormLayout>
                        <div class="w-100 d-flex mt-1">
                            <div class="flex-grow-1" />
                            <div class="flex-grow-0 me-2">
                                <DxCheckBox @bind-Checked="@editItem.EmailCashReceipt"
                                            LabelPosition="LabelPosition.Left">Email receipt to member?</DxCheckBox>
                            </div>
                        </div>
                        <DxFormLayoutGroup Caption="Participant's Receipt Details">
                            <DxFormLayoutItem Caption="Received From" ColSpanMd="12">
                                <PersonsComboBox People="@Persons" @bind-SelectedPerson="@editItem.Person"
                                                 @bind-SelectedPerson:after="async() => OnPersonOrAmountChanged(editItem)" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Current Financial To" ColSpanMd="12" Visible="@(editItem.Person != null)">
                                <div class="border p-1">@editItem?.Person?.FinancialToText</div>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Date" ColSpanMd="12">
                                <DxDateEdit @bind-Date="@editItem.Date" Mask=@constants.STD_DATE_FORMAT>
                                </DxDateEdit>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Description" ColSpanMd="12">
                                <DxTextBox @bind-Text="@editItem.Description" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Identifier" ColSpanMd="12">
                                <DxTextBox @bind-Text="@editItem.Identifier" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Amount" ColSpanMd="12">
                                <DxMaskedInput @bind-Value="@editItem.Amount"
                                               @bind-Value:after=@(() => OnPersonOrAmountChanged(editItem))
                                               Mask="@NumericMask.Currency" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                        <DxFormLayoutGroup Caption="Participant's Financial Status"
                                           Visible=@(showFinancialToOptionsAsSet != null)>
                            @if (showFinancialToOptionsAsSet == true)
                            {
                                if (allowPartPayments)
                                {
                                    <DxFormLayoutItem Caption=@("Financial Status") ColSpanMd="12">
                                        <DxRadioGroup Items="@allowedFinancialTo" CssClass="w-100 px-2"
                                                      TextFieldName="@nameof(FinToValue.Name)"
                                                      @bind-Value=@selectedFinancialTo>
                                        </DxRadioGroup>
                                    </DxFormLayoutItem>
                                }
                                else
                                {
                                    <DxFormLayoutItem Caption=@($"Set {editItem.Person?.FullName} Financial To {ProcessingYear}?") ColSpanMd="12">
                                        <DxCheckBox @bind-Checked=@setFinancialTo Alignment="CheckBoxContentAlignment.Right" />
                                    </DxFormLayoutItem>
                                }
                            }
                            @if (showFinancialToOptionsAsSet == false)
                            {
                                if (allowPartPayments)
                                {
                                    <DxFormLayoutItem Caption=@("Financial Status") ColSpanMd="12">
                                        <DxRadioGroup Items="@allowedFinancialTo" CssClass="w-100 px-2"
                                                      TextFieldName="@nameof(FinToValue.Name)"
                                                      @bind-Value=@selectedFinancialTo />
                                    </DxFormLayoutItem>
                                }
                                else
                                {
                                    <DxFormLayoutItem Caption=@($"Reset {originalReceipt.Person.FullName} Financial To {ProcessingYear - 1}?") ColSpanMd="12">
                                        <DxCheckBox @bind-Checked=@resetOriginalFinancialTo Alignment="CheckBoxContentAlignment.Right" />
                                    </DxFormLayoutItem>
                                }
                            }
                        </DxFormLayoutGroup>
                    </DxFormLayout>
                </EditFormTemplate>
            </DxGrid>
        </ContentTemplate>
    </FullScreen>

}
<style>
     .popup-width {
     min-width: 45rem;
     }
</style>

@code {
    [Parameter]
    public EventCallback<(Person, Term)> MemberDrawerRequested { get; set; }

    bool IsReady;
    bool setFinancialTo;
    bool resetOriginalFinancialTo;
    List<Receipt>? Receipts { get; set; }
    IEnumerable<Person>? Persons { get; set; }
    SystemSettings settings;
    YearComponent? yearComponent;
    Receipt originalReceipt;
    int ProcessingYear;

    DxGridCommandColumnEx? GridCommandColumn;
    MessageBox? messageBox;
    MessageBoxDialogResult messageDialogResult;
    Progress? ProgressBar;
    string? messageBoxWidth;

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    string? ErrorHeader;
    string? ErrorMessage;
    U3ADbContext? dbc { get; set; }
    bool allowPartPayments;
    bool? showFinancialToOptionsAsSet = null; // otherwise, show as Reset
    List<FinToValue> allowedFinancialTo = new();
    FinToValue selectedFinancialTo;
    MemberFeeCalculationService service;
    Term? currentTerm;


    public class FinToValue
    {
        public string Name { get; set; }
        public int finTo { get; set; }
        public int? finToTerm { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        service = new MemberFeeCalculationService();
        allowPartPayments = settings.AllowedMemberFeePaymentTypes != MemberFeePaymentType.PerYearOnly;
        await RefreshData();
        IsReady = true;
    }

    void OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        setFinancialTo = false;
        resetOriginalFinancialTo = false;
        showFinancialToOptionsAsSet = null;
        var editModel = (Receipt)e.EditModel;
        allowedFinancialTo = new();
        if (e.IsNew)
        {
            originalReceipt = default;
            editModel.ProcessingYear = ProcessingYear;
            editModel.Date = dbc.GetLocalDate();
            editModel.Description = "Membership Fees";
            editModel.EmailCashReceipt = true;
            setFinancialTo = true;
        }
        else
        {
            originalReceipt = new Receipt();
            editModel.CopyTo(originalReceipt);
            editModel.EmailCashReceipt = false;
            originalReceipt.Person = dbc.Person.Find(editModel.Person.ID);
            OnPersonOrAmountChanged(editModel);
        }
    }

    async Task OnPersonOrAmountChanged(Receipt editItem)
    {
        if (editItem == null) { return; }
        if (editItem.Person == null) { return; }
        if (originalReceipt is not null)
        {
            var personChange = string.Empty;
            var amountChange = string.Empty;
            if (editItem.Person.ID != originalReceipt.Person.ID)
            {
                editItem.EmailCashReceipt = true;
                personChange = $"Reassigned from: {originalReceipt.Person.PersonIdentity} {originalReceipt.Person.FullName}.";
            }
            if (editItem.Amount != originalReceipt.Amount)
            {
                editItem.EmailCashReceipt = true;
                amountChange = string.Format("Amount changed from {0:c2} to {1:c2}.", originalReceipt.Amount, editItem.Amount);
            }
            if (editItem.Description == null) editItem.Description = ($"{personChange} {amountChange}").Trim();
        }
        if (editItem.Person != null
            && editItem.Person.FinancialTo < ProcessingYear) { showFinancialToOptionsAsSet = true; }
        if (originalReceipt != null && ProcessingYear == originalReceipt.Person.FinancialTo) { showFinancialToOptionsAsSet = false; }
        if (allowPartPayments)
        {
            allowedFinancialTo.Clear();
            if (showFinancialToOptionsAsSet == true)
            {
                allowedFinancialTo.Add(new FinToValue()
                {
                    Name = $"Set {editItem.Person.FullName} Financial To {ProcessingYear}?",
                    finTo = ProcessingYear,
                    finToTerm = null
                });
                allowedFinancialTo.Add(new FinToValue()
                {
                    Name = $"Set {editItem.Person.FullName} Financial To {ProcessingYear} Term 2?",
                    finTo = ProcessingYear,
                    finToTerm = 2
                });
                allowedFinancialTo.Add(new FinToValue()
                {
                    Name = $"Keep {editItem.Person.FullName} Financial To {editItem.Person.FinancialToText}?",
                    finTo = editItem.Person.FinancialTo,
                    finToTerm = editItem.Person.FinancialToTerm
                });
                var index = await CalcculateFinancialToPeriod(editItem);
                selectedFinancialTo = allowedFinancialTo[index];
            }
            else
            {
                allowedFinancialTo.Add(new FinToValue()
                {
                    Name = $"Reset {editItem.Person.FullName} Financial To {ProcessingYear - 1}?",
                    finTo = ProcessingYear - 1,
                    finToTerm = null
                });
                allowedFinancialTo.Add(new FinToValue()
                {
                    Name = $"Reset {editItem.Person.FullName} Financial To {ProcessingYear} Term 2?",
                    finTo = ProcessingYear,
                    finToTerm = 2
                });
                allowedFinancialTo.Add(new FinToValue()
                {
                    Name = $"Reset {editItem.Person.FullName} Financial To {ProcessingYear}?",
                    finTo = ProcessingYear,
                    finToTerm = null
                });
            }
        }
    }

    async Task<int> CalcculateFinancialToPeriod(Receipt receipt)
    {
        var result = 2; // keep current financial to - no change

        var startTime = DateTime.UtcNow;
        var currentTerm = await BusinessRule.CurrentTermAsync(dbc, receipt.Date);
        if (currentTerm == null) { currentTerm = await BusinessRule.CurrentTermAsync(dbc); }
        service = new MemberFeeCalculationService();
        var totalDue = await service.CalculateFeeAsync(dbc, receipt.Person, currentTerm);
        var previouslyPaid = await BusinessRule.GetPreviouslyPaidAsync(dbc, receipt.PersonID, ProcessingYear, startTime);
        var minFullMembershipFee = await service.CalculateMinimumFeePayableAsync(U3Adbfactory, receipt.Person);
        var calculationMonths = 2; //First semester number of months
        var minPartMembershipFee = await service.CalculateMinimumFeePayableAsync(U3Adbfactory, receipt.Person, calculationMonths);
        // Calculate financials
        if (receipt.Amount >= 0)
        {
            var totalPaid = receipt.Amount + previouslyPaid;
            // process a payment
            if (settings.AllowedMemberFeePaymentTypes != MemberFeePaymentType.PerYearOnly
                    && currentTerm.TermNumber <= 2
                    && totalPaid >= minPartMembershipFee
                    && totalPaid < totalDue)
            {
                result = 1; // current year part payment
            }
            else if (totalPaid >= minFullMembershipFee)
            {
                result = 0;
            }
        }
        return result;
    }


    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Receipt)e.EditModel;
        if (!e.Cancel)
        {
            // Re-query a data item from the store.
            var dataItem = e.IsNew
                                ? new Receipt()
                                : dbc.Receipt.Find(editModel.ID);
            // Assign changes from the edit model to the data item.
            if (dataItem != null)
            {
                editModel.CopyTo(dataItem);
                if (editModel.Person is Contact)
                {
                    dataItem.Person = await dbc.Contact.FindAsync(editModel.Person.ID);
                }
                else
                {
                    dataItem.Person = await dbc.Person.FindAsync(editModel.Person.ID);
                }
                // Post changes to the database.
                if (e.IsNew)
                {
                    await SetFinancialToDetails(dataItem);
                    await dbc.AddAsync(dataItem);
                }
                else
                {
                    await ResetFinancialToDetails(dataItem);
                }
                if (dataItem.EmailCashReceipt)
                {
                    dataItem.Identifier += " "; // force a change to the document
                    BusinessRule.CreateReceiptSendMailAsync(dbc);
                    dataItem.Identifier.Trim();
                }
                if (await SaveChangesAsync()) await RefreshData();
            }
        }
    }

    async Task SetFinancialToDetails(Receipt receipt)
    {
        receipt.FinancialTo = 0;
        receipt.TermPaid = null;
        if (allowPartPayments)
        {
            if (selectedFinancialTo != null)
            {
                receipt.Person.FinancialTo = selectedFinancialTo.finTo;
                receipt.Person.FinancialToTerm = selectedFinancialTo.finToTerm;
                receipt.FinancialTo = selectedFinancialTo.finTo;
                receipt.TermPaid = selectedFinancialTo.finToTerm;
            }
        }
        else
        {
            if (setFinancialTo)
            {
                await BusinessRule.SetPersonDetailsForNewReceipt(dbc, receipt);
            }
        }
    }

    async Task ResetFinancialToDetails(Receipt receipt)
    {
        receipt.FinancialTo = 0;
        receipt.TermPaid = null;
        if (allowPartPayments)
        {
            if (selectedFinancialTo != null)
            {
                receipt.Person.FinancialTo = selectedFinancialTo.finTo;
                receipt.Person.FinancialToTerm = selectedFinancialTo.finToTerm;
                receipt.FinancialTo = selectedFinancialTo.finTo;
                receipt.TermPaid = selectedFinancialTo.finToTerm;
            }
        }
        else
        {
            if (resetOriginalFinancialTo) await BusinessRule.ResetPersonDetailsForDeletedReceipt(dbc, originalReceipt, ProcessingYear);
            if (setFinancialTo)
            {
                receipt.Person.FinancialTo = ProcessingYear;
                receipt.Person.FinancialToTerm = null;
                receipt.FinancialTo = ProcessingYear;
                receipt.TermPaid = null;
            }
        }
    }

    async Task DoDeleteConfirmation(Object dataItem)
    {
        var receipt = (Receipt)dataItem;
        if (receipt.Person is Contact)
        {
            if (await messageBox.ShowAsync("Delete Receipt?", "Are you sure?"))
            {
                await DeleteReceipt(receipt);
            }
        }
        else
        {
            MessageBoxArgs args = new MessageBoxArgs()
            {
                Caption = $"Reset {receipt.Person.FullName}'s Financial Status?",
                OKButtonText = "Yes and also delete",
                NoButtonText = "No, but delete anyway",
                Message = $"Reset {receipt.Person.FullName}'s Financial To year to {ProcessingYear - 1}?",
                ShowNoButton = true
            };
            var result = await messageBox.ShowAsync(args);
            switch (messageBox.MessageBoxResult)
            {
                case MessageBoxDialogResult.OkButtonClicked:
                    await BusinessRule.ResetPersonDetailsForDeletedReceipt(dbc, receipt, ProcessingYear);
                    await DeleteReceipt(receipt);
                    break;
                case MessageBoxDialogResult.NoButtonClicked:
                    await DeleteReceipt(receipt);
                    break;
                case MessageBoxDialogResult.CancelButtonClicked:
                    break;
            }
        }
    }

    async Task DeleteReceipt(Receipt receipt)
    {
        //physically remove, override soft delete
        await dbc.Database.ExecuteSqlAsync($"Delete Receipt where ID = {receipt.ID}");
        dbc.ChangeTracker.Clear();
        await RefreshData();
    }

    async Task<bool> SaveChangesAsync()
    {
        bool result = false;
        try
        {
            // Post changes to the database.
            await dbc.SaveChangesAsync();
            result = true;
        }
        catch (Exception ex)
        {
            ErrorHeader = "Save to database error";
            ErrorMessage = Helpers.GetErrorMessage(ex);
            await ErrorPopup.ShowPopupAsync();
            dbc?.ChangeTracker?.Clear();
        }
        return result;
    }


    async Task SelectedYearChanged(int NewYear)
    {
        await RefreshData();
    }

    async Task RefreshData()
    {
        if (yearComponent != null)
        {
            currentTerm = await BusinessRule.CurrentTermAsync(dbc);
            if (currentTerm == null)
            {
                currentTerm = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
            }
            ProcessingYear = yearComponent.Year;
            if (currentTerm.Year != ProcessingYear)
            {
                currentTerm = await dbc.Term.FirstOrDefaultAsync(x => x.Year == ProcessingYear && x.TermNumber == 4);
            }
            Persons = await BusinessRule.SelectablePeopleIncludeUnfinancialAsync(dbc);
            Receipts = await BusinessRule.EditableReceiptsForYearAsync(dbc, ProcessingYear);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
