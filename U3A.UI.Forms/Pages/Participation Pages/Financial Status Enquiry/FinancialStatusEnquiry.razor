@page "/FinancialStatusEnquiry"

@using System.Diagnostics
@using Microsoft.AspNetCore.Hosting
@using DevExpress.Data.Filtering

@inject NavigationManager NavMan
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IWebHostEnvironment environment

@implements IDisposable

@attribute [Authorize]


<form autocomplete="off">
    @if (!IsReady)
    {
        <LoadingIndicator />
    }
    else
    {
        <MemberFeeAdjustment @ref="@adjustMemberFee" />

        <DxFormLayout CssClass="m-2">
            @if (!IsReadOnly)
            {
                <ContextHelpTitle Title="Financial Status Enquiry" HelpTopic=""
                                  Subtitle="Enquire about the financial status of members, including fees owed and payments made." />
            }
            <DxFormLayoutGroup Caption="Enquiry Parameters">
                <DxFormLayoutItem Caption="Enrolment Term" ColSpanMd="8">
                    <TermsComboBox Terms="@terms" @bind-SelectedTerm="@selectedTerm" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Balance Type" ColSpanMd="8">
                    <DxComboBox Data="@BalanceTypes" NullText="All Account Balances"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                @bind-Value="@balanceType" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Financial To" ColSpanMd="8">
                    <DxTagBox Data="@FinancialYears" NullText="Ignore Financial To"
                              ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                              @bind-Values="@selectedFinancialYears" />
                </DxFormLayoutItem>
                <DxButton Text="Process" RenderStyle=ButtonRenderStyle.Primary CssClass="col-12 col-md-3 mt-2" Click="@OnProcess" />
            </DxFormLayoutGroup>

        </DxFormLayout>


        <MessageBox @ref="@messageBox" />
        <Progress @ref="@ProgressBar" />
        <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

        <FullScreen DisplayOffset="17">
            <ContentTemplate>
                <DxGrid id="my-grid" Data="@Persons" @ref=@mainGrid
                        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                        CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
                        CustomizeGroupValueDisplayText="Grid_CustomizeGroupValueDisplayText"
                        CustomSummary="Grid_CustomSummary"
                        GroupFooterDisplayMode="GridGroupFooterDisplayMode.Always"
                        AllowSelectRowByClick="false"
                        ShowFilterRow="false"
                        ShowAllRows="false"
                        ValidationEnabled="true"
                        @bind-SelectedDataItems="SelectedDataItems"
                        PageSize="30"
                        PageSizeSelectorVisible="true"
                        PageSizeSelectorItems="@(new int[] {10,15, 20,30, 40,60,80, 100, 200,400 })"
                        PageSizeSelectorAllRowsItemVisible="true"
                        PagerSwitchToInputBoxButtonCount="10"
                        PagerVisibleNumericButtonCount="10"
                        PagerVisible="true">
                    <ToolbarTemplate>
                        <GridToolbar LinkedGrid=@mainGrid LayoutKey="@GridLayoutKey" SpreadsheetHeaderRows="2" >
                            <CustomButtonContent>
                                <DxToolbarItem Text="Adjust Fees" Visible=@(!IsReadOnly)
                                      IconCssClass="bi bi-currency-dollar"
                                      RenderStyle=ButtonRenderStyle.Primary
                                      Enabled=@((SelectedDataItems?.Count > 0) ? true : false)
                                      Click="@OnFeeReversal" />
                            </CustomButtonContent>
                        </GridToolbar>
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridSelectionColumn Width="2rem" FixedPosition="GridColumnFixedPosition.Left" Visible=@(!IsReadOnly) />
                        <DxGridDataColumn Caption="Member" FieldName="FullName" Width="10rem" FixedPosition="GridColumnFixedPosition.Left" />
                        <DxGridBandColumn Caption="Contact Details" Visible=false>
                            <Columns>
                                <DxGridDataColumn Caption="Email" FieldName="Email" Width="12rem" />
                                <DxGridDataColumn Caption="Mobile" FieldName="Mobile" Width="5rem" />
                                <DxGridDataColumn Caption="Home" FieldName="HomePhone" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Membership">
                            <Columns>
                                <DxGridDataColumn Caption="Joined" FieldName="DateJoined" DisplayFormat="dd-MMM-yy" Width="5rem" />
                                <DxGridDataColumn Caption="Leader?" FieldName="IsCourseLeader" Visible="@true" Width="7rem" />
                                <DxGridDataColumn Caption="Life?" FieldName="IsLifeMember" Visible="@true" Width="7rem" />
                                <DxGridDataColumn Caption="Comp?" FieldName="IsComplimentary" Visible="@true" Width="7rem" />
                                <DxGridDataColumn Caption="Fin-To" FieldName=FinancialToBriefText Width="2.5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Enrolment">
                            <Columns>
                                <DxGridDataColumn Caption="Active" FieldName="Enrolments" DisplayFormat="N0" Width="5rem" />
                                <DxGridDataColumn Caption="W/List" FieldName="Waitlisted" DisplayFormat="N0" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Membership Fees">
                            <Columns>
                                <DxGridDataColumn Caption="M'ship" FieldName="MembershipFees" DisplayFormat="c2" Width="5rem" />
                                <DxGridDataColumn Caption="Postal" FieldName="MailSurcharge" DisplayFormat="c2" Width="5rem" />
                                <DxGridDataColumn Caption="Other" FieldName="OtherFees" DisplayFormat="c2" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Course Fees">
                            <Columns>
                                <DxGridDataColumn Caption="Year" FieldName="CourseFeesPerYear" DisplayFormat="c2" Width="5rem" />
                                <DxGridDataColumn Caption="Term" FieldName="CourseFeesPerTerm" DisplayFormat="c2" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Receipts">
                            <Columns>
                                <DxGridDataColumn Caption="Last Receipt" FieldName="LastReceipt" DisplayFormat="dd-MMM-yy" Width="5rem" />
                                <DxGridDataColumn Caption="Received" FieldName="AmountReceived" DisplayFormat="c2" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridDataColumn Caption="Total" FieldName="TotalFees" DisplayFormat="c2" Width="5rem" />
                    <DxGridDataColumn Width="3rem" Visible=@(!IsReadOnly) 
                                        Caption="Details" AllowGroup="false" 
                                        ExportEnabled="false"  
                                        FixedPosition="GridColumnFixedPosition.Right">
                        <CellDisplayTemplate>
                            <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" tooltip="Show Account &/or Enrolment Details" CssClass="w-100"
                                        RenderStyle="ButtonRenderStyle.Primary" IconCssClass="text-primary bi bi-zoom-in" Text=""
                                        Click="async() => {var selectedPerson = (((PersonFinancialStatus)context.DataItem).PersonBase);
                                            await MemberDrawerRequested.InvokeAsync((selectedPerson,selectedTerm)); }">
                            </DxButton>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    </Columns>
                    <GroupSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsComplimentary" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsLifeMember" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsCourseLeader" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" DisplayText="{0:n0}" FieldName="FullName" FooterColumnName="FullName" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Waitlisted" FooterColumnName="Waitlisted" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Enrolments" FooterColumnName="Enrolments" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MembershipFees" FooterColumnName="MembershipFees" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MailSurcharge" FooterColumnName="MailSurcharge" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="CourseFeesPerYear" FooterColumnName="CourseFeesPerYear" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="CourseFeesPerTerm" FooterColumnName="CourseFeesPerTerm" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="OtherFees" FooterColumnName="OtherFees" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="AmountReceived" FooterColumnName="AmountReceived" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="TotalFees" FooterColumnName="TotalFees" />
                    </GroupSummary>
                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsComplimentary" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsLifeMember" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsCourseLeader" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" DisplayText="{0:n0}" FieldName="FullName" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Waitlisted" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Enrolments" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MembershipFees" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MailSurcharge" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="CourseFeesPerYear" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="CourseFeesPerTerm" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="OtherFees" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="AmountReceived" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="TotalFees" />
                    </TotalSummary>
                </DxGrid>
            </ContentTemplate>
        </FullScreen>
    }
</form>

@code {
    [Parameter]
    public bool IsReadOnly { get; set; } = false;
    [Parameter]
    public string GridLayoutKey { get; set; } = "{D82F7F55-5055-4E58-B07C-DDC2B73704EB}";
    [Parameter]
    public EventCallback<(Person, Term)> MemberDrawerRequested { get; set; }

    bool IsReady;

    List<PersonFinancialStatus>? Persons { get; set; }
    List<Person>? people { get; set; }
    List<Term>? terms { get; set; }
    Term? selectedTerm { get; set; }
    Term? lastTerm;
    List<int> FinancialYears;
    IEnumerable<int>? selectedFinancialYears;
    string[] BalanceTypes = { "Debit (Money Owing)", "Credit (Refund Due)", "All Non-Zero" };
    string balanceType;

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    Progress? ProgressBar;
    string ErrorHeader;
    string ErrorMessage;
    U3ADbContext? dbc { get; set; }
    MemberFeeAdjustment? adjustMemberFee;

    MessageBox? messageBox { get; set; }
    IReadOnlyList<object> SelectedDataItems { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        selectedTerm = await BusinessRule.CurrentTermAsync(dbc);
        terms = await BusinessRule.GetAllTermsInCurrentYearAsync(dbc, selectedTerm);
        people = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
        FinancialYears = new List<int>();
        FinancialYears.AddRange(people
                                .OrderByDescending(x => x.FinancialTo)
                                .Select(x => x.FinancialTo).Distinct());
        IsReady = true;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (selectedTerm == null)
            {
                await messageBox.ShowOkOnlyAsync("Current Term is undefined", "Use <strong>Add/Edit Enrolment Terms</strong> to set the current term.");
                NavMan.NavigateTo("/");
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task OnProcess()
    {
        if (selectedTerm == null || selectedTerm != lastTerm)
        {
            await ProgressBar.ShowSpinnerAsync("Calculating Financial Status .. Please Wait");
            Persons = new List<PersonFinancialStatus>();
            var i = 0;
            var service = await MemberFeeCalculationService.CreateAsync(dbc, selectedTerm);
            foreach (var p in people)
            {
                await service.CalculateFeeAsync(p);
                Persons.Add(service.PersonWithFinancialStatus);
                i++;
                if (i % 50 == 0) { await ProgressBar.SetValueAsync(i); }
            }
            await ProgressBar.Close();
            lastTerm = selectedTerm;
        }
        mainGrid.ClearFilter();
        CriteriaOperator? opFees = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.TotalFees >= decimal.MinValue && x.TotalFees <= decimal.MaxValue);
        CriteriaOperator? opFinToYears = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.FinancialTo >= int.MinValue && x.FinancialTo <= int.MaxValue); ;
        if (balanceType != null)
        {
            if (balanceType.StartsWith("Debit"))
            {
                opFees = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.TotalFees > 0);
            }
            else
            {
                if (balanceType.StartsWith("Credit"))
                {
                    opFees = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.TotalFees < 0);
                }
                else opFees = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.TotalFees != 0);
            }
        }
        if (selectedFinancialYears?.Count() > 0)
        {
            opFinToYears = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => selectedFinancialYears.Contains(x.FinancialTo));
        }
        var op = GroupOperator.And(opFees, opFinToYears);
        mainGrid.SetFilterCriteria(op);
    }

    string[] customBools = { "IsComplimentary",
                                "IsLifeMember",
                                "IsCourseLeader"
                    };

    void Grid_CustomSummary(GridCustomSummaryEventArgs e)
    {
        if (customBools.Contains(e.Item.FieldName))
        {
            switch (e.SummaryStage)
            {
                case GridCustomSummaryStage.Start:
                    e.TotalValue = (int)0;
                    break;
                case GridCustomSummaryStage.Calculate:
                    if ((bool)e.GetRowValue(e.Item.FieldName)) e.TotalValue = (int)e.TotalValue + 1;
                    break;
            }
        }
    }

    string[] moneys = { "MembershipFees",
                            "MailSurcharge",
                            "CourseFeesPerYear",
                            "CourseFeesPerTerm",
                            "OtherFees",
                            "AmountReceived",
                            "TotalFees"};
    string[] numbers = { "FullName" ,
                             "IsComplimentary",
                             "IsLifeMember",
                             "IsCourseLeader",
                             "Waitlisted",
                             "Enrolments"};

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (moneys.Contains(e.Item.FieldName))
            e.DisplayText = string.Format("{0:c2}", e.Value);
        if (numbers.Contains(e.Item.FieldName))
            e.DisplayText = string.Format("{0:N0}", e.Value);
    }

    void Grid_CustomizeGroupValueDisplayText(GridCustomizeGroupValueDisplayTextEventArgs e)
    {
        if (moneys.Contains(e.FieldName))
            e.DisplayText = string.Format("{0:c2}", e.Value);
        if (numbers.Contains(e.FieldName))
            e.DisplayText = string.Format("{0:N0}", e.Value);
    }

    async Task OnFeeReversal()
    {
        if (await adjustMemberFee.ShowAsync())
        {
            foreach (var p in SelectedDataItems)
            {
                PersonFinancialStatus person = (PersonFinancialStatus)p;
                if (adjustMemberFee.FeeAmount != 0)
                {
                    Fee fee = new Fee
                        {
                            Amount = adjustMemberFee.FeeAmount,
                            Date = adjustMemberFee.ProcessingDate,
                            Description = adjustMemberFee.FeeDescription,
                            Person = await dbc.Person.FindAsync(person.PersonBase.ID),
                            IsMembershipFee = false,
                            ProcessingYear = selectedTerm.Year
                        };
                    await dbc.Fee.AddAsync(fee);
                }
            }
            await dbc.SaveChangesAsync();
            mainGrid.ClearSelection();
            lastTerm = null;
            await messageBox.ShowOkOnlyAsync("Fees Adjusted!",
            "The selected fee adjustments have been made. Click the <strong>Process</strong> to review the changes.");
        }
        else
        {
            await messageBox.ShowOkOnlyAsync("Cancelled!", "Fee adjustment was cancelled by you.");
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
