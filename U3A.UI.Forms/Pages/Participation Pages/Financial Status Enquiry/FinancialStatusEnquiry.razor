@page "/FinancialStatusEnquiry"

@using System.Diagnostics
@using Microsoft.AspNetCore.Hosting
@using DevExpress.Data.Filtering
@using System.Collections.Concurrent
@using Serilog

@inject NavigationManager NavMan
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IWebHostEnvironment environment

@implements IDisposable

@attribute [Authorize]


<form autocomplete="off">
    @if (!IsReady)
    {
        <LoadingIndicator />
    }
    else
    {
        <MemberFeeAdjustment @ref="@adjustMemberFee" />

        <DxFormLayout CssClass="m-2">
            @if (!IsReadOnly)
            {
                <ContextHelpTitle Title="Financial Status Enquiry" HelpTopic=""
                                  Subtitle="Enquire about the financial status of members, including fees owed and payments made." />
            }
        </DxFormLayout>


        <MessageBox @ref="@messageBox" />
        <Progress @ref="@ProgressBar" />
        <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

                <DxToolbar CssClass="col col-12 mb-1 me-2">
                    <Items>
                        <DxToolbarItem>
                            <Template Context="termContext">
                                <div class="text-fl-primary pe-2">Term</div>
                                <TermsComboBox Terms="@terms"
                                               @bind-SelectedTerm="@selectedTerm"
                                               @bind-SelectedTerm:after=@OnProcess />
                            </Template>
                        </DxToolbarItem>
                        <DxToolbarItem BeginGroup="true">
                            <Template Context="balanceContext">
                                <div class="text-fl-primary px-2">Balance</div>
                                <DxComboBox Data="@BalanceTypes" NullText="All Account Balances"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            @bind-Value="@balanceType"
                                            @bind-Value:after=@ApplyFilter />
                            </Template>
                        </DxToolbarItem>
                        <DxToolbarItem BeginGroup="true">
                            <Template Context="fintoContext">
                                <div class="text-fl-primary px-2">Fin-To</div>
                                <DxTagBox Data="@FinancialYears" NullText="All Financial To" style="min-width: 15em;"
                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                          @bind-Values="@selectedFinancialYears"
                                          @bind-Values:after=@ApplyFilter />
                            </Template>
                        </DxToolbarItem>
                        <DxToolbarItem BeginGroup="true">
                            <Template Context="courseContext">
                                <div class="text-fl-primary px-2">Course</div>
                                <DxComboBox Data="@courses" style="min-width: 30em;"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            NullText="Ignore Courses"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            ListRenderMode="ListRenderMode.Virtual"
                                            TextFieldName="@nameof(Course.Name)"
                                            @bind-Value="@selectedCourse"
                                            @bind-Value:after=@ApplyFilter />
                            </Template>
                        </DxToolbarItem>
                        <DxToolbarItem Text="Refresh" Visible=@(!IsReadOnly) 
                                       BeginGroup="true" CssClass="my-2"
                                       Alignment=ToolbarItemAlignment.Right                                       
                                       IconCssClass="bi bi-database"
                                       RenderStyle=ButtonRenderStyle.Primary
                                       Click="@OnProcess" />
                    </Items>
                </DxToolbar>
        <FullScreen ToggleButtonRightSideOffset="1.1rem" DisplayOffset="7" @ref=@fullScreen>
            <ContentTemplate>
                <DxGrid id="my-grid" Data="@Persons" @ref=@mainGrid
                        @bind-SelectedDataItems="SelectedDataItems"
                        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                        CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
                        CustomizeGroupValueDisplayText="Grid_CustomizeGroupValueDisplayText"
                        CustomSummary="Grid_CustomSummary"
                        GroupFooterDisplayMode="GridGroupFooterDisplayMode.Always"
                        ShowFilterRow="false"
                        ShowAllRows="false">
                    <ToolbarTemplate>
                        <GridToolbar LinkedGrid=@mainGrid LayoutKey="@GridLayoutKey" SpreadsheetHeaderRows="2" >
                            <CustomButtonContent>
                                      <DxToolbarItem Text="Adjust Fees" Visible=@(!IsReadOnly) 
                                       BeginGroup="true"              
                                        Alignment=ToolbarItemAlignment.Right
                                       IconCssClass="bi bi-currency-dollar"
                                       RenderStyle=ButtonRenderStyle.Primary
                                       Enabled=@((SelectedDataItems?.Count > 0) ? true : false)
                                       Click="@OnFeeReversal" />
                            </CustomButtonContent>
                        </GridToolbar>
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridSelectionColumn Width="2rem" FixedPosition="GridColumnFixedPosition.Left" Visible=@(!IsReadOnly) />
                        <DxGridDataColumn Caption="Member" FieldName="FullName" Width="10rem" FixedPosition="GridColumnFixedPosition.Left" />
                        <DxGridBandColumn Caption="Contact Details" Visible=false>
                            <Columns>
                                <DxGridDataColumn Caption="Email" FieldName="Email" Width="12rem" />
                                <DxGridDataColumn Caption="Mobile" FieldName="Mobile" Width="5rem" />
                                <DxGridDataColumn Caption="Home" FieldName="HomePhone" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Membership">
                            <Columns>
                                <DxGridDataColumn Caption="Joined" FieldName="DateJoined" DisplayFormat="dd-MMM-yy" Width="5rem" />
                                <DxGridDataColumn Caption="Leader?" FieldName="IsCourseLeader" Visible="@true" Width="7rem" />
                                <DxGridDataColumn Caption="Life?" FieldName="IsLifeMember" Visible="@true" Width="7rem" />
                                <DxGridDataColumn Caption="Comp?" FieldName="IsComplimentary" Visible="@true" Width="7rem" />
                                <DxGridDataColumn Caption="Fin-To" FieldName=FinancialToBriefText Width="2.5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Enrolment">
                            <Columns>
                                <DxGridDataColumn Caption="Active" FieldName="Enrolments" DisplayFormat="N0" Width="5rem" />
                                <DxGridDataColumn Caption="W/List" FieldName="Waitlisted" DisplayFormat="N0" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Membership Fees">
                            <Columns>
                                <DxGridDataColumn Caption="M'ship" FieldName="MembershipFees" DisplayFormat="c2" Width="5rem" />
                                <DxGridDataColumn Caption="Postal" FieldName="MailSurcharge" DisplayFormat="c2" Width="5rem" />
                                <DxGridDataColumn Caption="Other" FieldName="OtherFees" DisplayFormat="c2" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Course Fees">
                            <Columns>
                                <DxGridDataColumn Caption="Year" FieldName="CourseFeesPerYear" DisplayFormat="c2" Width="5rem" />
                                <DxGridDataColumn Caption="Term" FieldName="CourseFeesPerTerm" DisplayFormat="c2" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridBandColumn Caption="Receipts">
                            <Columns>
                                <DxGridDataColumn Caption="Last Receipt" FieldName="LastReceipt" DisplayFormat="dd-MMM-yy" Width="5rem" />
                                <DxGridDataColumn Caption="Received" FieldName="AmountReceived" DisplayFormat="c2" Width="5rem" />
                            </Columns>
                        </DxGridBandColumn>
                        <DxGridDataColumn Caption="Total" FieldName="TotalFees" DisplayFormat="c2" Width="5rem" />
                        <DxGridDataColumn Width="3rem" Visible=@(!IsReadOnly)
                                          Caption="Details" AllowGroup="false"
                                          ExportEnabled="false"
                                          FixedPosition="GridColumnFixedPosition.Right">
                            <CellDisplayTemplate>
                                <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" tooltip="Show Account &/or Enrolment Details" CssClass="w-100"
                                          RenderStyle="ButtonRenderStyle.Primary" IconCssClass="text-primary bi bi-zoom-in" Text=""
                                          Click="async() => {var selectedPerson = (((PersonFinancialStatus)context.DataItem).PersonBase);
                                                    await fullScreen.ResetFullScreen();
                                                    await MemberDrawerRequested.InvokeAsync((selectedPerson,selectedTerm)); }">
                                </DxButton>
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                    </Columns>
                    <GroupSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsComplimentary" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsLifeMember" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsCourseLeader" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" DisplayText="{0:n0}" FieldName="FullName" FooterColumnName="FullName" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Waitlisted" FooterColumnName="Waitlisted" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Enrolments" FooterColumnName="Enrolments" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MembershipFees" FooterColumnName="MembershipFees" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MailSurcharge" FooterColumnName="MailSurcharge" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="CourseFeesPerYear" FooterColumnName="CourseFeesPerYear" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="CourseFeesPerTerm" FooterColumnName="CourseFeesPerTerm" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="OtherFees" FooterColumnName="OtherFees" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="AmountReceived" FooterColumnName="AmountReceived" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="TotalFees" FooterColumnName="TotalFees" />
                    </GroupSummary>
                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsComplimentary" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsLifeMember" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" DisplayText="{0:n0}" FieldName="IsCourseLeader" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" DisplayText="{0:n0}" FieldName="FullName" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Waitlisted" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Enrolments" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MembershipFees" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="MailSurcharge" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="CourseFeesPerYear" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="CourseFeesPerTerm" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="OtherFees" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="AmountReceived" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="TotalFees" />
                    </TotalSummary>
                </DxGrid>
            </ContentTemplate>
        </FullScreen>
    }
</form>

@code {
    [Parameter]
    public bool IsReadOnly { get; set; } = false;
    [Parameter]
    public string GridLayoutKey { get; set; } = "{D82F7F55-5055-4E58-B07C-DDC2B73704EB}";
    [Parameter]
    public EventCallback<(Person, Term)> MemberDrawerRequested { get; set; }

    bool IsReady;

    // values for fee adjustment
    string FeeDescription = "Fee adjustment";
    DateTime ProcessingDate = DateTime.Today;
    decimal FeeAmount = 0.00M;

    List<PersonFinancialStatus>? Persons { get; set; }
    List<Person>? people { get; set; }
    List<Term>? terms { get; set; }
    Term? selectedTerm { get; set; }
    Term? lastTerm;

    private List<Course> courses { get; set; }
    private Course? selectedCourse { get; set; }

    List<string> FinancialYears;
    IEnumerable<string>? selectedFinancialYears;
    string[] BalanceTypes = { "Debit (Money Owing)", "Credit (Refund Due)", "All Non-Zero" };
    string balanceType;
    FullScreen? fullScreen;

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    Progress? ProgressBar;
    string ErrorHeader;
    string ErrorMessage;
    U3ADbContext? dbc { get; set; }
    MemberFeeAdjustment? adjustMemberFee;

    MessageBox? messageBox { get; set; }
    IReadOnlyList<object> SelectedDataItems { get; set; }
    bool isCalculationDone = false;
    List<(Guid CourseID, Guid PersonID)> enrolmentsByCourseIDOnly;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        selectedTerm = await BusinessRule.CurrentTermAsync(dbc);
        terms = await BusinessRule.GetAllTermsInCurrentYearAsync(dbc, selectedTerm);
        people = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
        FinancialYears = new List<string>();
        FinancialYears.AddRange(people
                                .OrderBy(x => x.FinancialToText)
                                .Select(x => x.FinancialToText).Distinct());
        IsReady = true;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (selectedTerm == null)
            {
                await messageBox.ShowOkOnlyAsync("Current Term is undefined", "Use <strong>Add/Edit Enrolment Terms</strong> to set the current term.");
                NavMan.NavigateTo("/");
            }
            else
            {
                if (!isCalculationDone) { await OnProcess(); isCalculationDone = true; }
            }
        }
    }

    async Task OnProcess()
    {
        if (selectedTerm == null) return;
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        var s = new Stopwatch();
        s.Start();
        await ProgressBar.ShowSpinnerAsync("Calculating Financial Status .. Please Wait");
        MemberFeeCalculationService service;
        service = await MemberFeeCalculationService.CreateAsync(dbc, selectedTerm);
        await Parallel.ForEachAsync(people, async (p, _) =>
        {
            service.CalculateFee(p);
        });
        Persons = service.PeopleWithFinancialStatus.OrderBy(x => x.FullName).ToList();
        courses = await BusinessRule.SelectableCoursesByTermAsync(dbc, selectedTerm.Year, selectedTerm.TermNumber);
        enrolmentsByCourseIDOnly =
            await BusinessRule.EnrolmentsByCourseIDOnlyAsync(dbc, selectedTerm);
        await ProgressBar.Close();
        lastTerm = selectedTerm;
        ApplyFilter();
        Log.Information("Financial Status Enquiry: On Process {0}", s.ElapsedMilliseconds);
    }

    void ApplyFilter()
    {
        mainGrid.ClearFilter();
        CriteriaOperator? opFees = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.TotalFees >= decimal.MinValue && x.TotalFees <= decimal.MaxValue);
        CriteriaOperator? opFinToYears = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.FinancialTo >= int.MinValue && x.FinancialTo <= int.MaxValue); 
        CriteriaOperator? opCourse = null;
        if (balanceType != null)
        {
            if (balanceType.StartsWith("Debit"))
            {
                opFees = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.TotalFees > 0);
            }
            else
            {
                if (balanceType.StartsWith("Credit"))
                {
                    opFees = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.TotalFees < 0);
                }
                else opFees = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => x.TotalFees != 0);
            }
        }
        if (selectedFinancialYears?.Count() > 0)
        {
            opFinToYears = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => selectedFinancialYears.Contains(x.FinancialToText));
        }
        if (selectedCourse != null)
        {
            var personsInCourse = enrolmentsByCourseIDOnly
                                    .Where(x => x.CourseID == selectedCourse.ID)
                                    .Select(x => x.PersonID)
                                    .Distinct()
                                    .ToList();
            opCourse = CriteriaOperator.FromLambda<PersonFinancialStatus>(x => personsInCourse.Contains(x.PersonBase.ID));
        }
        var op = GroupOperator.And(opFees, opFinToYears,opCourse);
        mainGrid.SetFilterCriteria(op);
        StateHasChanged();
    }

    string[] customBools = { "IsComplimentary",
                                "IsLifeMember",
                                "IsCourseLeader"
    };

    void Grid_CustomSummary(GridCustomSummaryEventArgs e)
    {
        if (customBools.Contains(e.Item.FieldName))
        {
            switch (e.SummaryStage)
            {
                case GridCustomSummaryStage.Start:
                    e.TotalValue = (int)0;
                    break;
                case GridCustomSummaryStage.Calculate:
                    if ((bool)e.GetRowValue(e.Item.FieldName)) e.TotalValue = (int)e.TotalValue + 1;
                    break;
            }
        }
    }

    string[] moneys = { "MembershipFees",
                            "MailSurcharge",
                            "CourseFeesPerYear",
                            "CourseFeesPerTerm",
                            "OtherFees",
                            "AmountReceived",
                            "TotalFees"};
    string[] numbers = { "FullName" ,
                             "IsComplimentary",
                             "IsLifeMember",
                             "IsCourseLeader",
                             "Waitlisted",
                             "Enrolments"};

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (moneys.Contains(e.Item.FieldName))
            e.DisplayText = string.Format("{0:c2}", e.Value);
        if (numbers.Contains(e.Item.FieldName))
            e.DisplayText = string.Format("{0:N0}", e.Value);
    }

    void Grid_CustomizeGroupValueDisplayText(GridCustomizeGroupValueDisplayTextEventArgs e)
    {
        if (moneys.Contains(e.FieldName))
            e.DisplayText = string.Format("{0:c2}", e.Value);
        if (numbers.Contains(e.FieldName))
            e.DisplayText = string.Format("{0:N0}", e.Value);
    }

    async Task OnFeeReversal()
    {
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        if (await adjustMemberFee.ShowAsync())
        {
            if (adjustMemberFee.FeeAmount != 0)
            {
                foreach (var p in SelectedDataItems)
                {
                    PersonFinancialStatus person = (PersonFinancialStatus)p;
                    Fee fee = new()
                    {
                        Amount = adjustMemberFee.FeeAmount,
                        Date = adjustMemberFee.ProcessingDate,
                        Description = adjustMemberFee.FeeDescription,
                        PersonID = person.PersonBase.ID,
                        IsMembershipFee = false,
                        ProcessingYear = selectedTerm.Year
                    };
                    await dbc.Fee.AddAsync(fee);
                }
                await dbc.SaveChangesAsync();
                mainGrid.ClearSelection();
                lastTerm = null;
                if (await messageBox.ShowAsync("Fees Adjusted!",
                        @"The selected fee adjustments have been made. 
                            <br/>Click <b>Ok</b> to refresh totals now.
                            <br/>Click <b>Cancel</b> to skip the refresh."))
                        {
                            await OnProcess();
                        }
            }
            else
            {
                await messageBox.ShowOkOnlyAsync("No Adjustment Made!", "No adjustment made because the fee adjustment amount was zero.");
            }
        }
        else
        {
            await messageBox.ShowOkOnlyAsync("Cancelled!", "Fee adjustment was cancelled by you.");
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
