@page "/AttendanceAnalysisPage"

@using U3A.UI.Reports.Pages

@inject NavigationManager NavMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


<MessageBox @ref="@messageBox" />
<MessageBox @ref="@inputBox"
            Caption="Attendance Analysis Parameters" PopupWidth="40rem"
            AffirmativeButtonClicked=OnOkButtonClicked
            NegativeButtonClicked="OnCancelButtonClicked"
            IsInputBox=true
            PopupVisible=@(!reportIsReady)>
    <TextTemplate>
        <DxFormLayout>
            <DxFormLayoutItem Caption="Report for year" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                <DxSpinEdit Value=@ReportForYear
                            ValueChanged="@((int newValue) => OnReportForYearChanged(newValue))"
                            MinValue="@constants.START_OF_TIME" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Course Types to print (select multiple items, if required)" ColSpanMd="12"
                              CaptionPosition="CaptionPosition.Vertical">
                <DxTagBox Data="@CourseTypes"
                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                          NullText="leave blank for all"
                          Values="@CourseTypesToReport"
                          ValuesChanged="@((IEnumerable<CourseType> newValues) => OnCourseTypesChanged(newValues))"
                          TextFieldName="@nameof(Course.Name)">
                </DxTagBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Courses to print (select multiple items, if required)" ColSpanMd="12"
                              CaptionPosition="CaptionPosition.Vertical">
                <DxTagBox Data="@Courses"
                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                          NullText="leave blank for all"
                          @bind-Values="@CoursesToReport"
                          TextFieldName="@nameof(Course.Name)">
                </DxTagBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Minimum months to report (Leave 0 for all)"
                              CaptionPosition="CaptionPosition.Vertical" ColSpanMd="12">
                <DxSpinEdit @bind-Value=@MinimumMonthsToReport
                            MinValue=0 MaxValue="12" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </TextTemplate>
</MessageBox>

<XtraReportViewer @bind-ReportIsReady="@reportIsReady"
                  Report="@report" />

@code {
    MessageBox? messageBox;
    MessageBox? inputBox;
    AttendanceAnalysis? report;
    bool reportIsReady = false;
    bool isReportOK = false;
    U3ADbContext dbc;

    int ReportForYear;
    int MinimumMonthsToReport = 0;
    IEnumerable<Course> Courses;
    IEnumerable<CourseType> CourseTypes;
    IEnumerable<Course> CoursesToReport;
    IEnumerable<CourseType> CourseTypesToReport;

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        ReportForYear = dbc.GetLocalTime().Year;
        CourseTypes = await BusinessRule.SelectableCourseTypesAsync(dbc);
        await OnReportForYearChanged(ReportForYear);
        await base.OnInitializedAsync();
    }

    async Task OnOkButtonClicked()
    {
        // move to local to prevent UI corruption.
        var coursesToReport = CoursesToReport.ToList();
        // if no courses selected, but course types selected, then select all courses of those types.
        if (coursesToReport == null || coursesToReport.Count() == 0)
        {
            coursesToReport = Courses.ToList();
        }

        report = new()
            {
                U3Adbfactory = U3Adbfactory,
            };
        report.Parameters["prmYear"].Value = ReportForYear;
        report.Parameters["prmCourseFilter"].Value = coursesToReport.Select(x => x.ID.ToString()).ToArray();
        report.Parameters["prmMinMonths"].Value = MinimumMonthsToReport;
        isReportOK = true;
        reportIsReady = true;
    }

    async Task OnReportForYearChanged(int newValue)
    {
        ReportForYear = newValue;
        CoursesToReport = new List<Course>();
        Courses = await dbc.Course
                        .Include(x => x.CourseType)
                        .Where(x => x.Year == ReportForYear)
                        .OrderBy(x => x.Name)
                        .ToListAsync();
        if (CourseTypesToReport != null)
        {
            Courses = Courses.Where(x => CourseTypesToReport.Select(t => t.ID).ToList().Contains(x.CourseTypeID.GetValueOrDefault()));
        }
    }

    async Task OnCourseTypesChanged(IEnumerable<CourseType> newValues)
    {
        CourseTypesToReport = newValues;
        await OnReportForYearChanged(ReportForYear);
    }

    void OnCancelButtonClicked() { if (!isReportOK) NavMan.NavigateTo("/"); isReportOK = false; }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}

