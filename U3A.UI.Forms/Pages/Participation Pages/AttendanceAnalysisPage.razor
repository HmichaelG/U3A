@page "/AttendanceAnalysisPage"

@using U3A.UI.Reports.Pages

@inject NavigationManager NavMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


<MessageBox @ref="@messageBox"
            Caption="Attendance Analysis Parameters"
            AffirmativeButtonClicked=OnOkButtonClicked
            NegativeButtonClicked="OnCancelButtonClicked"
            IsInputBox=true
            PopupVisible=@isPopupVisible>
    <TextTemplate>
        <DxFormLayout>
            <DxFormLayoutItem Caption="Report for year" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" >
                <DxSpinEdit Value=@ReportForYear
                            ValueChanged="@((int newValue) => OnReportForYearChanged(newValue))"
                            MinValue="@constants.START_OF_TIME" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Courses to print" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                <DxTagBox Data="@Courses"
                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                          NullText="leave blank for all"
                          @bind-Values="@CoursesToReport"
                          TextFieldName="@nameof(Course.Name)">
                </DxTagBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Minimum months to report (Leave 0 for all)" 
                CaptionPosition="CaptionPosition.Vertical" ColSpanMd="12">
                <DxSpinEdit @bind-Value=@MinimumMonthsToReport
                            MinValue=0 MaxValue="12" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </TextTemplate>
</MessageBox>

<XtraReportViewer @ref=@viewer Report="@report" />

@code {
    MessageBox? messageBox;
    XtraReportViewer? viewer;
    AttendanceAnalysis? report;
    bool isPopupVisible = true;
    U3ADbContext dbc;

    int ReportForYear = TimezoneAdjustment.GetLocalTime().Year;
    int MinimumMonthsToReport = 0;
    IEnumerable<Course> Courses;
    IEnumerable<Course> CoursesToReport;

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        await OnReportForYearChanged(ReportForYear);
        await base.OnInitializedAsync();
    }

    async Task OnOkButtonClicked()
    {
        isPopupVisible = false;
        report = new()
            {
                DbContext = dbc,
            };
        report.Parameters["prmYear"].Value = ReportForYear;
        report.Parameters["prmCourseFilter"].Value = CoursesToReport.Select(x => x.ID.ToString()).ToArray();
        report.Parameters["prmMinMonths"].Value = MinimumMonthsToReport;
    }

    async Task OnReportForYearChanged(int newValue)
    {
        ReportForYear = newValue;
        CoursesToReport = new List<Course>();
        Courses = await dbc.Course.Where(x => x.Year == ReportForYear).ToListAsync();
    }

    void OnCancelButtonClicked() => NavMan.NavigateTo("/");

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
}
