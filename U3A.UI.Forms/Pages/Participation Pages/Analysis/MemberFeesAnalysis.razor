@page "/MemberFeesAnalysis"

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> tenantDbFactory
@inject NavigationManager navMan

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <Progress @ref="@ProgressBar" />
    <DxWindow Visible=true Width="100dvw"
              Height="100dvh"
              PositionY="0"
              CloseOnEscape="true"
              ShowCloseButton="true"
              HeaderText="Member Fees Analysis"
              Closed="@(() => navMan.NavigateTo("/"))"
              ShowHeader="true">
        <BodyContentTemplate Context="PopupContext">
            <PivotToolbar LinkedGrid="@pivotTable"
                          DataLoadRequested="GetData"
                          LayoutKey="{3A39E5E9-34A3-47B6-92B3-83A7356C1F2E}" />
            <DxPivotTable Data="@pivotData" @ref=@pivotTable Context="context"
                          ShowRowGrandTotals="true" VirtualScrollingEnabled=true
                          ShowColumnGrandTotals="true" CssClass="pivot-table-style">
                <Fields>
                    <DxPivotTableField Field="Person.FinancialToText" Caption="Fin-To"
                                       Area="@PivotTableArea.Filter" />
                    <DxPivotTableField Field="@nameof(MemberFee.Date)" Caption="Fee-Month"
                                       GroupInterval="PivotTableGroupInterval.DateMonth"
                                       Area="@PivotTableArea.Filter" />
                    <DxPivotTableField Field="@nameof(MemberFee.MemberFeeType)" Caption="Fee Type"
                                       Area="@PivotTableArea.Filter" />
                    <DxPivotTableField Field="@nameof(MemberFee.Course)"
                                       Area="@PivotTableArea.Filter" />
                    <DxPivotTableField Field="Person.FullNameAlpha" Caption="Participant"
                                       Area="@PivotTableArea.Row" />
                    <DxPivotTableField Field="@nameof(MemberFee.Description)"
                                       Area="@PivotTableArea.Row" />
                    <DxPivotTableField Field="@nameof(MemberFee.Date)" Caption="Date"
                                       Area="@PivotTableArea.Row" />
                    <DxPivotTableField Field="@nameof(MemberFee.Amount)" Caption="Due"
                                       Area="@PivotTableArea.Data" />
                    <DxPivotTableField Field="@nameof(MemberFee.Allocated)" Caption="Paid"
                                       Area="@PivotTableArea.Data" />
                    <DxPivotTableField Field="@nameof(MemberFee.Balance)"
                                       Area="@PivotTableArea.Data" />

                </Fields>
            </DxPivotTable>
        </BodyContentTemplate>
    </DxWindow>
}
<style>
    .pivot-table-style {
        width: 100%;
        height: calc(100% - 2rem);
    }
</style>
@code {
    List<MemberFee>? pivotData { get; set; }
    bool isReady = false;
    Progress? ProgressBar;
    IPivotTable? pivotTable;
    MemberFeeCalculationService service;


    protected override async Task OnInitializedAsync()
    {
        isReady = true;
    }

    async Task GetData()
    {
        while (pivotTable == null)
        {
            await Task.Delay(100);
        }
        await ProgressBar.ShowSpinnerAsync("Calculating Financial Status .. Please Wait");
        pivotTable.BeginUpdate();
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        var currentTerm = await BusinessRule.CurrentTermAsync(dbc);
        var people = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
        pivotData = new List<MemberFee>();
        var i = 0;
        service = await MemberFeeCalculationService.CreateAsync(dbc, currentTerm);
        foreach (var p in people)
        {
            await service.CalculateFeeAsync(dbc, p, currentTerm);
            pivotData.AddRange(service.GetAllocatedMemberFees(p));
            i++;
            if (i % 50 == 0) { await ProgressBar.SetValueAsync(i); }
        }
        await ProgressBar.Close();
        pivotTable.EndUpdate();
        StateHasChanged();
    }
}
