@page "/MemberFeesAnalysis"
@using System.Collections.Concurrent
@using System.Diagnostics
@using Serilog

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> tenantDbFactory
@inject NavigationManager navMan

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <Progress @ref="@ProgressBar" />
    <ContextHelpTitle Title="Participant Fees Analysis" HelpTopic=""
                      Subtitle="" />
    <FullScreen DisplayOffset="4">
        <ContentTemplate>
            <div class="d-flex flex-column w-100">
                <PivotToolbar LinkedGrid="@pivotTable"
                              DataLoadRequested="GetData"
                              LayoutKey="{3A39E5E9-34A3-47B6-92B3-83A7356C1F2E}" />
                <DxPivotTable Data="@pivotData" @ref=@pivotTable Context="context"
                              ShowRowGrandTotals="true" VirtualScrollingEnabled=true
                              ShowColumnGrandTotals="true" CssClass="w-100 h-100">
                    <Fields>
                        <DxPivotTableField Field="@nameof(MemberFee.Amount)" Caption="Due Filter"
                                           AllowedAreas="@PivotTableAllowedAreas.Filter"
                                           Area="@PivotTableArea.Filter" />
                        <DxPivotTableField Field="@nameof(MemberFee.Allocated)" Caption="Paid Filter"
                                           AllowedAreas="@PivotTableAllowedAreas.Filter"
                                           Area="@PivotTableArea.Filter" />
                        <DxPivotTableField Field="@nameof(MemberFee.Balance)" Caption="Balance Filter"
                                           AllowedAreas="@PivotTableAllowedAreas.Filter"
                                           Area="@PivotTableArea.Filter" />
                        <DxPivotTableField Field="@nameof(MemberFee.Date)" Caption="Due Date"
                                           AllowedAreas="@allowFilterRowColumn"
                                           Area="@PivotTableArea.Filter" />
                        <DxPivotTableField Field="@nameof(MemberFee.Date)" Caption="Due Month"
                                           GroupInterval="PivotTableGroupInterval.DateMonth"
                                           AllowedAreas="@allowFilterRowColumn"
                                           Area="@PivotTableArea.Filter" />
                        <DxPivotTableField Field="@nameof(MemberFee.Course)"
                                           AllowedAreas="@allowFilterRow"
                                           Area="@PivotTableArea.Filter" />
                        <DxPivotTableField Field="Person.FullNameAlpha" Caption="Participant"
                                           AllowedAreas="@allowFilterRow"
                                           Area="@PivotTableArea.Filter" />
                        <DxPivotTableField Field="@nameof(MemberFee.Description)"
                                           AllowedAreas="@allowFilterRow"
                                           Area="@PivotTableArea.Filter" />
                        <DxPivotTableField Field="Person.FinancialToText" Caption="Fin-To"
                                           AllowedAreas="@allowFilterRowColumn"
                                           Area="@PivotTableArea.Row" />
                        <DxPivotTableField Field="@nameof(MemberFee.MemberFeeType)" Caption="Fee Type"
                                           AllowedAreas="@allowFilterRowColumn"
                                           Area="@PivotTableArea.Row" />
                        <DxPivotTableField Field="@nameof(MemberFee.PersonID)" Caption="Count"
                                           SummaryType="PivotTableSummaryType.Count"
                                           AllowedAreas="@allowDataAndFilter"
                                           Area="@PivotTableArea.Data">
                                           
                        </DxPivotTableField>
                        <DxPivotTableField Field="@nameof(MemberFee.Amount)" Caption="Due"
                                           AllowedAreas="@allowDataAndFilter"
                                           Area="@PivotTableArea.Data" />
                        <DxPivotTableField Field="@nameof(MemberFee.Allocated)" Caption="Paid"
                                           AllowedAreas="allowDataAndFilter"
                                           Area="@PivotTableArea.Data" />
                        <DxPivotTableField Field="@nameof(MemberFee.Balance)"
                                           AllowedAreas="@allowDataAndFilter"
                                           Area="@PivotTableArea.Data" />
                    </Fields>
                </DxPivotTable>
            </div>
        </ContentTemplate>
    </FullScreen>
}

@code {
    List<MemberFee>? pivotData { get; set; }
    bool isReady = false;
    Progress? ProgressBar;
    IPivotTable pivotTable;
    MemberFeeCalculationService service;
    PivotTableAllowedAreas allowDataAndFilter = PivotTableAllowedAreas.Data | PivotTableAllowedAreas.Filter;
    PivotTableAllowedAreas allowFilterRow = PivotTableAllowedAreas.Filter | PivotTableAllowedAreas.Row;
    PivotTableAllowedAreas allowFilterRowColumn = PivotTableAllowedAreas.Filter | PivotTableAllowedAreas.Row | PivotTableAllowedAreas.Column;


    protected override async Task OnInitializedAsync()
    {
        isReady = true;
    }

    async Task GetData()
    {
        var s = new Stopwatch();
        s.Start();
        await ProgressBar.ShowSpinnerAsync("Calculating Financial Status .. Please Wait");
        pivotTable.BeginUpdate();
        pivotData = new List<MemberFee>();
        var i = 0;
        MemberFeeCalculationService service;
        List<Person> people;
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        {
            var currentTerm = await BusinessRule.CurrentTermAsync(dbc);
            people = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
            service = await MemberFeeCalculationService.CreateAsync(dbc, currentTerm);
        }
        var memberFeesList = new ConcurrentBag<MemberFee>();
        await Parallel.ForEachAsync(people, async (p, _) =>
        {
            service.CalculateFee(p);
            var allocatedFees = service.GetAllocatedMemberFees(p);
            foreach (var fee in allocatedFees)
            {
                memberFeesList.Add(fee);
            }
        });
        pivotData = memberFeesList.ToList();
        await ProgressBar.Close();
        pivotTable.EndUpdate();
        StateHasChanged();
        Log.Information("MemberFeesAnalysis: GetData {0} milliseconds.", s.ElapsedMilliseconds);
    }
}
