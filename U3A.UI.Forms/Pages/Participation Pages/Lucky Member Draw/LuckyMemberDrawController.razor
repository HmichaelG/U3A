@page "/LuckyMemberDrawController"

@implements IAsyncDisposable

@using Serilog

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager navMan

<MessageBox @ref="@messageBox" />

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <main role="main" class="w-100">
        <ContextHelpTitle Title="Lucky Member Draw Controller" HelpTopic="Lucky-Member-Draw.html" />
        <div class="d-flex flex-row gap-1">
            <div class="flex-grow-1">
                <DxFormLayoutItem Caption="Draw Name" ColSpanMd="10" ColSpanXl="6">
                    <DxTextBox @bind-Text="@drawName" />
                </DxFormLayoutItem>
            </div>
            <div class="d-flex flex-grow-0 flex-row-reverse align-items-center gap-1 mt-2">
                <DxButton Text="Scan QR Code" Click="@OnScanQRCode" />
                <DxButton Text="Reset Selection" Click="@OnResetSelection"
                          RenderStyleMode="ButtonRenderStyleMode.Outline" />
                <div class="text-info"><b>@($"There are {selectedCount} participants in this draw.")</b></div>
            </div>
        </div>
        <PersonMnt @ref=@selectionList GridDisplayOffset="10" IsSelectionList="true"
                   GridLayoutKey="1085D28E-C885-4B80-4366-08DAB660B07F"
                   PageHasRendered="OnPersonSelectionListRendered"
                   SelectedParticipantsChanged="@OnParticipantsChanged" />
    </main>
}

@code {
    bool isReady = false;
    int selectedCount = 0;
    LuckyMemberDraw? draw = new();
    PersonMnt? selectionList;
    MessageBox? messageBox;
    string drawName = "Lucky Member Draw";
    bool isProcessing = false;
    private PeriodicTimer? autoSaveTimer;

    protected override async Task OnInitializedAsync()
    {
        isReady = true;
        autoSaveTimer = new PeriodicTimer(TimeSpan.FromSeconds(10));
        _ = AutoSaveLoop();
    }

    private async Task AutoSaveLoop()
    {
        try
        {
            if (autoSaveTimer is null) return;

            while (await autoSaveTimer.WaitForNextTickAsync())
            {
                if (!isProcessing && selectionList?.SelectedParticipants?.Count > 0)
                {
                    try
                    {
                        await SaveDataAsync();
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, "Error during auto-save in Lucky Member Draw Controller");
                    }
                }
            }
        }
        catch (OperationCanceledException)
        {
            // Timer was disposed
        }
    }

    async Task OnPersonSelectionListRendered()
    {
        await GetData();
        await selectionList.mainGrid.WaitForDataLoadAsync();
        selectionList.mainGrid.BeginUpdate();
        for (int i = 0; i < selectionList.mainGrid.GetVisibleRowCount(); i++)
        {
            var personID = selectionList.mainGrid.GetRowValue(i, nameof(Person.ID)) as Guid?;
            if (personID.HasValue && draw.LuckyMemberDrawEntrants.Any(x => x.PersonID == personID))
            {
                selectionList.mainGrid.SelectRow(i, true);
            }
        }
        selectionList.mainGrid.EndUpdate();
    }

    async Task GetData()
    {
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
        {
            draw = await dbc.LuckyMemberDraw
                            .Include(x => x.LuckyMemberDrawEntrants).ThenInclude(x => x.Person)
                            .FirstAsync(x => !x.IsComplete);
            selectedCount = draw.LuckyMemberDrawEntrants.Count();
        }
        else
        {
            LuckyMemberDraw draw = new()
            {
                IsComplete = false,
                Name = drawName,
            };
            dbc.LuckyMemberDraw.Add(draw);
            await dbc.SaveChangesAsync();
        }
        drawName = draw.Name;
    }

    async Task OnParticipantsChanged()
    {
        selectedCount = selectionList.SelectedParticipants.Count();
    }

    async Task OnResetSelection()
    {
        if (!await messageBox.ShowAsync("Reset Selection", "Are you sure you want to reset the selection? This will remove all selected participants from the current draw."))
        {
            return;
        }
        isProcessing = true;
        try
        {
            using var dbc = await U3Adbfactory.CreateDbContextAsync();
            if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
            {
                var draw = await dbc.LuckyMemberDraw
                                    .Include(x => x.LuckyMemberDrawEntrants).ThenInclude(x => x.Person)
                                    .FirstAsync(x => !x.IsComplete);
                dbc.RemoveRange(draw.LuckyMemberDrawEntrants);
                await dbc.SaveChangesAsync();
            }
            selectedCount = 0;
            selectionList.mainGrid.ClearSelection();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log.Information(ex, "Error resetting selection in Lucky Member Draw Controller");
        }
        finally
        {
            isProcessing = false;
        }
    }

    async Task OnScanQRCode()
    {
        if (isProcessing) return;
        isProcessing = true;
        try
        {
            await SaveDataAsync();
            navMan.NavigateTo("/LuckyMemberDrawQRCode", true);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error navigating to Lucky Member Draw QR Code page");
        }
        finally
        {
            isProcessing = false;
        }
    }

    static SemaphoreSlim? sem = new(1);
    async Task SaveDataAsync()
    {
        await sem.WaitAsync();
        try
        {
            using var dbc = await U3Adbfactory.CreateDbContextAsync();
            List<Person> participants = new();
            if (selectionList.SelectedParticipants is not null && selectionList.SelectedParticipants.Count > 0)
            {
                participants = selectionList.SelectedParticipants.Cast<Person>().ToList();
            }
            if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
            {
                draw = await dbc.LuckyMemberDraw
                                .Include(x => x.LuckyMemberDrawEntrants).ThenInclude(x => x.Person)
                                .FirstAsync(x => !x.IsComplete);
                AddParticipantsToDraw(participants);
            }
            draw.Name = drawName;
            draw.IsComplete = false;
            dbc.LuckyMemberDraw.Update(draw);
            dbc.SaveChanges();
        }
        finally
        {
            sem.Release();
        }
    }

    void AddParticipantsToDraw(List<Person>
    participants)
    {
        if (draw == null) return;
        foreach (var p in participants)
        {
            if (!draw.LuckyMemberDrawEntrants.Any(x => x.PersonID == p.ID))
            {
                var entrant = new LuckyMemberDrawEntrant
                {
                    PersonID = p.ID,
                    LuckyMemberDrawID = draw.ID
                };
                draw.LuckyMemberDrawEntrants.Add(entrant);
            }
        }
        // remove any entrants that are not in the current selection
        var entrantsToRemove = draw.LuckyMemberDrawEntrants.Where(x => !participants.Any(p => p.ID == x.PersonID)).ToList();
        foreach (var entrant in entrantsToRemove)
        {
            draw.LuckyMemberDrawEntrants.Remove(entrant);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (autoSaveTimer is not null)
        {
            autoSaveTimer.Dispose();
            autoSaveTimer = null;
        }
        if (!isProcessing)
        {
            try
            {
                await SaveDataAsync();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error during final save in Lucky Member Draw Controller dispose");
            }
        }
    }
}
