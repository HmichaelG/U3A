@page "/LuckyMemberDraw"

@using U3A.UI.Forms.Pages.Layout
@using Serilog

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager navMan


@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    @layout MinimalLayout
    <main role="main" align="center" class="w-100">

        <div class="h1 alert alert-primary" align: center>@title</div>
        <div class="center-container card">
            <h1>@prizeNumber</h1>
            <h1 class="@winnerStyle">@winner</h1>
            <h3>@location</h3>
        </div>
        <div class="d-flex flex-row-reverse gap-1">
            <DxButton Click="PickWinner" Text="Pick a Winner" Enabled=@(canDraw) />
            <DxButton Click="@OnNewDraw" RenderStyleMode="ButtonRenderStyleMode.Outline"
                      Text="New Draw"
                      Enabled=@(canDraw) />
            <DxButton Click="@OnRefreshData" RenderStyleMode="ButtonRenderStyleMode.Outline"
                      Text="Refresh Data"
                      Enabled=@(canDraw) />
            <DxButton Click="@OnClose" RenderStyleMode="ButtonRenderStyleMode.Outline"
                      Text="Finalise & Close"
                      Enabled=@(canDraw) />
            <DxButton Click="@OnRefreshData" RenderStyle="ButtonRenderStyle.Primary"
                      Text="Refresh"
                      Visible=@(!canDraw) />
        </div>

    </main>
}

@code {

    List<Guid> winners = new();
    LuckyMemberDraw? draw = new();
    string winner;
    string location = string.Empty;
    bool isReady = false;
    bool canDraw = false;
    bool isProcessing = false;
    string winnerStyle = "winner-style winner-animation";
    string title = "Lucky Member Draw";
    string prizeNumber;

    override protected async Task OnInitializedAsync()
    {
        await GetDate();
    }

    private async Task OnRefreshData()
    {
        winner = string.Empty;
        location = string.Empty;
        prizeNumber = string.Empty;
        StateHasChanged();
        await GetDate();
    }

    async Task GetDate()
    {
        if (isProcessing) return;
        try
        {
            canDraw = true;
            using var dbc = await U3Adbfactory.CreateDbContextAsync();
            canDraw = false;
            winnerStyle = "winner-style";
            title = "No draw in process";
            winner = "Please use the Controller to enroll entrants";
            if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
            {
                draw = await dbc.LuckyMemberDraw
                                .Include(x => x.LuckyMemberDrawEntrants).ThenInclude(x => x.Person)
                                .FirstAsync(x => !x.IsComplete);
                if (draw.LuckyMemberDrawEntrants.Count > 0)
                {
                    title = draw.Name;
                    winner = string.Empty;
                    canDraw = true;
                }
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error retrieving Lucky Member Draw data");
        }
        finally
        {
            isReady = true;
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task PickWinner()
    {
        canDraw = false;
        StateHasChanged();
        winner = null;
        location = string.Empty;
        prizeNumber = string.Empty;
        if (draw.LuckyMemberDrawEntrants.Count == 0) return;
        if (winners.Count >= draw.LuckyMemberDrawEntrants.Count)
        {
            winnerStyle = "winner-style";
            winner = "All participants are winners!!";
            canDraw = true;
            StateHasChanged();
            return;
        }

        // Suspense animation with delays
        winnerStyle = "winner-style winner-animation";
        for (int i = 0; i < 10; i++)
        {
            winner = draw.LuckyMemberDrawEntrants[new Random().Next(draw.LuckyMemberDrawEntrants.Count)].Person.FirstName;
            StateHasChanged();
            await Task.Delay(1000); // Simulated suspense
        }

        // Final winner selection
        Person person = null;
        do
        {
            person = draw.LuckyMemberDrawEntrants[new Random().Next(draw.LuckyMemberDrawEntrants.Count)].Person;
        }
        while (winners.Contains(person.ID)); // Ensure unique winners
        winners.Add(person.ID);

        if (winners.Count > 1)
        {
            prizeNumber = $"Prize #{winners.Count}";
        }
        else
        {
            prizeNumber = "First Prize";
        }
        winnerStyle = "winner-style";
        winner = $"{person.FirstName} {person.LastName}";
        location = person.City;
        canDraw = true;
        StateHasChanged();
    }

    void OnNewDraw()
    {
        winners.Clear();
        winner = string.Empty;
        location = string.Empty;
        prizeNumber = string.Empty;
        winnerStyle = "winner-style winner-animation";
        StateHasChanged();
    }

    void OnClose()
    {
        using var dbc = U3Adbfactory.CreateDbContext();
        if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
        {
            var draw = dbc.LuckyMemberDraw.First(x => !x.IsComplete);
            draw.IsComplete = true;
            dbc.SaveChanges();
        }
        navMan.NavigateTo("/");
    }

}
