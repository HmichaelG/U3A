@page "/LuckyMemberDraw"
@implements IDisposable

@using U3A.UI.Forms.Pages.Layout

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager navMan


@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    @layout MinimalLayout
    <main role="main" align="center" class="w-100">

        <h1 class="text-dark" align: center>@title</h1>
        <div class="center-container card">
            <h1 class="@($"text-dark")">@prizeNumber</h1>
            <h1 class="@($"text-dark {winnerStyle}")">@winner</h1>
            <h3 class="@($"text-dark")">@location</h3>
        </div>
        <div class="d-flex flex-row-reverse gap-1">
            <DxButton Click="PickWinner" Text="Pick a Winner" Enabled=@(!isProcessing) />
            <DxButton Click="@OnNewDraw" RenderStyleMode="ButtonRenderStyleMode.Outline"
                      Text="New Draw"
                      Enabled=@(!isProcessing) />
            <DxButton Click="@OnRefreshData" RenderStyleMode="ButtonRenderStyleMode.Outline"
                      Text="Refresh Data"
                      Enabled=@(!isProcessing) />
            <DxButton Click="@OnClose" RenderStyleMode="ButtonRenderStyleMode.Outline"
                      Text="Finalise & Close"
                      Enabled=@(!isProcessing) />
        </div>

    </main>
}

@code {

    List<Guid> winners = new();
    LuckyMemberDraw? draw = new();
    string winner;
    string location = string.Empty;
    bool isReady = false;
    bool isProcessing = false;
    string winnerStyle = "winner-style winner-animation";
    string title = "Lucky Member Draw";
    string prizeNumber;
    PeriodicTimer timer = new(TimeSpan.FromSeconds(1));
    CancellationTokenSource cts = new();

    override protected async Task OnInitializedAsync()
    {
        await GetDate();
    }

    private async Task OnRefreshData()
    {
        winner = string.Empty;
        location = string.Empty;
        prizeNumber = string.Empty;
        cts.Cancel(); // Cancel the current timer
        cts = new CancellationTokenSource(); // Create a new token source
        timer = new PeriodicTimer(TimeSpan.FromSeconds(1)); // Reset the timer
        await GetDate();
    }

    async Task GetDate()
    {
        isProcessing = true;
        while (await timer.WaitForNextTickAsync(cts.Token))
        {
            using var dbc = await U3Adbfactory.CreateDbContextAsync();
            if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
            {
                draw = await dbc.LuckyMemberDraw
                                .Include(x => x.LuckyMemberDrawEntrants).ThenInclude(x => x.Person)
                                .FirstAsync(x => !x.IsComplete);
                title = draw.Name;
                cts.Cancel(); // Stop the timer once we have the data
                isProcessing = false;
            }
            else
            {
                title = "Waiting for Controller...";
            }
            isReady = true;
            StateHasChanged();
        }
        StateHasChanged();
    }

    private async Task PickWinner()
    {
        winner = null;
        location = string.Empty;
        prizeNumber = string.Empty;
        isProcessing = true;
        if (draw.LuckyMemberDrawEntrants.Count == 0) return;
        if (winners.Count >= draw.LuckyMemberDrawEntrants.Count)
        {
            winnerStyle = "winner-style";
            winner = "All participants are winners!!";
            isProcessing = false;
            StateHasChanged();
            return;
        };
        StateHasChanged();

        // Suspense animation with delays
        winnerStyle = "winner-style winner-animation";
        for (int i = 0; i < 10; i++)
        {
            winner = draw.LuckyMemberDrawEntrants[new Random().Next(draw.LuckyMemberDrawEntrants.Count)].Person.FirstName;
            StateHasChanged();
            await Task.Delay(1000); // Simulated suspense
        }

        // Final winner selection
        Person person = null;
        do
        {
            person = draw.LuckyMemberDrawEntrants[new Random().Next(draw.LuckyMemberDrawEntrants.Count)].Person;
        }
        while (winners.Contains(person.ID)); // Ensure unique winners
        winners.Add(person.ID);

        if (winners.Count > 1)
        {
            prizeNumber = $"Prize #{winners.Count}";
        }
        else
        {
            prizeNumber = "First Prize";
        }
        winnerStyle = "winner-style";
        winner = $"{person.FirstName} {person.LastName}";
        location = person.City;
        isProcessing = false;
        StateHasChanged();
    }

    void OnNewDraw()
    {
        winners.Clear();
        winner = string.Empty;
        location = string.Empty;
        prizeNumber = string.Empty;
        winnerStyle = "winner-style winner-animation";
        isProcessing = false;
        StateHasChanged();
    }

    void OnClose()
    {
        using var dbc = U3Adbfactory.CreateDbContext();
        if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
        {
            var draw = dbc.LuckyMemberDraw.First(x => !x.IsComplete);
            draw.IsComplete = true;
            dbc.SaveChanges();
        }
        navMan.NavigateTo("/");
    }

    public void Dispose()
    {
        cts?.Cancel();
        cts?.Dispose();
        timer?.Dispose();
    }
}
