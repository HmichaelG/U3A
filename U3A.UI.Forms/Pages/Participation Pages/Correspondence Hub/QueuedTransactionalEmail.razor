@namespace U3A.UI.Forms

@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Microsoft.EntityFrameworkCore.Query
@using U3A.UI.Reports.Pages

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantInfoService
@inject ILogger<QueuedTransactionalEmail> Logger
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager
@implements IDisposable


@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    if (showPDF)
    {
        <div class="row w-100 viewer-height bg-secondary">
            <XtraReportViewer Report=@pdfReport OnCloseButtonClick="@(() => showPDF = false)" />
        </div>
    }
    else
    {
        <CollapsableContent AlertText=@($@"<strong>Transactional email</strong> queued and processed overnight.<br />
                    Cash Receipts and Enrolments are sent daily, Leader Reports are sent within 48 hours of the next class.<br/>
                    Postal reports are sent to <strong>{settings?.SendEmailAddesss}</strong>.<br />
                    Processed correspondence is deleted after 30 days.")
                            OnToggleAlert="@(async() => await fullScreen.RefreshLayout())" />

        <MessageBox @ref="@messageBox" PopupWidth="@messageBoxWidth" />
        <Progress @ref="@ProgressBar" />
        <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

        <div class="pb-1" />
        <FullScreen @ref=@fullScreen>
            <ContentTemplate>
                <DxGrid Data="@SendMail" @ref=@mainGrid CssClass="grid-height"
                        @bind-SelectedDataItems="@SelectedDataItems"
                        UnboundColumnData="Grid_CustomUnboundColumnData"
                        ShowFilterRow="false"
                        ShowAllRows="false"
                        KeyFieldName="ID"
                        ValidationEnabled="true"
                        SelectionMode="GridSelectionMode.Multiple">
                    <ToolbarTemplate>
                        <GridToolbar LinkedGrid=@mainGrid>
                            <CustomButtonContent>
                                <DxToolbarItem Text="Preview" IconCssClass="bi bi-eyeglasses"
                                               Click="@OnPreview" Enabled="@(SelectedDataItems != null && SelectedDataItems.Any())"
                                               Tooltip="Preview the email to be sent to selected participants."
                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                               RenderStyle="ButtonRenderStyle.Primary" />
                                <DxToolbarItem Text="Send Mail" IconCssClass="bi bi-envelope"
                                               Click="@OnCreateMail" Enabled="@(SelectedDataItems != null && SelectedDataItems.Any())"
                                               Tooltip="Send email to selected participants, now."
                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                               RenderStyle="ButtonRenderStyle.Primary" />
                                <DxToolbarItem Text="Delete" IconCssClass="bi bi-trash"
                                               Click="@OnDeleteSelection" Enabled="@(SelectedDataItems != null && SelectedDataItems.Any())"
                                               Tooltip="Delete the selected email."
                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                               RenderStyle="ButtonRenderStyle.Primary" />
                            </CustomButtonContent>
                        </GridToolbar>
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridSelectionColumn Width="2rem" />
                        <DxGridDataColumn Width="10rem" Caption="Email On/After"
                                          UnboundType=GridUnboundColumnType.DateTime
                                          FieldName="CreatedOnLocal"
                                          DisplayFormat="{0:dd-MMM-yyyy hh:mm tt}" />
                        <DxGridDataColumn Width="12rem" Caption="Document" FieldName="DocumentName" />
                        <DxGridDataColumn Width="12rem" Caption="Send To" FieldName="Person.FullName" />
                        <DxGridDataColumn Width="6rem" Caption="Send Via" FieldName="Person.Communication" />
                        <DxGridDataColumn Caption="Email" FieldName="Person.Email" />
                        <DxGridDataColumn Caption="Status" FieldName="Status" />
                    </Columns>

                </DxGrid>
            </ContentTemplate>
        </FullScreen>
    }
    <style>
        .viewer-height {
            height: 10rem !important;
        }
    </style>
}

@code {
    bool IsReady;
    private List<SendMail> SendMail { get; set; }
    IReadOnlyList<object>? SelectedDataItems { get; set; }
    ProFormaReportFactory reportFactory;
    MessageBox? messageBox;
    string? messageBoxWidth;
    FullScreen? fullScreen;

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    string ErrorHeader;
    string ErrorMessage;
    Progress? ProgressBar;
    LocalTime localTime;
    TimeSpan? localTimeOffset;
    bool showPDF = false;
    string pdfPath;

    U3ADbContext dbc { get; set; }
    TenantDbContext dbcT { get; set; }
    string tenant;
    SystemSettings? settings;
    PDFReport? pdfReport;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        dbcT = await TenantDbfactory.CreateDbContextAsync();
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        tenant = await tenantInfoService.GetTenantIdentifierAsync();
        await GetData();
        IsReady = true;
    }

    void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        if (e.FieldName == "CreatedOnLocal")
        {
            if (localTimeOffset != null) e.Value = ((SendMail)e.DataItem).CreatedOn + localTimeOffset;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            localTime = new LocalTime(js);
            localTimeOffset = await localTime.GetTimezoneOffsetAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetData()
    {
        mainGrid?.ClearSelection();
        SendMail = await dbc.SendMail.Include(x => x.Person).ToListAsync();
        SendMail.AddRange(await BusinessRule.GetMultiCampusMailAsync(dbcT, tenant));
        SendMail = SendMail.OrderByDescending(x => x.CreatedOn).ToList();
    }

    async Task OnPreview()
    {
        await CreateMail(true);
    }

    async Task OnCreateMail()
    {
        await CreateMail(false);
    }

    async Task CreateMail(bool IsPreview)
    {
        var mailItems = 0;
        var postItems = 0;
        var s = new System.Diagnostics.Stopwatch();
        var items = SelectedDataItems.Count();
        var personEnrolments = new Dictionary<Guid, List<Enrolment>>();
        List<(Guid, Guid, Guid?)> onFile = new();
        (Guid, Guid, Guid?) onFileKey;
        s.Start();
        var msg = (IsPreview) ? "Preparing Preview" : "Creating Mail Items";
        await ProgressBar.ShowAsync($"{msg} ... Please Wait", items);
        await InvokeAsync(StateHasChanged);
        reportFactory = new ProFormaReportFactory(Environment, U3Adbfactory, IsPreview);
        var enrolments = new List<Enrolment>();
        var mcEnrolments = await BusinessRule.GetMultiCampusEnrolmentsAsync(dbc, dbcT, tenant);
        foreach (SendMail sm in SelectedDataItems)
        {
            mailItems++;
            var scopedMCEnrolments = mcEnrolments;  //Don't know why - probably something to do with LINQ
            await ProgressBar.SetValueAsync(mailItems);            
            switch (sm.DocumentName)
            {
                case "Cash Receipt":
                    var receipt = await dbc.Receipt
                                        .Include(x => x.Person)
                                        .Where(x => x.ID == sm.RecordKey).FirstOrDefaultAsync();
                    if (receipt != null)
                    {
                        sm.Status = await reportFactory.CreateCashReceiptProForma(receipt);
                    }
                    else sm.Status = "Receipt not found";
                    break;
                case "Participant Enrolment":
                    var enrolment = await dbc.Enrolment
                                        .Include(x => x.Course)
                                        .Include(x => x.Person)
                                        .Where(x => x.ID == sm.RecordKey).FirstOrDefaultAsync();
                    if (enrolment == null)
                    {
                        enrolment = await BusinessRule.GetMultiCampusEnrolmentAsync(dbc, dbcT,sm.RecordKey, tenant);
                    }
                    if (enrolment != null)
                    {
                        var key = enrolment.PersonID;
                        var theseEnrolments = new List<Enrolment>();
                        if (!personEnrolments.TryGetValue(key, out theseEnrolments))
                        {
                            theseEnrolments = new List<Enrolment>();
                            personEnrolments.Add(key, theseEnrolments);
                        }
                        theseEnrolments.Add(enrolment);
                    }
                    else sm.Status = "Enrolment not found";
                    break;
                case "Leader Report":
                    string courseName = "";
                    Course course = null;
                    var leader = await dbc.Person
                                        .Where(x => x.ID == sm.PersonID).FirstOrDefaultAsync();
                    if (dbc.Class.Any(x => x.ID == sm.RecordKey))
                    {
                        enrolments = await dbc.Enrolment.Where(x => x.ClassID == sm.RecordKey
                                                            && x.TermID == sm.TermID).ToListAsync();
                        enrolments.AddRange(scopedMCEnrolments.Where(x => x.ClassID == sm.RecordKey && x.TermID == sm.TermID));
                        var Class = await dbc.Class.FindAsync(sm.RecordKey);
                        course = await dbc.Course.FindAsync(Class.CourseID);
                    }
                    else
                    {
                        course = dbc.Course.Find(sm.RecordKey);
                        if (course != null)
                        {
                            enrolments = dbc.Enrolment.Where(x => x.CourseID == course.ID
                                                                  && x.TermID == sm.TermID).ToList();
                            enrolments.AddRange(scopedMCEnrolments.Where(x => x.CourseID == course.ID && x.ClassID == null
                                                                  && x.TermID == sm.TermID));
                        }
                    };
                    if (leader != null && enrolments.Count > 0)
                    {
                        if (course != null) courseName = course.Name;
                        onFileKey = (leader.ID, enrolments[0].CourseID, enrolments[0].ClassID);
                        if (!onFile.Contains(onFileKey))
                        {
                            onFile.Add(onFileKey);
                            sm.Status = await reportFactory.CreateLeaderReportProForma(leader, courseName, enrolments.ToArray());
                        }
                    }
                    else { sm.Status = "Enrolments not found."; }
                    break;
                case "U3A Leaders Reports":
                    Class thisClass = await dbc.Class.FindAsync(sm.RecordKey);
                    course = await dbc.Course.FindAsync(thisClass.CourseID);
                    var thisTerm = await dbc.Term.FindAsync(sm.TermID);
                    enrolments = await BusinessRule.GetEnrolmentIncludeLeadersAsync(dbc, course!, thisClass, thisTerm!);
                    enrolments.AddRange(scopedMCEnrolments.Where(x => x.CourseID == course.ID));
                    bool isEnrolmentReqd = sm.PrintAttendanceRecord ||
                                                    sm.PrintClassList ||
                                                    sm.PrintCSVFile ||
                                                    sm.PrintICEList ||
                                                    sm.PrintLeaderReport;
                    if (enrolments?.Count > 0 || !isEnrolmentReqd)
                    {
                        sm.Status = await reportFactory.CreateLeaderReports(
                             sm.PrintLeaderReport,
                             sm.PrintAttendanceRecord,
                             sm.PrintClassList,
                             sm.PrintICEList,
                             sm.PrintCSVFile,
                             sm.PrintAttendanceAnalysis,
                              course.ID,
                              "U3A Report Package",
                             course.Name,
                             sm.Person, enrolments.OrderBy(x => x.IsWaitlisted)
                                                         .ThenBy(x => x.Person.LastName)
                                                         .ThenBy(x => x.Person.FirstName).ToArray());
                    }
                    else { sm.Status = "Enrolments not found."; }
                    break;
                default:
                    break;
            }
            if (!IsPreview) await dbc.SaveChangesAsync();
        }
        await ProgressBar.ShowSpinnerAsync("Processing Enrolment Emails");
        // process enrolments because they receive one email per member
        var enrolmentResults = await reportFactory.CreateEnrolmentProForma(personEnrolments);
        foreach (var kvp in enrolmentResults)
        {
            mailItems++;
            foreach (var sm in dbc.SendMail.Where(x => x.PersonID == kvp.Key))
            {
                if (string.IsNullOrWhiteSpace(sm.Status)) { sm.Status = kvp.Value; }
            }
            foreach (var sm in dbcT.MultiCampusSendMail.Where(x => x.PersonID == kvp.Key))
            {
                if (string.IsNullOrWhiteSpace(sm.Status)) { sm.Status = kvp.Value; }
            }
            await ProgressBar.SetValueAsync(mailItems);
        }
        if (!IsPreview) { await dbc.SaveChangesAsync(); await dbcT.SaveChangesAsync(); }
        // finish up
        s.Stop();
        await ProgressBar.Close();
        if (!IsPreview)
        {
            var elapsedTime = String.Format("{0:00}:{1:00}:{2:00}",
            s.Elapsed.Hours, s.Elapsed.Minutes, s.Elapsed.Seconds);
            postItems = reportFactory.PostalReports.Count();
            //            messageBoxWidth = "33%";
            msg = $"<p>{items} selected documents have been sent.</p>" +
                    $"<p>There were {postItems} postal documents and {items - postItems} emails.<br/>" +
                    $"Postal documents (if any) will be displayed when this message is closed. These must be printed or saved on your PC.</p>" +
                    $"Elapsed time is: {elapsedTime}";
            await messageBox.SetPopupWidth("33%");
            await messageBox.ShowOkOnlyAsync("Communication Complete", msg);
            await GetData();
            mainGrid.ClearSelection();
            StateHasChanged();
        }
        var pdfFilename = reportFactory.CreatePostalPDF();
        if (pdfFilename != null)
        {
            pdfPath = $"{NavigationManager.BaseUri}Temp/" + pdfFilename;
            pdfReport = new();
            pdfReport.PdfContent.SourceUrl = pdfPath;
            showPDF = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task OnDeleteSelection()
    {
        dbc.RemoveRange(SelectedDataItems);
        await dbc.SaveChangesAsync();
        await GetData();
    }

    public void Dispose()
    {
        dbc?.Dispose();
        dbcT?.Dispose();
    }

}
