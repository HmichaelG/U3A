@namespace U3A.UI.Forms

@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Microsoft.EntityFrameworkCore.Query
@using U3A.UI.Reports.Pages
@using U3A.Services.APIClient

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantInfoService
@inject ILogger<QueuedTransactionalEmail> Logger
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager


@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    if (showPDF)
    {
        <div class="row w-100 viewer-height bg-secondary">
            <PdfViewer DocumentContent="@pdfContent" OnCloseButtonClick="@(() => showPDF = false)" />
        </div>
    }
    else
    {
        <div class="px-2">
            <CollapsableContent DismissKey="{D46A020E-E4C2-4A3A-A684-80EE7B36AE34}" Visible="@(!IsEmbedded)"
            AlertText=@($@"<p><strong>Transactional email</strong> is queued &amp; background processed.<br />
                        Cash Receipts and Enrolments are sent hourly, Leader Reports are sent within 48 hours of the next class.<br/>
                        Postal reports are sent to <strong>{settings?.SendEmailAddesss}</strong>.<br />
                        Processed correspondence is deleted after 30 days</p>.")
            OnDismissChanged="@((bool IsDismissed) => OnContentChange(IsDismissed))"
            OnToggleAlert="@(async() => await fullScreen.RefreshLayout())" />

            <MessageBox @ref="@messageBox" PopupWidth="@messageBoxWidth" />
            <Progress @ref="@ProgressBar" />
            <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

            <div class="pb-1" />
            <FullScreen @ref=@fullScreen DisplayOffset="@contentSize" HideToggle="@IsEmbedded">
                <ContentTemplate>
                    <DxGrid Data="@SendMail" @ref=@mainGrid
                    @bind-SelectedDataItems="@SelectedDataItems"
                    UnboundColumnData="Grid_CustomUnboundColumnData"
                    ShowFilterRow="false"
                    ShowAllRows="false"
                    KeyFieldName="ID"
                    ValidationEnabled="true"
                    SelectionMode="@((IsEmbedded) ? GridSelectionMode.Single : GridSelectionMode.Multiple)">
                        <ToolbarTemplate>
                            <GridToolbar LinkedGrid=@mainGrid LayoutKey="{5AC4F74E-C707-4297-8949-A64FB18C0819}">
                                <CustomButtonContent>
                                    <DxToolbarItem Text="Preview" IconCssClass="bi bi-eyeglasses"
                                    Click="@OnPreview" Enabled="@(SelectedDataItems != null && SelectedDataItems.Any())"
                                    Tooltip="Preview the email to be sent to selected participants."
                                    RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                    RenderStyle="ButtonRenderStyle.Primary" />
                                    <DxToolbarItem Text="Send Mail" IconCssClass="bi bi-envelope"
                                    Click="@OnCreateMail" Enabled="@(SelectedDataItems != null && SelectedDataItems.Any())"
                                    Tooltip="Send email to selected participants, now."
                                    RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                    RenderStyle="ButtonRenderStyle.Primary" />
                                    <DxToolbarItem Text="Delete" IconCssClass="bi bi-trash" Visible="@(!IsEmbedded)"
                                    Click="@OnDeleteSelection" Enabled="@(SelectedDataItems != null && SelectedDataItems.Any())"
                                    Tooltip="Delete the selected email."
                                    RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                    RenderStyle="ButtonRenderStyle.Primary" />
                                    <DxToolbarItem Text="Refresh" IconCssClass="bi bi-arrow-clockwise" Visible="@(!IsEmbedded)"
                                    Click="@GetData" Tooltip="Refresh data"
                                    RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                    RenderStyle="ButtonRenderStyle.Success" />
                                </CustomButtonContent>
                            </GridToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridSelectionColumn Width="2rem" />
                            <DxGridDataColumn Width="10rem" Caption="Email On/After"
                            UnboundType=GridUnboundColumnType.DateTime
                            FieldName="CreatedOnLocal"
                            DisplayFormat="{0:dd-MMM-yyyy hh:mm tt}" />
                            <DxGridDataColumn Width="12rem" Caption="Document" FieldName="DocumentName" />
                            <DxGridDataColumn Width="12rem" Caption="Send To" FieldName="Person.FullName" />
                            <DxGridDataColumn Width="6rem" Caption="Send Via" FieldName="Person.SendTransactionalEmailVia" />
                            <DxGridDataColumn Caption="Email" FieldName="Person.Email" />
                            <DxGridDataColumn Caption="Status" FieldName="Status" />
                        </Columns>

                    </DxGrid>
                </ContentTemplate>
            </FullScreen>
        </div>
    }
}
<style>
    .viewer-height {
    height: 10rem !important;
    }
</style>

@code {
        [Parameter]
        public bool IsEmbedded { get; set; }

        bool IsReady;
    private List<SendMail> SendMail { get; set; }
    IReadOnlyList<object>? SelectedDataItems { get; set; }
    ProFormaReportFactory reportFactory;
    MessageBox? messageBox;
    string? messageBoxWidth;

    FullScreen? fullScreen;
    int contentSize;

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    string ErrorHeader;
    string ErrorMessage;
    Progress? ProgressBar;
    LocalTime localTime;
    TimeSpan? localTimeOffset;
    bool showPDF = false;
    string pdfPath;

    string tenant;
    SystemSettings? settings;
    Byte[] pdfContent;
    bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        await GetData();
        IsReady = true;
    }

    void OnContentChange(bool IsDismissed)
    {
        contentSize = (IsDismissed) ? 8 : 19;
        if (IsEmbedded) { contentSize = 19; }
        StateHasChanged();
    }

    void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        if (e.FieldName == "CreatedOnLocal")
        {
            using (var dbc = U3Adbfactory.CreateDbContext())
            {
                e.Value = dbc.GetLocalTime(((SendMail)e.DataItem).CreatedOn.Value);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            localTime = new LocalTime(js);
            localTimeOffset = await localTime.GetTimezoneOffsetAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetData()
    {
        if (ProgressBar != null) { await ProgressBar?.ShowSmallSpinnerAsync(); }
        mainGrid?.ClearSelection();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
            {
                settings = await dbc.SystemSettings.FirstOrDefaultAsync();
                tenant = await tenantInfoService.GetTenantIdentifierAsync();
                SendMail = await dbc.SendMail
                                    .IgnoreQueryFilters()
                                    .Include(x => x.Person)
                                    .Where(x => !x.Person.IsDeleted)
                                    .ToListAsync();
                SendMail.AddRange(await BusinessRule.GetMultiCampusMailAsync(dbcT, tenant));
                SendMail = SendMail.OrderByDescending(x => x.CreatedOn).ToList();
                if (ProgressBar != null) { await ProgressBar?.Close(); }
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    async Task OnPreview()
    {
        await CreateRequestedMailSafely(true);
    }
    async Task OnCreateMail()
    {
        await CreateRequestedMailSafely(false);
    }

    async Task CreateRequestedMailSafely(bool IsPreview)
    {
        if (isProcessing) return;
        try
        {
            isProcessing = true;
            if (IsPreview) { await CreateMailPreview(); }
            else { await CreateMail(); }
        }
        finally { isProcessing = false; }
    }

    async Task CreateMail()
    {
        await ProgressBar.ShowSpinnerAsync($"Processing email ... Please Wait");
        List<Guid> IdsToSend = SelectedDataItems.Select(x => ((SendMail)x).ID).ToList();
        var result = await ProcessMailAsync(IdsToSend);
        await ProgressBar.Close();
        await GetData();
        await messageBox.ShowOkOnlyAsync("Email Processing", result);
    }

    async Task<string> ProcessMailAsync(IEnumerable<Guid> IdsToSend)
    {
        string result = "Your requested report emails have been successfully queued for immediate processing";
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            await SetStatus(dbc, IdsToSend, "Queued");
            using (var client = new APIClient())
            {
                try
                {
                    await client.DoCorrespondence(dbc.TenantInfo.Identifier, IdsToSend);
                }
                catch (HttpRequestException e)
                {
                    result = $@"<p>An Internet issue is currently preventing you mail from being processed.<br/>
                                        We'll keep trying. If you do not receive your mail withing the hour, contact your U3A.</p>
                    {e.Message}";
                    await SetStatus(dbc, IdsToSend, ""); // clear the status to allow retry
                }
                catch (Exception ex)
                {
                    result = ex.Message;
                    await SetStatus(dbc, IdsToSend, "Failed");
                }
                finally
                {
                    await dbc.SaveChangesAsync();
                }
            }
        }
        return result;
    }

    async Task SetStatus(U3ADbContext dbc, IEnumerable<Guid> IdsToSend, string Status)
    {
        foreach (var id in IdsToSend)
        {
            var mail = await dbc.SendMail.FindAsync(id);
            mail.Status = Status;
        }
        await dbc.SaveChangesAsync();
    }


    async Task CreateMailPreview()
    {
        await ProgressBar.ShowSpinnerAsync($"Processing preview ... Please Wait");
        List<Guid> IdsToSend = SelectedDataItems.Select(x => ((SendMail)x).ID).ToList();
        string result = string.Empty;
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            using (var client = new APIClient())
            {
                try
                {
                    pdfContent = await client.DoCreateCorrespondenceAsPdf(dbc.TenantInfo.Identifier, IdsToSend);
                    showPDF = true;
                }
                catch (HttpRequestException e)
                {
                    result = $@"<p>An Internet issue is currently preventing your report from being processed.<br/>
                                Wait a while and try again. If the issue persists, contact your U3A.</p>
                {e.Message}";
                }
                catch (Exception ex)
                {
                    result = ex.Message;
                }
                finally
                {
                    await ProgressBar.Close();
//                    await InvokeAsync(StateHasChanged);
                    if (!string.IsNullOrWhiteSpace(result)) { await messageBox.ShowOkOnlyAsync("Processing issue", result); }
                }
            }
        }
    }

    async Task OnDeleteSelection()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            using (var dbcT = await TenantDbfactory.CreateDbContextAsync())
            {
                foreach (var o in SelectedDataItems)
                {
                    var sm = o as SendMail;
                    if (sm.Person.IsMultiCampusVisitor)
                    {
                        var mcSM = await dbcT.MultiCampusSendMail.FindAsync(sm.ID);
                        if (mcSM != null) { dbcT.Remove(mcSM); }
                    }
                    else
                    {
                        dbc.Remove(sm);
                    }
                }
                await dbc.SaveChangesAsync();
                await dbcT.SaveChangesAsync();
            }
        }
        await GetData();
    }


}
