@namespace U3A.UI.Forms

@using System
@using System.IO
@using U3A.Services
@using U3A.Services.Email;

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager NavigationManager

<MessageBox @ref="@messageBox" PopupWidth="@messageBoxWidth" />
<Progress @ref="@ProgressBar" />
<ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <div class="px-2">
        <h4>Suppressions</h4>
        <CollapsableContent AlertText=@($@"A <strong>suppression</strong> is created when a participant unsubscribes, or an address hard bounces.<br/>
                        They are an essential part of maintaining good email reputation.<br/>
                        You may delete a suppression once you are sure...<br/>
                        the email address is valid, or the unsubscribe was accidental, the address is no longer associated with a participant, or the participant is unfinancial.")
                            OnToggleAlert="@(async() => await fullScreen.RefreshLayout())" />

        <FullScreen @ref=@fullScreen DisplayOffset="16">
            <ContentTemplate>
                <DxGrid Data=@suppressions @ref=@mainGrid
                        @bind-SelectedDataItems="@SelectedDataItems">
                    <ToolbarTemplate>
                        <GridToolbar LinkedGrid=@mainGrid>
                            <CustomButtonContent>
                                <DxToolbarItem Text="Reactivate Selected"
                                               Click="@OnReset"
                                               RenderStyle="ButtonRenderStyle.Primary"
                                               RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                               Tooltip="Reactivate selected participant email addresses."
                                               Enabled="@(SelectedDataItems != null && SelectedDataItems.Any())" />
                            </CustomButtonContent>
                        </GridToolbar>
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridSelectionColumn FixedPosition="GridColumnFixedPosition.Left" Width="2rem" />
                        <DxGridDataColumn Caption="Date" FieldName="CreatedAt" DisplayFormat="dd-MMM-yyyy hh:mm tt" Visible=true />
                        <DxGridDataColumn Width="8rem" Caption="Stream" FieldName="Stream" />
                        <DxGridDataColumn Caption="Reason" FieldName="Reason" />
                        <DxGridDataColumn Caption="Email" FieldName="Email" />
                        <DxGridDataColumn Caption="Participant" FieldName="Person.FullName" />
                        <DxGridDataColumn Caption="Mobile" FieldName="Person.Mobile" />
                        <DxGridDataColumn Caption="Home" FieldName="Person.HomePhone" />
                        <DxGridDataColumn Caption="Financial To" FieldName="Person.FinancialToBriefText" />
                    </Columns>

                </DxGrid>
            </ContentTemplate>
        </FullScreen>
    </div>
}

@code {
    bool IsReady;
    IEnumerable<EmailSuppression> suppressions { get; set; }
    IReadOnlyList<object>? SelectedDataItems { get; set; }
    MessageBox? messageBox;
    string? messageBoxWidth;
    FullScreen? fullScreen;

    ErrorPopup? ErrorPopup { get; set; }
    IGrid? mainGrid { get; set; }
    GridToolbar? Toolbar;
    string ErrorHeader;
    string ErrorMessage;
    Progress? ProgressBar;

    U3ADbContext dbc { get; set; }
    PostmarkService service;
    LocalTime localTime;
    TimeSpan tzOffset;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        service = new PostmarkService(U3Adbfactory);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            localTime = new LocalTime(js);
            tzOffset = await localTime.GetTimezoneOffsetAsync();
            suppressions = await service.GetSuppressions(tzOffset);
            IsReady = true;
            StateHasChanged();
        }
    }

    async Task OnReset()
    {
        if (await IsOkToReset())
        {
            ProgressBar.ShowSmallSpinnerAsync();
            var toDelete = new List<EmailSuppression>();
            foreach (EmailSuppression es in SelectedDataItems) { toDelete.Add(es); }
            service.DeleteSuppressions(toDelete);
            suppressions = await service.GetSuppressions(tzOffset);
            mainGrid.ClearSelection();
            ProgressBar.Close();
        }
    }

    async Task<bool> IsOkToReset()
    {
        bool result = true;
        var count = 0;
        foreach (var o in SelectedDataItems) { if (((EmailSuppression)o).Reason == "SpamComplaint") count++; }
        if (count > 0)
        {
            result = (await messageBox.ShowAsync("Spam complaints can’t be reactivated",
                                   @"<div class='alert alert-danger text-dark pb-2'>
                            <p>A spam complaint is recorded when a subscriber clicks “This is Spam” or “Mark as Spam” in email clients like Outlook, Gmail, and other similar services.
                                In the email industry, spam complaints are a clear metric to determine abuse and poor sending practices.
                                If you feel a spam complaint has a reason for being reactivated, please <a href='https://postmarkapp.com/contact'>contact Postmark support</a> directly.</p>
                             <p>Reduce your spam rate to less than 0.1% of email. if your spam complaint rate remains higher than normal Postmark may pause sending on your account while they work with you to fix the issue."
                       ));
        }

        return result;
    }


    public void Dispose()
    {
        dbc?.Dispose();
    }

}
