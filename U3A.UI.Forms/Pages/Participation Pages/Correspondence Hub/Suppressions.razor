@namespace U3A.UI.Forms

@using System
@using System.IO
@using U3A.Services
@using U3A.Services.Email;

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager NavigationManager

<MessageBox @ref="@messageBox" PopupWidth="@messageBoxWidth" />
<Progress @ref="@ProgressBar" />
<ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

@if (!IsReady)
{
    <LoadingIndicator />
}

<h4>Suppressions</h4>
<CollapsableAlert AlertText=@($@"A <strong>suppression</strong> is created when a participant unsubscribes, or an address hard bounces.<br/>
                  They are an essential part of maintaining good email reputation.<br/>
                  You may delete a suppression once you are sure...<br/>
                  the email address is valid, or the unsubscribe was accidental, the address is no longer associated with a participant, or the participant is unfinancial.")
                  OnAlertCollapsed="@(async() => await fullScreen.RefreshLayout())" />

<FullScreen @ref=@fullScreen>
    <ContentTemplate>
        <DxGrid Data=@suppressions @ref=@mainGrid CssClass="grid-height"
                @bind-SelectedDataItems="@SelectedDataItems">
            <ToolbarTemplate>
                <GridToolbar LinkedGrid=@mainGrid>
                    <CustomButtonContent>
                        <DxToolbarItem Text="Reactivate Selected"
                                       Click="@OnReset"
                                       RenderStyle="ButtonRenderStyle.Primary"
                                       RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                       Tooltip="Reactivate selected participant email addresses."
                                       Enabled="@(SelectedDataItems != null && SelectedDataItems.Any())" />
                    </CustomButtonContent>
                </GridToolbar>
            </ToolbarTemplate>
            <Columns>
                <DxGridSelectionColumn FixedPosition="GridColumnFixedPosition.Left" Width="2rem" />
                <DxGridDataColumn Caption="Date" FieldName="CreatedAt" DisplayFormat="dd-MMM-yyyy hh:mm tt" Visible=true />
                <DxGridDataColumn Width="8rem" Caption="Stream" FieldName="Stream" />
                <DxGridDataColumn Caption="Reason" FieldName="Reason" />
                <DxGridDataColumn Caption="Email" FieldName="Email" />
                <DxGridDataColumn Caption="Participant" FieldName="Person.FullName" />
                <DxGridDataColumn Caption="Mobile" FieldName="Person.Mobile" />
                <DxGridDataColumn Caption="Home" FieldName="Person.HomePhone" />
                <DxGridDataColumn Caption="Financial To" FieldName="Person.FinancialTo" DisplayFormat="{0:D}" />
            </Columns>

        </DxGrid>
    </ContentTemplate>
</FullScreen>


<style>
    .vh-85 {
        height: 75vh;
    }
</style>

@code {
    bool IsReady;
    IEnumerable<EmailSuppression> suppressions { get; set; }
    IReadOnlyList<object>? SelectedDataItems { get; set; }
    MessageBox? messageBox;
    string? messageBoxWidth;
    FullScreen? fullScreen;

    ErrorPopup? ErrorPopup { get; set; }
    IGrid? mainGrid { get; set; }
    GridToolbar? Toolbar;
    string ErrorHeader;
    string ErrorMessage;
    Progress? ProgressBar;

    U3ADbContext dbc { get; set; }
    PostmarkService service;
    LocalTime localTime;
    TimeSpan tzOffset;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        service = new PostmarkService(U3Adbfactory);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            localTime = new LocalTime(js);
            tzOffset = await localTime.GetTimezoneOffsetAsync();
            suppressions = await service.GetSuppressions(tzOffset);
            IsReady = true;
            StateHasChanged();
        }
    }

    async Task OnReset()
    {
        if (await IsOkToReset())
        {
            ProgressBar.ShowSmallSpinnerAsync();
            var toDelete = new List<EmailSuppression>();
            foreach (EmailSuppression es in SelectedDataItems) { toDelete.Add(es); }
            service.DeleteSuppressions(toDelete);
            suppressions = await service.GetSuppressions(tzOffset);
            mainGrid.ClearSelection();
            ProgressBar.Close();
        }
    }

    async Task<bool> IsOkToReset()
    {
        bool result = true;
        var count = 0;
        foreach (var o in SelectedDataItems) { if (((EmailSuppression)o).Reason == "SpamComplaint") count++; }
        if (count > 0)
        {
            result = (await messageBox.ShowAsync("Reset Spam Complaint(s)",
                                @"<div class='alert alert-danger pb-2'>Spam complaints <strong>are not to be reactivated without a thorough investigation into the reason for the complaint</strong>.
                            Doing otherwise may cause email delivery to be suspended or at worst, halted completely.<br/><br/>
                            Please be careful. If the complaint has been permanently deactivated by Postmark, contact their support for reactivation.</div>
                            <p>Do your wish to continue?</p>"));
        }

        return result;
    }


    public void Dispose()
    {
        dbc?.Dispose();
    }

}
