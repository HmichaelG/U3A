@namespace U3A.UI.Forms

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@using Ganss.Xss
@using U3A.Services
@using U3A.Services.Email;


<Progress @ref=progressBar />
<MessageBox @ref=messageBox />

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <div class="w-100 px-2">
        <h4>Search Email</h4>
        <DxFormLayout>
            <DxFormLayoutGroup Caption="Search Email" Expanded="@areDetailsExpanded"
                               ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.End" ColSpanMd="8"
                               ExpandedChanged="@(async () => {if (fullScreen != null)
                                                            {
                                                                areDetailsExpanded = !areDetailsExpanded;
                                                                fullScreen.RefreshLayout(!areDetailsExpanded);
                                                            }
                                                           })">
                <Items>
                    <DxFormLayoutItem Caption="Search for participant" ColSpanLg="12">
                        <ChildContent>
                            <div class="d-flex gap-1">
                                <DxComboBox Data="@people" CssClass="flex-grow-1"
                                            AllowUserInput=true
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            ListRenderMode="ListRenderMode.Virtual"
                                            TextFieldName="@nameof(Person.PersonSummary)"
                                            @bind-Value="@selectedPerson">
                                </DxComboBox>
                                <DxButton Text="Search" CssClass="flex-grow-0"
                                          IconCssClass="bi bi-search"
                                          Tooltip="Click to search for the selected member"
                                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                                          Click="@OnSearch" />
                            </div>
                        </ChildContent>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Or, email address" ColSpanLg="12">
                        <ChildContent>
                            <div class="d-flex gap-1">
                                <DxComboBox Id="emailId" Data="@email" CssClass="flex-grow-1"
                                            AllowUserInput=true
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            ListRenderMode="ListRenderMode.Virtual"
                                            @bind-Value="@emailAddressValue"
                                            Text="@emailAddress"
                                            TextChanged="@OnEnailChnaged">
                                </DxComboBox>
                                <DxButton Text="Search" CssClass="flex-grow-0"
                                          IconCssClass="bi bi-search"
                                          Tooltip="Click to search for the selected member"
                                          RenderStyleMode="ButtonRenderStyleMode.Outline"
                                          Click="@OnEmailSearch" />
                            </div>
                        </ChildContent>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Or, Date Range" ColSpanLg="12">
                        <ChildContent>
                            <div class="d-flex gap-1">
                                <DxDateEdit @bind-Date="@fromDate" MinDate="@minDate" MaxDate="@maxDate" CssClass="flex-grow-1" />
                                <div class="flex-grow-0 align-self-center">To</div>
                                <DxDateEdit @bind-Date="@toDate" 
                                            CssClass="flex-grow-1"
                                            MinDate="@minDate" 
                                            MaxDate="@maxDate">
                                </DxDateEdit>
                            <DxButton Text="Search" CssClass="flex-grow-0"
                                            IconCssClass="bi bi-search"
                                            RenderStyleMode="ButtonRenderStyleMode.Outline"
                                            Tooltip="Click to search for the selected member"
                                            Click="@OnDateSearch" />
                            </div>
                        </ChildContent>
                        </DxFormLayoutItem>
                </Items>
            </DxFormLayoutGroup>

            <FullScreen @ref=@fullScreen DisplayOffset="22" AlternateDisplayOffset="13">
                <ContentTemplate>
                    <DxGrid id="my-grid" Data=@messages @ref=@mainGrid
                            AutoExpandAllGroupRows=false>
                        <ToolbarTemplate>
                            <GridToolbar LinkedGrid=@mainGrid LayoutKey="{B8414CBE-49B9-47D4-A754-4FDC59A29115}" />
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridDataColumn Width="10rem" FixedPosition="GridColumnFixedPosition.Left" Caption="Received" FieldName="ReceivedAt" DisplayFormat="{0:dd-MMM-yyyy hh:mm tt}" />
                            <DxGridDataColumn Caption="Stream" FieldName="Stream" />
                            <DxGridDataColumn Caption="From" FieldName="From" />
                            <DxGridDataColumn Caption="To" FieldName="To" Visible=@IsSearchByDateRange />
                            <DxGridDataColumn Caption="Subject" FieldName="Subject" />
                            <DxGridDataColumn Caption="Attachments" FieldName="Attachments" />
                            <DxGridDataColumn Caption="Status" FieldName="Status" />
                            <DxGridDataColumn Width="8rem" Caption="Details" FieldName="MessageID" AllowGroup="false" FixedPosition="GridColumnFixedPosition.Right">
                                <CellDisplayTemplate>
                                    <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" CssClass="w-100"
                                              RenderStyle="ButtonRenderStyle.Primary" Text="Details"
                                              Click="() => OnDetailsClick((EmailMessage)context.DataItem)"></DxButton>
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                        </Columns>
                        <TotalSummary>
                            <DxGridSummaryItem FieldName="Subject" FooterColumnName="Subject" SummaryType="GridSummaryItemType.Count" />
                        </TotalSummary>
                    </DxGrid>
                </ContentTemplate>
            </FullScreen>
        </DxFormLayout>
    </div>

    <DxWindow @ref=@emailDetailsForm Width="60vw" Height="90vh"
              AllowResize="true"
              Context="windowContext"
              CloseOnEscape=true
              ShowCloseButton=true
              ShowFooter=true
              Scrollable=true
              HeaderText="Email Message Details">
        <BodyTextTemplate>
            <DxFormLayout>
                <DxFormLayoutGroup Caption="Email Details" CssClass="my-2 w-100">
                    <div class="px-4 w-100">
                    <div class="d-flex flex-row detail-row">
                        <div class="col-2"><b>Time</b></div>
                        <div class="col-10">@selectedEmail.ReceivedAt.ToString("dd-MMM-yy hh:mm tt")</div>
                        </div>
                    <div class="d-flex flex-row detail-row">
                        <div class="col-2"><b>Subject</b></div> 
                        <div class="col-10">@selectedEmail.Subject</div>
                        </div>
                    <div class="d-flex flex-row detail-row">
                        <div class="col-2"><b>From</b></div> 
                        <div class="col-10">@selectedEmail.From</div>
                    </div>
                    </div>
                </DxFormLayoutGroup>
                <DxFormLayoutGroup Caption="Events">
                <DxGrid Data=@messageEvents @ref=@eventGrid CssClass="m-2" id="myGrid">
                    <Columns>
                        <DxGridDataColumn Width="10rem" FixedPosition="GridColumnFixedPosition.Left" Caption="Time" FieldName="ReceivedAt" DisplayFormat="{0:dd-MMM-yyyy hh:mm tt}" />
                        <DxGridDataColumn Caption="Event" FieldName="Type" />
                    </Columns>
                </DxGrid>
                </DxFormLayoutGroup>
                <DxFormLayoutGroup Caption="Message">
                    <div class="w-100 m-4">
                        @(new MarkupString(SanitizeHtml()))
                    </div>
                </DxFormLayoutGroup>
            </DxFormLayout>
        </BodyTextTemplate>
    </DxWindow>

    <style>
        .detail-row {
            line-height: 2.5;
            border-bottom: 1px solid #ddd;
        }

    </style>
}


@code {
        IEnumerable<EmailMessage> messages;
        IEnumerable<EmailMessageEvent> messageEvents;
        IEnumerable<string> email;
        EmailMessage selectedEmail;
        List<Person> people { get; set; }
        Person selectedPerson { get; set; }
        MessageBox? messageBox;
        Progress? progressBar;
        U3ADbContext dbc { get; set; }
        PostmarkService service;
        bool IsReady;
        bool isSearchByEmailAddress;
        string emailAddress;
        string emailAddressValue;
        bool IsSearchByDateRange;
        bool areDetailsExpanded = true;
        FullScreen? fullScreen;

        IGrid? mainGrid { get; set; }
        IGrid? eventGrid { get; set; }
        GridToolbar? Toolbar;
        DxWindow emailDetailsForm;
        DateTime fromDate;
        DateTime toDate;
        DateTime minDate;
        DateTime maxDate;
        TimeSpan tzOffset;
        LocalTime? localTime;

    protected override async Task OnInitializedAsync()
    {
        service = new PostmarkService(U3Adbfactory);
        await GetData();
        IsReady = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (localTime == null)
        {
            localTime = new LocalTime(js);
            tzOffset = await localTime.GetTimezoneOffsetAsync();
            toDate = await localTime.GetLocalDateAsync();
            fromDate = toDate.AddDays(-6).Date;
            minDate = toDate.AddDays(-30).Date;
            maxDate = toDate;
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetData()
    {
        using (dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            people = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
            email = people
                        .Where(x => !string.IsNullOrWhiteSpace(x.Email))
                        .OrderBy(x => x.Email)
                        .Select(x => x.Email).ToArray();
        }
    }

    async Task OnDetailsClick(EmailMessage dataItem)
    {
        await progressBar.ShowSmallSpinnerAsync();
        selectedEmail = dataItem;
        var address = (isSearchByEmailAddress) ? emailAddress : (IsSearchByDateRange) ? selectedEmail.To : selectedPerson?.Email;
        messageEvents = await service.GetEmailMessageDetailAsync(tzOffset, dataItem, address);
        await emailDetailsForm.ShowAsync();
        await progressBar.Close();
    }

    async Task OnSearch()
    {
        IsSearchByDateRange = false;
        messages = new List<EmailMessage>();
        if (selectedPerson != null && !string.IsNullOrEmpty(selectedPerson.Email))
        {
            isSearchByEmailAddress = false;
            await SearchMessagesAsync(selectedPerson.Email);
        }
        else await messageBox.ShowOkOnlyAsync("Select a participant", "You must select a participant before you click the Search button.");
    }

    void OnEnailChnaged(string newVaule)
    {
        emailAddress = newVaule;
    }

    async Task OnEmailSearch()
    {
        IsSearchByDateRange = false;
        messages = new List<EmailMessage>();
        if (!string.IsNullOrEmpty(emailAddress))
        {
            isSearchByEmailAddress = true;
            await SearchMessagesAsync(emailAddress);
        }
        else await messageBox.ShowOkOnlyAsync("Enter email address", "You must enter a email address before you click the Search button.");
    }

    async Task SearchMessagesAsync(string emailAddress)
    {
        await progressBar.ShowSmallSpinnerAsync();
        messages = await service.SearchMessagesAsync(tzOffset, emailAddress);
        await progressBar.Close();
    }

    async Task OnDateSearch()
    {
        IsSearchByDateRange = true;
        isSearchByEmailAddress = false;
        messages = new List<EmailMessage>();
        if (toDate >= fromDate)
        {
            await progressBar.ShowSmallSpinnerAsync();
            messages = await service.SearchMessagesAsync(tzOffset, From: fromDate, To: toDate);
            await progressBar.Close();
        }
        else await messageBox.ShowOkOnlyAsync("Invalid Dates", "The From date must be prior to the To date.");
    }

    string SanitizeHtml()
    {
        string html = messageEvents.FirstOrDefault().HtmlBody;
        var stream = messageEvents.FirstOrDefault().Stream;
        if (stream != null && stream.ToLowerInvariant().Contains("transaction")) { return html; }
        var sanitizer = new HtmlSanitizer();
        sanitizer.AllowedCssProperties.Clear();
        sanitizer.AllowedAttributes.Clear();
        // Allow styles only for <table>, <td>, <th>, etc.
        sanitizer.AllowedTags.Add("table");
        sanitizer.AllowedTags.Add("tr");
        sanitizer.AllowedTags.Add("td");
        sanitizer.AllowedTags.Add("th");

        // Allow style attribute only on table-related tags
        sanitizer.AllowedAttributes.Add("style");

        // Whitelist specific CSS properties for table elements
        sanitizer.AllowedCssProperties.Add("width");
        sanitizer.AllowedCssProperties.Add("height");
        sanitizer.AllowedCssProperties.Add("text-align");
        sanitizer.AllowedCssProperties.Add("vertical-align");
        sanitizer.AllowedCssProperties.Add("overflow");
        sanitizer.AllowedCssProperties.Add("display");

        var result = sanitizer.SanitizeDocument(html, "");
        //get all empty spans or spans that only contain &nbsp; and remove them
        return System.Text.RegularExpressions.Regex.Replace(result, @"<span[^>]*>(&nbsp;|\s)*<\/span>", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    }
}
