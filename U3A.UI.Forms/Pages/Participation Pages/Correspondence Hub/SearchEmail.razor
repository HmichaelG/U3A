@namespace U3A.UI.Forms

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject WorkstationService ws
@using Ganss.Xss
@using U3A.Services
@using U3A.Services.Email;
@using DevExpress.Blazor.Viewer.Internal.Editors


<Progress @ref=progressBar />
<MessageBox @ref=messageBox />

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <div class="w-100 px-2">
        <h4>Search Email</h4>
        <DxFormLayout CssClass="mt-4">
            <FullScreen @ref=@fullScreen>
                <ContentTemplate>
                    <DxGrid id="my-grid" Data=@messages @ref=@mainGrid
                            AutoExpandAllGroupRows=false>
                        <ToolbarTemplate>
                            <GridToolbar LinkedGrid=@mainGrid LayoutKey="{B8414CBE-49B9-47D4-A754-4FDC59A29115}">
                                <CustomButtonContentAtStart>
                                    <DxToolbarItem Context="searchByContext">
                                        <Template>
                                            <div class="d-flex" style="max-width: 10rem;">
                                                <div class="flex-grow-0 pt-1 pe-2">Search By:</div>
                                                <DxComboBox Data=@searchBy  @bind-Value="@selectedSearchBy" />
                                            </div>
                                        </Template>
                                    </DxToolbarItem>
                                    <DxToolbarItem Context="participantContext"
                                                   Visible="@(selectedSearchBy == "Participant")">
                                        <Template>
                                            <div class="d-flex" style="min-width: 15rem;">
                                                <div class="flex-grow-0 pt-1 px-2">Name:</div>
                                                <PersonsComboBox People="@people"
                                                            @bind-SelectedPerson="@selectedPerson"
                                                            @bind-SelectedPerson:after="@OnSearch" />
                                            </div>
                                        </Template>
                                    </DxToolbarItem>
                                    <DxToolbarItem Context="emailContext"
                                                   Visible="@(selectedSearchBy == "Email")">
                                        <Template>
                                            <div class="d-flex" style="min-width: 30rem;">
                                                <div class="flex-grow-0 pt-1 px-2">Address:</div>
                                                <DxComboBox Id="emailId" Data="@email" CssClass="flex-grow-1"
                                                            AllowUserInput=true
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            SearchMode="ListSearchMode.AutoSearch"
                                                            ListRenderMode="ListRenderMode.Virtual"
                                                            @bind-Value="@emailAddress"
                                                            @bind-Value:after=@OnEmailSearch />
                                            </div>
                                        </Template>
                                    </DxToolbarItem>
                                    <DxToolbarItem Context="dateContext"
                                                   Visible="@(selectedSearchBy == "Date")">
                                        <Template>
                                            <div class="d-flex gap-1">
                                                <div class="flex-grow-0 pt-1 px-2">From:</div>
                                                <DxDateEdit @bind-Date="@fromDate" MinDate="@minDate" MaxDate="@maxDate" CssClass="flex-grow-1" />
                                                <div class="flex-grow-0 align-self-center">To</div>
                                                <DxDateEdit @bind-Date="@toDate"
                                                            CssClass="flex-grow-1"
                                                            MinDate="@minDate"
                                                            MaxDate="@maxDate">
                                                </DxDateEdit>
                                                <DxButton Text="Search" CssClass="flex-grow-0"
                                                          IconCssClass="bi bi-search"
                                                          RenderStyleMode="ButtonRenderStyleMode.Contained"
                                                          Tooltip="Click to search for the selected member"
                                                          Click="@OnDateSearch" />
                                            </div>
                                        </Template>
                                    </DxToolbarItem>
                                </CustomButtonContentAtStart>
                            </GridToolbar>
                        </ToolbarTemplate>

                        <Columns>
                            <DxGridDataColumn Width="10rem" FixedPosition="GridColumnFixedPosition.Left" Caption="Received" FieldName="ReceivedAt" DisplayFormat="{0:dd-MMM-yyyy hh:mm tt}" />
                            <DxGridDataColumn Caption="Stream" FieldName="Stream" />
                            <DxGridDataColumn Caption="From" FieldName="From" />
                            <DxGridDataColumn Caption="To" FieldName="To" Visible=@IsSearchByDateRange />
                            <DxGridDataColumn Caption="Subject" FieldName="Subject" />
                            <DxGridDataColumn Caption="Attachments" FieldName="Attachments" />
                            <DxGridDataColumn Caption="Status" FieldName="Status" />
                            <DxGridDataColumn Width="8rem" Caption="Details" FieldName="MessageID" AllowGroup="false" FixedPosition="GridColumnFixedPosition.Right">
                                <CellDisplayTemplate>
                                    <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" CssClass="w-100"
                                              RenderStyle="ButtonRenderStyle.Primary" Text="Details"
                                              Click="() => OnDetailsClick((EmailMessage)context.DataItem)"></DxButton>
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                        </Columns>
                        <TotalSummary>
                            <DxGridSummaryItem FieldName="Subject" FooterColumnName="Subject" SummaryType="GridSummaryItemType.Count" />
                        </TotalSummary>
                    </DxGrid>
                </ContentTemplate>
            </FullScreen>
        </DxFormLayout>
    </div>

    <DxWindow @ref=@emailDetailsForm Width="60vw" Height="90vh"
              AllowResize="true"
              Context="windowContext"
              CloseOnEscape=true
              ShowCloseButton=true
              ShowFooter=true
              Scrollable=true
              HeaderText="Email Message Details">
        <BodyTextTemplate>
            <DxFormLayout>
                <DxFormLayoutGroup Caption="Email Details" CssClass="my-2 w-100">
                    <div class="px-4 w-100">
                        <div class="d-flex flex-row detail-row">
                            <div class="col-2"><b>Time</b></div>
                            <div class="col-10">@selectedEmail.ReceivedAt.ToString("dd-MMM-yy hh:mm tt")</div>
                        </div>
                        <div class="d-flex flex-row detail-row">
                            <div class="col-2"><b>Subject</b></div>
                            <div class="col-10">@selectedEmail.Subject</div>
                        </div>
                        <div class="d-flex flex-row detail-row">
                            <div class="col-2"><b>From</b></div>
                            <div class="col-10">@selectedEmail.From</div>
                        </div>
                    </div>
                </DxFormLayoutGroup>
                <DxFormLayoutGroup Caption="Events">
                    <DxGrid Data=@messageEvents @ref=@eventGrid CssClass="m-2" id="myGrid">
                        <Columns>
                            <DxGridDataColumn Width="10rem" FixedPosition="GridColumnFixedPosition.Left" Caption="Time" FieldName="ReceivedAt" DisplayFormat="{0:dd-MMM-yyyy hh:mm tt}" />
                            <DxGridDataColumn Caption="Event" FieldName="Type" />
                        </Columns>
                    </DxGrid>
                </DxFormLayoutGroup>
                <DxFormLayoutGroup Caption="Message">
                    <div class="w-100 m-4">
                        @(new MarkupString(SanitizeHtml()))
                    </div>
                </DxFormLayoutGroup>
            </DxFormLayout>
        </BodyTextTemplate>
    </DxWindow>

    <style>
        .detail-row {
            padding-bottom: 0.25rem;
            padding-top: 0.25rem;
            border-bottom: 1px solid #ddd;
        }

    </style>
}


@code {
    IEnumerable<EmailMessage> messages;
    IEnumerable<EmailMessageEvent> messageEvents;
    IEnumerable<string> email;
    EmailMessage selectedEmail;
    List<Person> people { get; set; }
    Person selectedPerson { get; set; }
    MessageBox? messageBox;
    Progress? progressBar;
    U3ADbContext dbc { get; set; }
    PostmarkService service;
    bool IsReady;
    bool isSearchByEmailAddress;
    string emailAddress;
    bool IsSearchByDateRange;
    bool areDetailsExpanded = true;
    FullScreen? fullScreen;

    IGrid? mainGrid { get; set; }
    IGrid? eventGrid { get; set; }
    GridToolbar? Toolbar;
    DxWindow emailDetailsForm;
    DateTime fromDate;
    DateTime toDate;
    DateTime minDate;
    DateTime maxDate;
    TimeSpan tzOffset;
    LocalTime? localTime;
    string[] searchBy = new string[] { "Participant", "Email", "Date" };
    string selectedSearchBy = "Participant";

    protected override async Task OnInitializedAsync()
    {
        service = new PostmarkService(U3Adbfactory);
        await GetData();
        IsReady = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (localTime == null)
        {
            localTime = new LocalTime(js);
            tzOffset = await localTime.GetTimezoneOffsetAsync();
            toDate = await localTime.GetLocalDateAsync();
            fromDate = toDate.AddDays(-6).Date;
            minDate = toDate.AddDays(-30).Date;
            maxDate = toDate;
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetData()
    {
        using (dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            people = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
            email = people
                        .Where(x => !string.IsNullOrWhiteSpace(x.Email))
                        .OrderBy(x => x.Email)
                        .Select(x => x.Email).ToArray();
        }
    }

    async Task OnDetailsClick(EmailMessage dataItem)
    {
        await progressBar.ShowSmallSpinnerAsync();
        selectedEmail = dataItem;
        var address = (isSearchByEmailAddress) ? emailAddress : (IsSearchByDateRange) ? selectedEmail.To : selectedPerson?.Email;
        messageEvents = await service.GetEmailMessageDetailAsync(tzOffset, dataItem, address);
        await emailDetailsForm.ShowAsync();
        await progressBar.Close();
    }

    async Task OnSearch()
    {
        IsSearchByDateRange = false;
        messages = new List<EmailMessage>();
        if (selectedPerson != null && !string.IsNullOrEmpty(selectedPerson.Email))
        {
            isSearchByEmailAddress = false;
            await SearchMessagesAsync(selectedPerson.Email);
        }
    }

    async Task OnEmailSearch()
    {
        IsSearchByDateRange = false;
        messages = new List<EmailMessage>();
        if (!string.IsNullOrEmpty(emailAddress))
        {
            isSearchByEmailAddress = true;
            await SearchMessagesAsync(emailAddress);
        }
    }

    async Task SearchMessagesAsync(string emailAddress)
    {
        await progressBar.ShowSmallSpinnerAsync();
        messages = await service.SearchMessagesAsync(tzOffset, emailAddress);
        await progressBar.Close();
    }

    async Task OnDateSearch()
    {
        IsSearchByDateRange = true;
        isSearchByEmailAddress = false;
        messages = new List<EmailMessage>();
        if (toDate >= fromDate)
        {
            await progressBar.ShowSmallSpinnerAsync();
            messages = await service.SearchMessagesAsync(tzOffset, From: fromDate, To: toDate);
            await progressBar.Close();
        }
        else await messageBox.ShowOkOnlyAsync("Invalid Dates", "The From date must be prior to the To date.");
    }

    string SanitizeHtml()
    {
        string html = messageEvents.FirstOrDefault().HtmlBody;
        var stream = messageEvents.FirstOrDefault().Stream;
        if (stream != null && stream.ToLowerInvariant().Contains("transaction")) { return html; }
		var sanitized = HtmlHelpers.AdjustAndMinifyHtml(html,RemoveEmptyBlocks:false);
        var result = (ws.Theme == "light") ? sanitized.WithImages : sanitized.WithImagesDarkMode;
		return result;
    }
}
