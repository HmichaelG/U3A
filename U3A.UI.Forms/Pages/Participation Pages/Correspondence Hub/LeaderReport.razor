@namespace U3A.UI.Forms


@inject IJSRuntime js
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService
@inject ILogger<LeaderReport> Logger
@inject IWebHostEnvironment Environment
@implements IDisposable
@using U3A.UI.Reports

@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <div class="px-2">
        <h3>Queue Leader Reports for email</h3>
        <p>Queue Class reports for selected courses/leaders.</p>
        <CollapsableContent DismissKey="{40D384A9-AA9E-49AD-8F70-BA65C97ACF0D}"
                        AlertText=@(@"<p><strong>Leader Reports</strong> is now an automated procedure.<br />
                        All reports are automatically sent to leaders one day prior (Sunday) to the
                        start of term.</p>")
                            OnDismissChanged="@((bool IsDismissed) => OnContentChange(IsDismissed))"
                            OnToggleAlert="@(() => InvokeAsync(StateHasChanged))" />
        <DxFormLayout>
            <DxFormLayoutItem Caption="Enrolment Term" ColSpanMd="6">
                <TermsComboBox Terms="@terms"
                               @bind-SelectedTerm="@selectedTerm"
                               @bind-SelectedTerm:after=@(async() => await SelectedTermChanged(selectedTerm)) />
            </DxFormLayoutItem>
        </DxFormLayout>
        <br />

        <MessageBox @ref="@messageBox" />
        <Progress @ref="@ProgressBar" />
        <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

        <DxFormLayout>
            <div class="col-10 px-4">
                <FullScreen DisplayOffset="@contentSize">
                    <ContentTemplate>
                        <DxGrid Data="@Classes" @ref=@mainGrid
                                ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                                ShowFilterRow="false"
                                ShowAllRows="true"
                                KeyFieldName="ID"
                                SelectionMode="GridSelectionMode.Multiple"
                                UnboundColumnData="Grid_CustomUnboundColumnData"
                                SelectedDataItemChanged="OnSelectedDataItemChanged"
                                @bind-SelectedDataItems="SelectedDataItems"
                                ValidationEnabled="true">
                            <ToolbarTemplate>
                                <GridToolbar LinkedGrid=@mainGrid LayoutKey="{3607602E-7BF7-40D9-9D42-B3DEA3BCC287}" />
                            </ToolbarTemplate>
                            <Columns>
                                <DxGridSelectionColumn Width="2rem" />
                                <DxGridDataColumn Caption="Name" FieldName="Course.Name" Width="20rem" />
                                <DxGridDataColumn Caption="Offered" FieldName="OfferedSummary" />
                                <DxGridDataColumn Caption="Venue" FieldName="Venue.Name" />
                                <DxGridDataColumn Caption="Held" FieldName="OccurrenceTextBrief" />
                                <DxGridDataColumn Caption="Start" FieldName="StartTime" DisplayFormat="hh:mm tt" />
                                <DxGridDataColumn Caption="Send To 1" FieldName="Recipient0"
                                                  UnboundType="GridUnboundColumnType.String" Width="10rem" />
                                <DxGridDataColumn Caption="Send To 2" FieldName="Recipient1"
                                                  UnboundType="GridUnboundColumnType.String" />
                                <DxGridDataColumn Caption="Send To 3" FieldName="Recipient2"
                                                  UnboundType="GridUnboundColumnType.String" />
                            </Columns>
                            <TotalSummary>
                                <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" Name="Course.Name" FieldName="Course.Name" />
                            </TotalSummary>

                        </DxGrid>
                    </ContentTemplate>
                </FullScreen>
            </div>
            <div class="col col-2 mt-3">
                <SelectLeaderReports @ref=@rptSelect SingleReportOnly=false
                                     AreSelectionsMade="@AreSelectionsMade"
                                     OnQueueReportsSelected="OnQueueReportsSelected" />
            </div>
        </DxFormLayout>
    </div>
}


@code {
    int contentSize;
    bool IsReady;
    List<Class> Classes { get; set; } = new List<Class>();
    List<Term> terms { get; set; }
    Term currentTerm;
    Term selectedTerm;
    SystemSettings settings;
    IReadOnlyList<object> SelectedDataItems { get; set; }
    List<LeaderReportRecipientsByClass> reportRecipients;

    bool AreSelectionsMade { get; set; }
    SelectLeaderReports? rptSelect;
    ProFormaReportFactory reportFactory;

    DxGridCommandColumnEx? GridCommandColumn;
    MessageBox messageBox;

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    Progress? ProgressBar;
    string ErrorHeader;
    string ErrorMessage;
    U3ADbContext dbc { get; set; }
    TenantDbContext dbcT { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        dbcT = await TenantDbfactory.CreateDbContextAsync();
        settings = await dbc.SystemSettings.OrderBy(x => x.ID).FirstOrDefaultAsync();
        terms = await BusinessRule.SelectableTermsInCurrentYearAsync(dbc);
        currentTerm = await BusinessRule.CurrentEnrolmentTermOrNextAsync(dbc);
        selectedTerm = currentTerm;
        await SelectedTermChanged(selectedTerm);
        IsReady = true;
    }

    async Task SelectedTermChanged(Term term)
    {
        selectedTerm = term;
        Classes = (await BusinessRule.GetClassDetailsAsync(dbc, selectedTerm, settings))
                        .OrderBy(x => x.Course.Name).ThenBy(x => x.OnDayID).ToList();
        reportRecipients = await BusinessRule.GetLeaderReportRecipientsByClass(dbc, settings, currentTerm, Classes);
    }

    void OnContentChange(bool IsDismissed)
    {
        contentSize = (IsDismissed) ? 13 : 22;
        StateHasChanged();
    }

    void OnSelectedDataItemChanged()
    {
        AreSelectionsMade = true;
    }

    async Task OnQueueReportsSelected()
    {
        ErrorMessage = "";
        await ProcessReportsAsync(false);
        var msg = $"<p>The selected documents have been queued and will be sent via email within the hour.</p>";
        if (ErrorMessage != "") { msg += $"<div class='alert alert-danger text-dark'>{ErrorMessage}</div>"; }
        await messageBox.SetPopupWidth("30%");
        await messageBox.ShowOkOnlyAsync("Communication Complete", msg);
    }

    async Task ProcessReportsAsync(bool IsPreview)
    {
        dbc.ChangeTracker.Clear();
        await ProgressBar.ShowAsync("Processing ... Please Wait", SelectedDataItems.Count);
        reportFactory = new ProFormaReportFactory(Environment, U3Adbfactory, IsPreview);
        int count = 0;
        foreach (var c in SelectedDataItems.Cast<Class>())
        {
            var recipients = GetReportRecipients(c);
            if (recipients.Count > 0)
            {
                foreach (var r in recipients)
                {
                    await ProcessReportAsync(r.Person, c.Course, c);
                }
                count++;
            }
            else { ErrorMessage += $"<strong>{c.Course.Name}</strong> not printed. It has no leaders/clerks with visible email addresses.<br/>"; }
            await ProgressBar.SetValueAsync(count);
        }
        await ProgressBar.Close();
        await dbc.SaveChangesAsync();
    }

    async Task ProcessReportAsync(Person Leader, Course Course, Class Class)
    {
        var enrolments = new List<Enrolment>();
        if (dbc.Enrolment.Any(x => x.ClassID == Class.ID && x.TermID == selectedTerm.ID))
        {
            enrolments = dbc.Enrolment.IgnoreQueryFilters()
                                .Include(x => x.Person)
                                .Where(x => !x.IsDeleted && x.ClassID == Class.ID
                                            && x.TermID == selectedTerm.ID).ToList();
            enrolments.AddRange(await BusinessRule.GetMultiCampusEnrolmentsAsync(dbc, dbcT,
                                    await tenantService.GetTenantIdentifierAsync(), Course.ID, Class.ID));
        }
        else
        {
            enrolments = dbc.Enrolment.IgnoreQueryFilters()
                                .Include(x => x.Person)
                                .Where(x => !x.IsDeleted && x.CourseID == Course.ID
                                                && x.TermID == selectedTerm.ID).ToList();
            enrolments.AddRange(await BusinessRule.GetMultiCampusEnrolmentsAsync(dbc, dbcT,
                                    await tenantService.GetTenantIdentifierAsync(), Course.ID));
        };
        if (enrolments.Count > 0 || !rptSelect.RequireEnrolements)
        {
            var mail = new SendMail()
                {
                    DocumentName = "U3A Leaders Reports",
                    Person = await dbc.Person.FindAsync(Leader.ID),
                    PersonID = Leader.ID,
                    TermID = selectedTerm.ID,
                    PrintAttendanceRecord = rptSelect.PrintAttendanceRecord,
                    PrintAttendanceAnalysis = rptSelect.PrintAttendanceAnalysis,
                    PrintClassList = rptSelect.PrintClassList,
                    PrintCSVFile = rptSelect.PrintCSVFile,
                    PrintICEList = rptSelect.PrintICEList,
                    PrintLeaderReport = rptSelect.PrintLeaderReport,
                    PrintMemberBadges = rptSelect.PrintMemberBadges,
                    RecordKey = Class.ID,
                    IsUserRequested = true
                };
            dbc.Add(mail);
        }
        else
        {
            ErrorMessage += $"<strong>{Course.Name}</strong> not printed because it has no enrolments<br/>";
        }
    }

    void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        var Class = e.DataItem as Class;
        var recipient = GetReportRecipients(Class);
        if (e.FieldName == "Recipient0" && recipient.Count >= 1)
        {
            e.Value = recipient[0]?.Person.FullName;
        }
        if (e.FieldName == "Recipient1" && recipient.Count >= 2)
        {
            e.Value = recipient[1]?.Person.FullName;
        }
        if (e.FieldName == "Recipient2" && recipient.Count >= 3)
        {
            e.Value = recipient[2]?.Person.FullName;
        }
    }

    List<LeaderReportRecipientsByClass> GetReportRecipients(Class c)
    {
        return reportRecipients
            .Where(x => x.Class.ID == c.ID)
            .OrderBy(x => x.SortOrder).ThenBy(x => x.Person.FullNameAlpha).ToList();
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
