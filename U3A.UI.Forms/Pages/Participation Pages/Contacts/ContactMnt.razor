@page "/ContactMnt"


@using System.Diagnostics
@using DevExpress.Data.Filtering;
@using Microsoft.AspNetCore.Hosting
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using U3A.Data
@using U3A.UI.Contact.Shared

@inject NavigationManager NavMan
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IWebHostEnvironment environment

@implements IDisposable

@attribute [Authorize]

<form autocomplete="off">
    @if (!IsReady)
    {
        <LoadingIndicator />
    }
    else
    {
        @if (!IsReadOnly)
        {
            <ContextHelpTitle Title="Contacts" HelpTopic="Add_Edit-Contacts.html"
            Subtitle="People associated with your U3A that are <b>not</b> Participants." />
        }
        <MessageBox @ref=@tagSelectionMessageBox>
            <TextTemplate>
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Select Tag(s)" ColSpanMd="12">
                        <DxTagBox Data="@tags"
                                  KeyFieldName="Id"
                                  TextFieldName="Name"
                                  NullText="Click to select..."
                                  ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                  @bind-Values="@selectedTags">
                            <Columns>
                                <DxListEditorColumn FieldName="@nameof(Tag.Name)" Caption="Name" />
                                <DxListEditorColumn FieldName="@nameof(Tag.CanLead)" Caption="Can Lead?" />
                                <DxListEditorColumn FieldName="@nameof(Tag.CanEnrol)" Caption="Can Enrol?" />
                            </Columns>
                        </DxTagBox>
                    </DxFormLayoutItem>
                </DxFormLayout>
            </TextTemplate>
        </MessageBox>

        <MessageBox @ref="@messageBox" />
        <Progress @ref="@ProgressBar" />
        <DateFilter @ref=DateFilter />

        <SelectDocumentTemplatePopup @ref="@selectDocumentTemplatePopup" dbContext="@dbc"
                                     DocumentTemplates="@DocumentTemplates" SendTo="@SendTo" />

        <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

        <DxTabs @ref="@dxTabs" ActiveTabIndexChanged="() => StateHasChanged()">
            <DxTabPage Text="Contacts" />
            <DxTabPage Text="Contacts By Tag" />
            <DxTabPage Text="Add/Edit Tags" Visible="@(!IsReadOnly)" />
        </DxTabs>

        <FullScreen>
            <ContentTemplate>
                @{
                    var index = dxTabs?.ActiveTabIndex;
                    switch (index)
                    {
                        case 0:
                            <DxGrid id="my-grid" Data="@contacts" @ref=@mainGrid
                                    @bind-SelectedDataItems="@SelectedDataItems"
                                    UnboundColumnData="OnUnboundColumnData"
                                    AllowSelectRowByClick="false"
                                    KeyFieldName="ID"
                                    PopupEditFormCssClass="popup-width"
                                    EditMode="GridEditMode.PopupEditForm"
                                    CustomizeEditModel="Grid_CustomizeEditModel"
                                    EditModelSaving="Grid_EditModelSaving"
                                    PopupEditFormHeaderText="Add/Edit Contacts"
                                    DataItemDeleting="Grid_DataItemDeleting">
                                <ToolbarTemplate>
                                    <ContactToolbar LinkedGrid=@mainGrid Visible="@(!IsReadOnly)"
                                                    LayoutKey="@GridLayoutKey"
                                                    OnCommunicateClicked="@OnCommunicate"
                                                    OnDeleteClicked="@OnDelete"
                                                    OnAddTagsClicked="@OnAddTag"
                                                    OnRemoveTagsClicked="@OnRemoveTag"
                                                    OnSelectByTagClicked="@OnSelectByTag">
                                    </ContactToolbar>
                                </ToolbarTemplate>
                                <Columns>
                                    <DxGridSelectionColumn FixedPosition="GridColumnFixedPosition.Left"
                                                           Width="2rem" Visible=@(!IsReadOnly) />
                                    <DxGridCommandColumnEx FixedPosition="GridColumnFixedPosition.Left"
                                                           Width="6rem" Visible=@(!IsReadOnly) />
                                    <DxGridDataColumn FixedPosition="GridColumnFixedPosition.Left"
                                                      Caption="Name" FieldName="FullNameAlpha" Width="8rem" />
                                    <DxGridBandColumn Caption="Address" Visible="false">
                                        <Columns>
                                            <DxGridDataColumn Caption="Street" FieldName="Address" Visible=true Width="12rem" />
                                            <DxGridDataColumn Caption="City" FieldName="City" Width="8rem" />
                                            <DxGridDataColumn Caption="State" FieldName="State" Visible=false />
                                            <DxGridDataColumn Caption="P'code" FieldName="Postcode" DisplayFormat="{0:D}" Width="5rem" Visible="false" />
                                        </Columns>
                                    </DxGridBandColumn>
                                    <DxGridBandColumn Caption="Contact Detail">
                                        <Columns>
                                            <DxGridDataColumn Caption="Email" FieldName="Email" Visible=true Width="12rem" />
                                            <DxGridDataColumn Caption="Phone" FieldName="AdjustedHomePhone" Width="5rem" />
                                            <DxGridDataColumn Caption="Mobile" FieldName="AdjustedMobile" Visible=true Width="5rem" />
                                        </Columns>
                                    </DxGridBandColumn>
                                    <DxGridBandColumn Caption="Emergency Contact">
                                        <Columns>
                                            <DxGridDataColumn Caption="Contact" FieldName="ICEContact" Width="12rem" />
                                            <DxGridDataColumn Caption="Phone" FieldName="ICEPhone" Width="5rem" />
                                        </Columns>
                                    </DxGridBandColumn>
                                    <DxGridDataColumn Caption="Last Update" FieldName="UpdatedOn" Width="8rem"
                                                      DisplayFormat="dd-MMM-yy HH:mm" Visible="false" />
                                    <DxGridDataColumn Caption="Tags" FieldName="UnboundTags" AllowGroup="false" MInWidth="400"
                                                      UnboundType="GridUnboundColumnType.String">
                                        <CellDisplayTemplate>
                                            @{
                                                var contactTags = context.Value.ToString().Split(";\t");
                                            }
                                            <DxTagBox Data="@contactTags"
                                                      TData="string" TValue="string"
                                                      Values="@contactTags"
                                                      ReadOnly="true" />
                                        </CellDisplayTemplate>
                                    </DxGridDataColumn>
                                </Columns>
                                <GroupSummary>
                                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                                       FieldName="FullNameAlpha" DisplayText="{0:n0}  Contacts"
                                                       FooterColumnName="FullNameAlpha" />
                                </GroupSummary>
                                <TotalSummary>
                                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                                       FieldName="FullNameAlpha" DisplayText="{0:n0}  Contacts"
                                                       FooterColumnName="FullNameAlpha" />
                                </TotalSummary>

                                <EditFormTemplate Context="EditFormContext">
                                    @{
                                        var editItem = (Contact)EditFormContext.EditModel;
                                    }
                                    <DxFormLayout style="white-space:nowrap">
                                        <DxFormLayoutItem Caption="Tag(s)" ColSpanMd="12">
                                            <DxTagBox Data="@tags"
                                                      KeyFieldName="Id"
                                                      TextFieldName="Name"
                                                      NullText="(Optional) Tags to organise your contacts into groups. Each contact may have multiple tags."
                                                      ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                      @bind-Values="@editItem.Tags">
                                                <Columns>
                                                    <DxListEditorColumn FieldName="@nameof(Tag.Name)" Caption="Name" />
                                                    <DxListEditorColumn FieldName="@nameof(Tag.CanLead)" Caption="Can Lead?" />
                                                    <DxListEditorColumn FieldName="@nameof(Tag.CanEnrol)" Caption="Can Enrol?" />
                                                </Columns>
                                            </DxTagBox>
                                        </DxFormLayoutItem>
                                        <DxFormLayoutGroup Caption="Personal" ColSpanMd="6">
                                            <DxFormLayoutItem Caption="First Name" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.FirstName" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Last Name" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.LastName" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Email" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.Email"
                                                           autocomplete="new-password"
                                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                                                </DxTextBox>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Mobile Phone" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.Mobile" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Home Phone" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.HomePhone" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                        </DxFormLayoutGroup>

                                        <DxFormLayoutGroup Caption="Other Details" ColSpanMd="6">
                                            <DxFormLayoutItem Caption="Title" ColSpanMd="12">
                                                <DxComboBox TData="string" TValue="string"
                                                            NullText="(Optional) Select or Enter Title"
                                                            Data="@titles"
                                                            @bind-Text="@editItem.Title"
                                                            AllowUserInput="true" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Post-Nominals" ColSpanMd="12">
                                                <DxTextBox NullText="(Optional) PhD, BComm, RN etc"
                                                           @bind-Text="@editItem.PostNominals" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Silent Contacts" ColSpanMd="12">
                                                <DxComboBox Data="silentContactList"
                                                            @bind-Value="@editItem.SilentContact"
                                                            ValueFieldName="@nameof(SilentContactWrapper.Type)"
                                                            TextFieldName="@nameof(SilentContactWrapper.DisplayText)">
                                                </DxComboBox>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="SMS Opt-Out?" ColSpanMd="12">
                                                <DxCheckBox @bind-Checked="@editItem.SMSOptOut"
                                                            Alignment="CheckBoxContentAlignment.Right" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                        </DxFormLayoutGroup>
                                        <DxFormLayoutGroup Caption="Address" ColSpanMd="6">
                                            <DxFormLayoutItem Caption="Street" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.Address" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="City" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.City" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="State" ColSpanMd="6">
                                                <DxComboBox Data="@states" @bind-Value="@editItem.State" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Postcode" ColSpanMd="6">
                                                <DxSpinEdit @bind-Value="@editItem.Postcode" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                        </DxFormLayoutGroup>
                                        <DxFormLayoutGroup Caption="In Case of Emergency" ColSpanMd="6">
                                            <DxFormLayoutItem Caption="Contact" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.ICEContact" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Phone" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@editItem.ICEPhone" autocomplete="new-password" />
                                            </DxFormLayoutItem>
                                        </DxFormLayoutGroup>

                                    </DxFormLayout>
                                </EditFormTemplate>
                            </DxGrid>

                            break;

                        case 1:
                            <ContactByTag />
                            break;
                        case 2:
                            <TagMont TagListChanged="async () => await GetData()" />
                            break;
                    }
                }
            </ContentTemplate>
        </FullScreen>
    }
</form>

<style>
    .popup-width {
        min-width: min(65rem, 100%);
    }
</style>


@code {
    [CascadingParameter]
    LoginState loginState { get; set; }
    [Parameter]
    public string gridHeight { get; set; } = "800px";
    [Parameter]
    public bool IsReadOnly { get; set; } = false;
    [Parameter]
    public string GridLayoutKey { get; set; } = "{660EF721-D17F-4A69-B28E-46063DE0B0C2}";

    bool IsReady;
    IReadOnlyList<object> SelectedDataItems { get; set; }
    DateTime selectedDate;
    SystemSettings settings;
    Communication Communication;
    Term? firstTermNextYear;
    PersonTitles titles = new PersonTitles();
    List<SilentContactWrapper> silentContactList = new SilentContactList();

    List<Contact> contacts { get; set; }
    IEnumerable<Tag> tags { get; set; }
    IEnumerable<String> tagNames;

    AUState states;
    Gender gender;
    List<Person> SendTo { get; set; }
    List<DocumentTemplate> DocumentTemplates;
    SelectDocumentTemplatePopup? selectDocumentTemplatePopup;
    DateFilter DateFilter;
    DxTabs? dxTabs;
    MessageBox tagSelectionMessageBox;
    IEnumerable<Tag> selectedTags;

    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal Progress? ProgressBar;
    internal string ErrorHeader;
    internal string ErrorMessage;
    U3ADbContext? dbc { get; set; }
    DocumentServer server;
    int emailsSent;
    bool isGridFilterSet;
    bool isEmailEditing;

    MessageBox? messageBox { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        states = new AUState();
        gender = new Gender();
        Communication = new Communication();
        dbc = await U3Adbfactory.CreateDbContextAsync();
        DocumentTemplates = await BusinessRule.SelectableDocumentTemplatesAsync(dbc);
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        server = new DocumentServer(dbc);
        await GetData();
        IsReady = true;
    }

    async Task GetData()
    {
        dbc.ChangeTracker.Clear();
        contacts = await BusinessRule.EditableContactAsync(dbc);
        tags = await BusinessRule.SelectableTagAsync(dbc);
        tagNames = tags.Select(x => x.Name).ToArray();
    }

    void OnUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        if (e.FieldName == "UnboundTags")
        {
            var tags = (IEnumerable<Tag>)e.GetRowValue("Tags");
            e.Value = string.Join(";\t", tags.Select(x => x.Name).ToArray());
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var editModel = (Contact)e.EditModel;
            editModel.DateJoined = DateTime.Today;
            editModel.State = dbc.TenantInfo.State;
        }
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        mainGrid.ClearSelection();
        var editModel = (Contact)e.EditModel;
        if (!await IsDataOK(editModel)) { e.Cancel = true; return; }
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new Contact() : dbc.Contact.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        if (dataItem != null)
        {
            editModel.CopyTo(dataItem);
            dataItem.Tags = editModel.Tags.ToList();
            // Post changes to the database.
            if (e.IsNew) await dbc.AddAsync(dataItem);
            if (await SaveChangesAsync())
            {
                // update the Grid.
                if (e.IsNew)
                {
                    contacts.Insert(0, dataItem);
                }
                else
                {
                    int idx = contacts.FindIndex(x => x.ID == dataItem.ID);
                    contacts[idx] = dataItem;
                }
            }
        }
    }


    async Task<bool> IsDataOK(Contact Contact)
    {
        bool result = true;
        if (contacts != null)
        {
            var dupHTML = await BusinessRule.GetDuplicateMarkupToContinue(dbc, Contact);
            if (!string.IsNullOrWhiteSpace(dupHTML))
            {
                var args = new MessageBoxArgs();
                args.Caption = "Duplicate Participant?";
                args.Message = dupHTML;
                args.OKButtonText = "Continue";
                result = await messageBox.ShowAsync(args);
            }
        }
        return result;
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        mainGrid.ClearSelection();
        Person Contact = e.DataItem as Person;
        string sql =
                                                    $@"Update Person
            set [IsDeleted] = 1, [DeletedAt] = getdate() , [User] = '{loginState.LoginEmail}'
            where ID = '{Contact.ID.ToString()}'";
        await dbc.Database.ExecuteSqlRawAsync(sql);
        await GetData();
    }

    async Task<bool> SaveChangesAsync()
    {
        bool result = false;
        try
        {
            // Post changes to the database.
            await dbc.SaveChangesAsync();
            result = true;
        }
        catch (DbUpdateConcurrencyException)
        {
            dbc.ChangeTracker.Clear();
        }
        catch (Exception ex)
        {
            ErrorHeader = "Save to database error";
            ErrorMessage = Helpers.GetErrorMessage(ex);
            await ErrorPopup.ShowPopupAsync();
            dbc?.ChangeTracker?.Clear();
        }
        return result;
    }

    async Task OnDelete()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await ShowNoSelectionDialog();
            return;
        }
        string contactsToDelete = "";
        foreach (var item in SelectedDataItems)
        {
            var contact = item as Contact;
            if (contact != null) { contactsToDelete += $"'{contact.ID.ToString()}',"; }
        }
        contactsToDelete = contactsToDelete.TrimEnd(',');
        string sql =
            $@"Update Person
            set [IsDeleted] = 1, [DeletedAt] = getdate() , [User] = '{loginState.LoginEmail}'
            where ID IN ({contactsToDelete})";
        var count = await dbc.Database.ExecuteSqlRawAsync(sql);
        await GetData();
        await messageBox.ShowOkOnlyAsync("Deletion Complete", $"{count} contacts have been deleted.");
    }

    async Task OnSelectByTag()
    {
        if (await tagSelectionMessageBox.ShowAsync("Select required Tags", ""))
        {
            if (selectedTags != null)
            {
                foreach (var contact in contacts)
                {
                    foreach (var tag in selectedTags)
                    {
                        if (contact.Tags.Contains(tag))
                        {
                            mainGrid.SelectDataItem(contact, true);
                            break;
                        }
                    }
                }
                StateHasChanged();
            }
        }
    }

    async Task OnAddTag()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await ShowNoSelectionDialog();
            return;
        }
        if (await tagSelectionMessageBox.ShowAsync("Select Tags to add", ""))
        {
            if (selectedTags != null)
            {
                foreach (var item in SelectedDataItems)
                {
                    var id = (item as Contact).ID;
                    var contact = await dbc.Contact.FindAsync(id);
                    var contactTags = contact.Tags.ToList();
                    foreach (var tag in selectedTags)
                    {
                        if (!contact.Tags.Contains(tag))
                        {
                            contactTags.Add(tag);
                        }
                    }
                    contact.Tags = contactTags;
                }
                await dbc.SaveChangesAsync();
                StateHasChanged();
            }
        }
    }

    async Task OnRemoveTag()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await ShowNoSelectionDialog();
            return;
        }
        if (await tagSelectionMessageBox.ShowAsync("Select Tags to remove", ""))
        {
            if (selectedTags != null)
            {
                foreach (var item in SelectedDataItems)
                {
                    var id = (item as Contact).ID;
                    var contact = await dbc.Contact.FindAsync(id);
                    var contactTags = contact.Tags.ToList();
                    foreach (var tag in selectedTags)
                    {
                        if (contact.Tags.Contains(tag))
                        {
                            contactTags.Remove(tag);
                        }
                    }
                    contact.Tags = contactTags;
                }
                await dbc.SaveChangesAsync();
                StateHasChanged();
                selectedTags = null;
            }
        }
    }

    async Task ShowNoSelectionDialog() =>
               await messageBox.ShowOkOnlyAsync("Make a Selection", "Select one or more participants to use this option.");

    async Task OnCommunicate()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await ShowNoSelectionDialog();
            return;
        }
        SendTo = SelectedDataItems.Cast<Person>().OrderBy(x => x.FullNameAlpha).ToList();
        if (await selectDocumentTemplatePopup.ShowAsync())
        {
            emailsSent = 0;
            await ProgressBar.ShowSmallSpinnerAsync();
            List<Guid> personIDsToExport = SendTo.Select(x => x.ID).ToList();
            bool overridePreference = selectDocumentTemplatePopup.OverrideCommunicationPreference;
            int delayedStart = selectDocumentTemplatePopup.DelayedStart;
            await server.MailMerge(dbc,
                selectDocumentTemplatePopup.SelectedDocumentTemplate,
                personIDsToExport,
                overridePreference,
                delayedStart);
            await ProgressBar.Close();
            await messageBox.ShowOkOnlyAsync("Communication Complete", server.GetHTMLResult());
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
