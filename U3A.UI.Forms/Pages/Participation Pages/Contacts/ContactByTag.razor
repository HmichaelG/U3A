@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable

@using U3A.UI.Contact.Shared

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <MessageBox @ref="@messageBox" />
    <Progress @ref="@ProgressBar" />

    <MessageBox @ref=@tagSelectionMessageBox>
        <TextTemplate>
            <DxFormLayout>
                <DxFormLayoutItem Caption="Select Tag(s)" ColSpanMd="12">
                    <DxTagBox Data="@tags"
                    KeyFieldName="Id"
                    TextFieldName="Name"
                    NullText="Click to select..."
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                    @bind-Values="@selectedTags">
                        <Columns>
                            <DxListEditorColumn FieldName="@nameof(Tag.Name)" Caption="Name" />
                            <DxListEditorColumn FieldName="@nameof(Tag.CanLead)" Caption="Can Lead?" />
                            <DxListEditorColumn FieldName="@nameof(Tag.CanEnrol)" Caption="Can Enrol?" />
                        </Columns>
                    </DxTagBox>
                </DxFormLayoutItem>
            </DxFormLayout>
        </TextTemplate>
    </MessageBox>


    <SelectDocumentTemplatePopup @ref="@selectDocumentTemplatePopup" dbContext="@dbc"
    DocumentTemplates="@DocumentTemplates" SendTo="@SendTo" />

    <DxGrid id="my-grid" Data="@taggedContacts" @ref=@mainGrid
    @bind-SelectedDataItems="@SelectedDataItems"
    AutoExpandAllGroupRows="true"
    AllowSelectRowByClick="true"
    SelectionMode=GridSelectionMode.Multiple
    KeyFieldNames="@(new List<string>() {"Tag.Id","Contact.ID"})">
        <ToolbarTemplate>
            <ContactToolbar LinkedGrid=@mainGrid
            LayoutKey="{F0CB0949-8C0B-4B82-9597-942DEEC72F3C}"
            OnCommunicateClicked="OnCommunicate"
            OnDeleteClicked="@OnDelete"
            OnAddTagsClicked="@OnAddTag"
            OnRemoveTagsClicked="@OnRemoveTag"
            OnSelectByTagClicked="@OnSelectByTag" />
        </ToolbarTemplate>
        <Columns>
            <DxGridDataColumn Caption="Tag" FieldName="Tag.Name" GroupIndex="0" />
            <DxGridSelectionColumn FixedPosition="GridColumnFixedPosition.Left"
            Width="2rem" />
            <DxGridDataColumn Caption="Name" FieldName="Contact.FullNameAlpha" />
            <DxGridBandColumn Caption="Address">
                <Columns>
                    <DxGridDataColumn Caption="Street" FieldName="Contact.Address" Visible=true Width="12rem" />
                    <DxGridDataColumn Caption="City" FieldName="Contact.City" Width="9rem" />
                    <DxGridDataColumn Caption="State" FieldName="Contact.State" Visible=false />
                    <DxGridDataColumn Caption="P'code" FieldName="Contact.Postcode" DisplayFormat="{0:D}" Width="5rem" Visible="false" />
                </Columns>
            </DxGridBandColumn>
            <DxGridBandColumn Caption="Contact Detail">
                <Columns>
                    <DxGridDataColumn Caption="Email" FieldName="Contact.Email" Visible=true Width="15rem" />
                    <DxGridDataColumn Caption="Phone" FieldName="Contact.AdjustedHomePhone" Width="8rem" />
                    <DxGridDataColumn Caption="Mobile" FieldName="Contact.AdjustedMobile" Width="8rem" />
                </Columns>
            </DxGridBandColumn>
            <DxGridBandColumn Caption="Emergency Contact" Visible="false">
                <Columns>
                    <DxGridDataColumn Caption="Contact" FieldName="Contact.ICEContact" Visible=false />
                    <DxGridDataColumn Caption="Phone" FieldName="Contact.ICEPhone" Visible=false />
                </Columns>
            </DxGridBandColumn>
            <DxGridDataColumn Caption="Last Update" FieldName="Contact.UpdatedOn" Width="8rem"
            DisplayFormat="d/M/yy HH:mm" Visible="false" />
        </Columns>

        <GroupSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
            FieldName="Contact.Id" DisplayText="{0:n0} Contacts" />
        </GroupSummary>
        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
            FieldName="Tag.Id" DisplayText="{0:n0} Tagged Contacts"
            FooterColumnName="Contact.FullNameAlpha" />
        </TotalSummary>

    </DxGrid>
}

@code {
    [CascadingParameter]
    LoginState loginState { get; set; }

    IReadOnlyList<object> SelectedDataItems { get; set; }
    IEnumerable<TaggedContact> taggedContacts;
    IEnumerable<Tag> tags { get; set; }

    IGrid? mainGrid;
    List<Person> SendTo { get; set; }

    List<DocumentTemplate> DocumentTemplates;
    SelectDocumentTemplatePopup? selectDocumentTemplatePopup;
    Communication Communication;
    DocumentServer server;
    MessageBox? messageBox { get; set; }
    Progress? ProgressBar;
    int emailsSent;
    U3ADbContext? dbc { get; set; }
    MessageBox tagSelectionMessageBox;
    IEnumerable<Tag> selectedTags;
    bool isReady;

    protected override async Task OnInitializedAsync()
    {
        Communication = new Communication();
        dbc = await U3Adbfactory.CreateDbContextAsync();
        DocumentTemplates = await BusinessRule.SelectableDocumentTemplatesAsync(dbc);
        await GetData();
        server = new DocumentServer(dbc);
        await base.OnInitializedAsync();
        isReady = true;
    }

    async Task GetData()
    {
        tags = await BusinessRule.SelectableTagAsync(dbc);
        taggedContacts = await BusinessRule.SelectableTaggedContactsAsync(dbc);
    }

    async Task OnDelete()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await ShowNoSelectionDialog();
            return;
        }
        string contactsToDelete = "";
        foreach (var item in SelectedDataItems)
        {
            var tc = item as TaggedContact;
            if (tc != null) { contactsToDelete += $"'{tc.Contact.ID.ToString()}',"; }
        }
        contactsToDelete = contactsToDelete.TrimEnd(',');
        string sql =
                $@"Update Person
            set [IsDeleted] = 1, [DeletedAt] = getdate() , [User] = '{loginState.LoginEmail}'
            where ID IN ({contactsToDelete})";
        var count = await dbc.Database.ExecuteSqlRawAsync(sql);
        await GetData();
        await messageBox.ShowOkOnlyAsync("Deletion Complete", $"{count} contacts have been deleted.");
    }


    async Task OnSelectByTag()
    {
        if (await tagSelectionMessageBox.ShowAsync("Select required Tags", ""))
        {
            if (selectedTags != null)
            {
                foreach (var tc in taggedContacts)
                {
                    foreach (var tag in selectedTags)
                    {
                        if (tc.Tag.Id == tag.Id)
                        {
                            mainGrid.SelectDataItem(tc, true);
                            break;
                        }
                    }
                }
                StateHasChanged();
            }
        }
    }

    async Task OnAddTag()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await ShowNoSelectionDialog();
            return;
        }
        if (await tagSelectionMessageBox.ShowAsync("Select Tags to add", ""))
        {
            if (selectedTags != null)
            {
                foreach (var item in SelectedDataItems)
                {
                    var tc = (item as TaggedContact);
                    var contact = await dbc.Contact.FindAsync(tc.Contact.ID);
                    var contactTags = contact.Tags.ToList();
                    foreach (var tag in selectedTags)
                    {
                        if (!contact.Tags.Contains(tag))
                        {
                            contactTags.Add(tag);
                        }
                    }
                    contact.Tags = contactTags;
                }
                await dbc.SaveChangesAsync();
                await GetData();
            }
        }
    }

    async Task OnRemoveTag()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await ShowNoSelectionDialog();
            return;
        }
        if (await tagSelectionMessageBox.ShowAsync("Select Tags to remove", ""))
        {
            if (selectedTags != null)
            {
                foreach (var item in SelectedDataItems)
                {
                    var tc = (item as TaggedContact);
                    var contact = await dbc.Contact.FindAsync(tc.Contact.ID);
                    var contactTags = contact.Tags.ToList();
                    foreach (var tag in selectedTags)
                    {
                        if (contact.Tags.Contains(tag))
                        {
                            contactTags.Remove(tag);
                        }
                    }
                    contact.Tags = contactTags;
                }
                await dbc.SaveChangesAsync();
                selectedTags = null;
                await GetData();
            }
        }
    }

    async Task ShowNoSelectionDialog() =>
               await messageBox.ShowOkOnlyAsync("Make a Selection", "Select one or more participants to use this option.");

    async Task OnCommunicate()
    {
        if (SelectedDataItems == null || SelectedDataItems.Count <= 0)
        {
            await ShowNoSelectionDialog();
            return;
        }
        var taggedContacts = SelectedDataItems.Cast<TaggedContact>().OrderBy(x => x.Contact.FullNameAlpha).ToList();
        SendTo = taggedContacts.Select(x => x.Contact as Person).ToList();
        if (await selectDocumentTemplatePopup.ShowAsync())
        {
            emailsSent = 0;
            await ProgressBar.ShowSmallSpinnerAsync();
            List<Guid> personIDsToExport = SendTo.Select(x => x.ID).ToList();
            bool overridePreference = selectDocumentTemplatePopup.OverrideCommunicationPreference;
            int delayedStart = selectDocumentTemplatePopup.DelayedStart;
            await server.MailMerge(dbc,
                selectDocumentTemplatePopup.SelectedDocumentTemplate,
                personIDsToExport,
                overridePreference,
                delayedStart);
            await ProgressBar.Close();
            await messageBox.ShowOkOnlyAsync("Communication Complete", server.GetHTMLResult());
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
