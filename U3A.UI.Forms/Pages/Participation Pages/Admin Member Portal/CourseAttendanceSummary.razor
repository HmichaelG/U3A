@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable

<div class="p-2">

    <h3>Course Attendance Summary</h3>

    <MessageBox @ref=@messageBox />
    <Progress @ref=@progress />
    <DxFormLayout>
        <div class="w-100">
            <DxFormLayoutItem Caption="Attendance Term" CssClass="my-4">
                <DxComboBox Data="@terms" NullText="Select the Term required..."
                            FilteringMode="DataGridFilteringMode.Contains"
                            TextFieldName="@nameof(Term.TermSummary)"
                            @bind-Value="@SelectedTerm">
                    <Buttons>
                        <DxEditorButton Text="Process" CssClass="text-primary"
                                        IconCssClass="h5 bi bi-check-lg"
                                        Tooltip="Click to process the selected term"
                                        Click="@OnProcess" />
                    </Buttons>
                </DxComboBox>
            </DxFormLayoutItem>
        </div>

        <div class="w-100 text-info"><strong>Hint:</strong> Click rows on either grid to drill into detail.</div>
        <div class="col col-7 px-1">
            <DxGrid Data="@termSummary" @ref=@mainGrid CssClass="grid-height" id="myGrid"
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    FocusedRowEnabled="true"
                    FocusedRowChanged="OnFocusedRowChanged"
                    ShowGroupPanel="false"
                    ShowSearchBox="false"
                    ShowAllRows="true">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid HideGroupPanel=true HideSearchBox=true />
                </ToolbarTemplate>
                <Columns>
                    <DxGridDataColumn Caption="Course" FieldName="Course" />
                    <DxGridDataColumn Caption="Class Time" FieldName="DateSummary" Width="6rem" />
                    <DxGridDataColumn Caption="Classes" FieldName="ClassesRecorded" Width="4rem" />
                    <DxGridDataColumn Caption="Present" FieldName="Present" DisplayFormat="{0:n0}" Width="5rem" />
                    <DxGridDataColumn Caption="Apology" FieldName="AbsentWithApology" DisplayFormat="{0:n0}" Width="5rem" />
                    <DxGridDataColumn Caption="No Apology" FieldName="AbsentWithoutApology" DisplayFormat="{0:n0}" Width="5rem" />
                    <DxGridDataColumn Caption="Total" FieldName="Total" DisplayFormat="{0:n0}" Width="5rem" />
                </Columns>
                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="Course" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="ClassesRecorded" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Present" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="AbsentWithApology" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="AbsentWithoutApology" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Total" />
                </TotalSummary>
            </DxGrid>
        </div>
        <div class="col col-5 px-1">
            <DxGrid Data="@selectedClassSummary" @ref=@classGrid CssClass="grid-height" id="myGrid"
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    SelectionMode="GridSelectionMode.Single"
                    SelectedDataItemChanged="OnSelectedDataItemChanged"
                    AllowSelectRowByClick=true
                    ShowAllRows="true">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@classGrid HideGroupPanel=true HideSearchBox=true />
                </ToolbarTemplate>
                <Columns>
                    <DxGridDataColumn Caption="Date" FieldName="ClassDate" DisplayFormat="ddd, dd-MMM-yyyy" />
                    <DxGridDataColumn Caption="Cancelled?" FieldName="IsCancelled" Width="5rem">
                        <CellDisplayTemplate>
                            <DxCheckBox Enabled="false" Checked="(bool)context.Value" />
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    <DxGridDataColumn Caption="Present" FieldName="Present" DisplayFormat="{0:n0}" Width="4rem" />
                    <DxGridDataColumn Caption="Apology" FieldName="AbsentWithApology" DisplayFormat="{0:n0}" Width="4rem" />
                    <DxGridDataColumn Caption="No Apology" FieldName="AbsentWithoutApology" DisplayFormat="{0:n0}" Width="5rem" />
                    <DxGridDataColumn Caption="Total" FieldName="Total" DisplayFormat="{0:n0}" Width="4rem" />
                </Columns>
                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Present" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="AbsentWithApology" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="AbsentWithoutApology" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Total" />
                </TotalSummary>
            </DxGrid>
        </div>
    </DxFormLayout>
</div>

<DxWindow @ref=@detailsForm Width="max(35vw, 400px)"
          AllowResize="true"
          Context="windowContext"
          CloseOnEscape=true
          Closed="OnDetailFormClosed"
          ShowCloseButton=true
          ShowFooter=true
          Scrollable=true
          BodyCssClass="grid-height"
          HeaderText=@detailsFormTitle>
    <BodyTextTemplate>
        <div class="p-4">
            <DxFormLayout>
                <DxGrid Data="@ClassAttendance" @ref=@attendanceGrid
                        ShowAllRows="true"
                        AutoExpandAllGroupRows=true
                        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                        ValidationEnabled="true">
                    <ToolbarTemplate>
                        <GridToolbar LinkedGrid=@attendanceGrid />
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridDataColumn Caption="Name"
                                          FieldName="Person.FullName"
                                          Width="15rem" />
                        <DxGridDataColumn Caption="AdHoc?" FieldName="IsAdHoc" Width="5rem">
                            <CellDisplayTemplate>
                                <DxCheckBox Enabled="false" Checked="(bool)context.Value" Alignment="CheckBoxContentAlignment.Center" />
                            </CellDisplayTemplate>
                            <FilterRowCellTemplate>
                                <DxCheckBox Checked="(bool?)context.FilterRowValue"
                                            CheckedChanged="(bool? v) => context.FilterRowValue = v"
                                            AllowIndeterminateStateByClick="true"
                                            Alignment="CheckBoxContentAlignment.Center" />
                            </FilterRowCellTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn Caption="Attendance" GroupIndex=0 SortOrder="GridColumnSortOrder.Descending"
                                          FieldName="AttendClassStatus.Status"
                                          Width="10rem" />
                        <DxGridDataColumn Caption="Comment" FieldName="Comment" />
                    </Columns>
                    <GroupSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FooterColumnName="Person.FullName" />
                    </GroupSummary>
                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="Person.FullName" />
                    </TotalSummary>
                </DxGrid>
            </DxFormLayout>
        </div>
    </BodyTextTemplate>
</DxWindow>

<style>
    .grid-height {
        height: @gridHeight;
    }
</style>


@code {
    List<AttendClass> ClassAttendance { get; set; }
    List<AttendClassSummaryByCourse> termSummary;
    List<AttendanceRecorded> classSummary;
    IEnumerable<AttendanceRecorded> selectedClassSummary;
    List<Term> terms { get; set; }
    Term SelectedTerm;
    MessageBox? messageBox;
    Progress? progress;
    DxGrid? mainGrid;
    DxGrid? classGrid;
    DxGrid? attendanceGrid;
    string gridHeight { get; set; }
    U3ADbContext dbc { get; set; }
    GridToolbar? Toolbar;
    GridToolbar? ClassToolbar;
    GridToolbar? attendanceToolbar;
    DxWindow? detailsForm;
    string detailsFormTitle;
    DateTime now;


    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
        SelectedTerm = await BusinessRule.CurrentTermAsync(dbc);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ClassToolbar != null && classGrid != null) { ClassToolbar.LinkedGrid = classGrid; }
        if (attendanceToolbar != null && attendanceGrid != null) { attendanceToolbar.LinkedGrid = attendanceGrid; }
        var newHeight = await Window.FitToRemainingHeight(js, "myGrid", gridHeight);
        if (newHeight != gridHeight)
        {
            gridHeight = newHeight;
            InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task OnProcess()
    {
        await progress.ShowSmallSpinnerAsync();
        mainGrid.BeginUpdate();
        var localTime = new U3A.Services.LocalTime(js);
        now = await localTime.GetLocalTimeAsync();
        termSummary = await BusinessRule.GetClassAttendanceSummaryByCourse(dbc, SelectedTerm, now);
        classSummary = await BusinessRule.GetAttendanceRecordedAsync(dbc, SelectedTerm, now);
        mainGrid.EndUpdate();
        InvokeAsync(StateHasChanged);
        await progress.Close();
    }

    void OnFocusedRowChanged(GridFocusedRowChangedEventArgs e)
    {
        var a = e.DataItem as AttendClassSummaryByCourse;
        selectedClassSummary = classSummary?.Where(x => x.ClassID == a?.ClassID);
        InvokeAsync(StateHasChanged);
    }

    async Task OnSelectedDataItemChanged(object DataItem)
    {
        var a = DataItem as AttendanceRecorded;
        if (a == null) return;
        if (a.Total == 0)
        {
            await messageBox.ShowOkOnlyAsync("No Attendance", "There is no attednance detail to display.");
        }
        else
        {
            detailsFormTitle = $"{a.CourseName} {a.ClassDate.ToString("dddd, dd-MMM-yyyy")}";
            await detailsForm.ShowAsync();
            attendanceGrid?.BeginUpdate();
            ClassAttendance = await BusinessRule.GetAttendanceDetailAsync(dbc, SelectedTerm, a.ClassID, a.ClassDate);
            attendanceGrid?.EndUpdate();
        }
    }

    void OnDetailFormClosed()
    {
        classGrid.BeginUpdate();
        classGrid.ClearSelection();
        classGrid.EndUpdate();
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
