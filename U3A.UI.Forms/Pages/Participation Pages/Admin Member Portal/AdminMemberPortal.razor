@page "/AdminMemberPortal"

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager navMan
@inject IJSRuntime js
@inject WorkstationService ws

@using Microsoft.AspNetCore.Components.Authorization
@using U3A.UI.Forms.Pages.MembersPortal
@using U3A.UI.Forms.Pages.Identity
@using U3A.UI.Forms

@implements IDisposable

@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <CascadingValue Value="@LoginState">

        <MessageBox @ref="@messageBox" />

        <div class="container-xl mt-2">
            <div class="left-align-style">
                <DxToolbar>
                    <Items>
                        <DxToolbarItem BeginGroup="true" Click=@(() => navMan.NavigateTo("AdminMemberPortal", true))
                                       Text="Process Member" IconCssClass="bi bi-person" />
                        <DxToolbarItem BeginGroup="true" Click="@(() => buttonClick = buttonClicks.WhatsOnToday)"
                                       Text="What's On Today" IconCssClass="bi bi-clock" />
                        <DxToolbarItem BeginGroup=true Text="Attendance" IconCssClass="bi bi-person-check">
                            <Items>
                                <DxToolbarItem Click="@(() => buttonClick = buttonClicks.RecordAttendance)"
                                               RenderStyle="ButtonRenderStyle.Secondary"
                                               Text="Record Attendance" IconCssClass="bi bi-emoji-smile" />
                                <DxToolbarItem Click="@(() => buttonClick = buttonClicks.AttendanceNotRecorded)"
                                               RenderStyle="ButtonRenderStyle.Secondary"
                                               Text="Attendance Not Recorded" IconCssClass="bi bi-emoji-angry" />
                                <DxToolbarItem Click="@(() => buttonClick = buttonClicks.AttendanceSummary)"
                                               RenderStyle="ButtonRenderStyle.Secondary"
                                               Text="Attendance Summary" IconCssClass="bi bi-columns" />
                                <DxToolbarItem Click="@(() => buttonClick = buttonClicks.AttendanceAnalysis)"
                                               RenderStyle="ButtonRenderStyle.Secondary"
                                               Text="Attendance Analysis" IconCssClass="bi bi-columns-gap" />
                            </Items>
                        </DxToolbarItem>
                        <DxToolbarItem BeginGroup="true" Click="@(() => buttonClick = buttonClicks.AdminLeaderReport)"
                                       Text="Leader Report" IconCssClass="bi bi-printer" />
                        <DxToolbarItem BeginGroup="true" Click="OnRefresh"
                                       Text="Refresh" IconCssClass="bi bi-arrow-clockwise"
                                       RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                                       Tooltip="Click to refresh lookup data"
                                       Alignment="ToolbarItemAlignment.Right" />
                        <DxToolbarItem BeginGroup="true" Click="@(() => isDrawerOpen = !isDrawerOpen)"
                                       Text="Calendar" IconCssClass="bi bi-calendar"
                                       Alignment="ToolbarItemAlignment.Right" />
                    </Items>
                </DxToolbar>
            </div>
            <DxDrawer @bind-IsOpen="@isDrawerOpen"
                      CssClass="drawer-style mt-1 border-top"
                      Mode="DrawerMode.Shrink"
                      Position="DrawerPosition.Right"
                      PanelWidth="20rem">
                <TargetContent>
                    <DxLoadingPanel @bind-Visible="isProcessing"
                                    IsContentBlocked="true"
                                    ApplyBackgroundShading="true"
                                    IndicatorAreaVisible="false"
                                    Text="Processing Eway receipts...">
                        @switch (buttonClick)
                        {
                            case buttonClicks.ProcessOnBehalfOf:
                                <DxFormLayout CssClass="my-2">
                                    <div class="mx-auto col col-12 @((isDrawerOpen) ? "col-xl-6" : "col-lg-6")">
                                        <div class="text-center" hidden="@(isSelected)">
                                            <div class="h3 text-fl-primary text-center">Member Portal (Administration)</div>
                                            <div>Process enrolments and/or membership fees on behalf of members.</div>
                                            <DxFormLayoutItem Caption="Process on behalf of" ColSpanMd="12" CssClass="mb-2">
                                                <PersonsComboBox People="@people" SelectedPerson="@selectedPerson"
                                                                 SelectedPersonChanged="(Person newValue) => OnSelectedPersonChanged(newValue)" />
                                            </DxFormLayoutItem>
                                        </div>
                                    </div>
                                    @if (isSelected)
                                    {
                                        <div class="w-100">
                                            <MemberPortal IsAdminMemberPortal="true"
                                                          OnReturnToAdminPortal="@(async() => await OnReturnFormPortal())" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="@((isDrawerOpen) ? formWidthCalendarOpen : formWidthCalendarClosed)">
                                            <DxTabs>
                                                <DxTabPage Text="Received">
                                                    <FullScreen DisplayOffset="13" HideToggle="true">
                                                        <ContentTemplate>
                                                            <DxGrid id="my-grid" @ref=@receiptGrid Data="@ReceivedToday" CssClass="m-2"
                                                                    UnboundColumnData="Grid_UnboundColumnData"
                                                                    TextWrapEnabled="false"
                                                                    ShowFilterRow="false"
                                                                    ShowAllRows="true"
                                                                    KeyFieldName="ID">
                                                                <ToolbarTemplate>
                                                                    <GridToolbar LinkedGrid=@receiptGrid LayoutKey="{F36AB5B1-AC75-4141-8FF9-0CA7E7B17002}">
                                                                        <CustomButtonContent>
                                                                            <DxToolbarItem Context="a" BeginGroup="true" Alignment="ToolbarItemAlignment.Right">
                                                                                <Template>
                                                                                    <div class="d-flex">
                                                                                        <div class="flex-grow-0 pt-1 pe-2 text-fl-primary fw-bold">From:</div>
                                                                                        <DxDateEdit Date=@startDate DateChanged="@((DateTime newValue) => OnStartDateChanged(newValue))" CssClass="flex-grow-1" />
                                                                                    </div>
                                                                                </Template>
                                                                            </DxToolbarItem>
                                                                            <DxToolbarItem Context="a" Alignment="ToolbarItemAlignment.Right">
                                                                                <Template>
                                                                                    <div class="d-flex">
                                                                                        <div class="flex-grow-0 pt-1 px-2 text-fl-primary fw-bold">To:</div>
                                                                                        <DxDateEdit Date=@endDate DateChanged="@((DateTime newValue) => OnEndDateChanged(newValue))" CssClass="flex-grow-1" />
                                                                                    </div>
                                                                                </Template>
                                                                            </DxToolbarItem>
                                                                        </CustomButtonContent>
                                                                    </GridToolbar>
                                                                </ToolbarTemplate>
                                                                <Columns>
                                                                    <DxGridDataColumn Width="8rem" Caption="Time"
                                                                                      FieldName="CreatedTime"
                                                                                      DisplayFormat="@constants.SHORT_DATETIME_FORMAT"
                                                                                      UnboundType="GridUnboundColumnType.DateTime" />
                                                                    <DxGridDataColumn Width="10rem" Caption="Name" FieldName="Person.FullName" />
                                                                    <DxGridDataColumn Width="14rem" Caption="Description" FieldName="Description" />
                                                                    <DxGridDataColumn Caption="Identifier" FieldName="Identifier" />
                                                                    <DxGridDataColumn Width="6rem" Caption="Financial To" FieldName="Person.FinancialToBriefText" DisplayFormat="f0" />
                                                                    <DxGridDataColumn Width="5rem" Caption="Amount" FieldName="Amount" DisplayFormat="c2" />
                                                                    <DxGridDataColumn Width="5rem" Caption="Fee" FieldName="MerchantFee" DisplayFormat="c2" />
                                                                </Columns>
                                                                <TotalSummary>
                                                                    <DxGridSummaryItem FieldName="Amount"
                                                                                       DisplayText="{0:c2}"
                                                                                       SummaryType="GridSummaryItemType.Sum"
                                                                                       FooterColumnName="Amount" />
                                                                    <DxGridSummaryItem FieldName="MerchantFee"
                                                                                       DisplayText="{0:c2}"
                                                                                       SummaryType="GridSummaryItemType.Sum"
                                                                                       FooterColumnName="MerchantFee" />
                                                                </TotalSummary>
                                                            </DxGrid>
                                                        </ContentTemplate>
                                                    </FullScreen>
                                                </DxTabPage>
                                                <DxTabPage Text="Online Payment Status">
                                                    <div class="m-1">
                                                        <ReviewOnlinePaymentStatus IsEmbedded="true" />
                                                    </div>
                                                </DxTabPage>
                                                <DxTabPage Text="Email Status">
                                                    <div class="m-1">
                                                        <div class="bi bi-question-circle-fill text-fl-info"><small>&nbsp;Cash Receipt/Enrolment reports sent within the hour. Leader reports within 48 hours of next class</small></div>
                                                        <QueuedTransactionalEmail IsEmbedded="true" />
                                                    </div>
                                                </DxTabPage>
                                                <DxTabPage Text="Add/Edit Member Details">
                                                    <div class="m-1">
                                                        <div class="bi bi-question-circle-fill text-fl-info"><small>&nbsp;Press the <strong>Refresh</strong> button to refresh data after adding/editing members</small></div>
                                                        <MemberDrawer TargetName="PersonMntEmbedded" />
                                                    </div>
                                                </DxTabPage>
                                                <DxTabPage Text="Review Logins">
                                                    <div class="m-1">
                                                        <div class="bi bi-question-circle-fill text-fl-info">
                                                            <small>
                                                                &nbsp;  <b>Note: </b>Deleting a login will require the member to re-register.
                                                                Otherwise, it is a safe measure of last resort.
                                                            </small>
                                                        </div>
                                                        <IdentityUserMnt IsEmbedded="true" />
                                                    </div>
                                                </DxTabPage>
                                            </DxTabs>
                                        </div>
                                    }
                                </DxFormLayout>
                                break;

                            case buttonClicks.WhatsOnToday:
                                <CourseSchedule IsPortal=false />
                                break;

                            case buttonClicks.RecordAttendance:
                                <div class="mt-2">
                                    <AttendClassMnt IsAdminPortal="true" />
                                </div>
                                break;

                            case buttonClicks.AttendanceNotRecorded:
                                <AttendanceNotRecordedSummary />
                                break;

                            case buttonClicks.AttendanceSummary:
                                <CourseAttendanceSummary />
                                break;

                            case buttonClicks.AttendanceAnalysis:
                                <AttendanceAnalysis />
                                break;

                            case buttonClicks.AdminLeaderReport:
                                <LeaderReport Title="Print/Email Leader Reports" AllowPrintAndEmail="true" AllowMultipleSelection="false" />
                                break;
                        }

                    </DxLoadingPanel>
                </TargetContent>
                <BodyTemplate>
                    <ClassCalendar DisplayOffset="@((ws.UseTopMenu) ? 6.7 : 4.7)" />
                </BodyTemplate>
            </DxDrawer>
        </div>
    </CascadingValue>
}
<style>
    .left-align-style {
        padding-left: @((ws.IsLargeScreen) ? "0" : "5rem");
    }

    .member-selection-width {
        width: 98%;
    }

    .drawer-style {
        max-height: calc(100% - @((ws.UseTopMenu) ? "6rem" : "2rem") );
    }

    .tabs-style {
        width: 98%;
    }

</style>

@code {

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    public LoginState? LoginState { get; set; }

    bool IsReady;
    bool isSelected = false;
    bool isProcessing;
    bool isAccordianShowingMemberDetails { get; set; }
    static bool isDrawerOpen = false;
    string drawerHeightAdjustment;
    buttonClicks buttonClick = buttonClicks.ProcessOnBehalfOf;
    IGrid receiptGrid;

    MessageBox? messageBox;
    U3ADbContext dbc { get; set; }
    List<Person> people { get; set; }
    Person selectedPerson { get; set; }
    string authEmail;
    IEnumerable<Receipt> ReceivedToday;
    string formWidthCalendarOpen = "col col-12 mt-1 mx-auto";
    string formWidthCalendarClosed = "col col-12 px-lg-0 col-lg-11 col-xl-10 mt-1 px-1 mx-auto";
    DateTime startDate;
    DateTime endDate;

    enum buttonClicks
    {
        ProcessOnBehalfOf,
        WhatsOnToday,
        RecordAttendance,
        AttendanceNotRecorded,
        AttendanceSummary,
        AttendanceAnalysis,
        AdminLeaderReport,
    }

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        await OnRefresh();
        drawerHeightAdjustment = ws.UseTopMenu ? "4rem" : "1.35rem";
        startDate = endDate = dbc.GetLocalDate();
        IsReady = true;
    }

    async Task OnStartDateChanged(DateTime newValue)
    {
        startDate = newValue;
        await GetDataAsync();
    }
    async Task OnEndDateChanged(DateTime newValue)
    {
        endDate = newValue;
        GetDataAsync();
    }

    protected async Task GetDataAsync()
    {
        people = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
        ReceivedToday = (await dbc.Receipt.AsNoTracking()
                    .Include(x => x.Person)
                    .OrderByDescending(x => x.CreatedOn).ToListAsync())
                    .Where(x => dbc.GetLocalDate(x.CreatedOn.Value) >= startDate &&
                                dbc.GetLocalDate(x.CreatedOn.Value) <= endDate);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selectedPerson = null;
            var authenticationState = await authenticationStateTask;
            authEmail = authenticationState.User.Identity.Name;
            if (selectedPerson != null)
            {
                await OnProcess();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task CheckEwayStatus()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            bool hasUnprocessedPayments = await BusinessRule.HasUnprocessedOnlinePayment(dbc);
            if (hasUnprocessedPayments)
            {
                isProcessing = true;
                var term = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
                if (term == null) term = await BusinessRule.CurrentTermAsync(dbc);
                foreach (var payment in (await BusinessRule.GetUnprocessedOnlinePayment(dbc)))
                {
                    try
                    {
                        var service = new EwayPaymentService();
                        await service.FinaliseEwayPyamentAsync(U3Adbfactory, payment, term);
                    }
                    catch (HttpRequestException)
                    {
                        break;
                    }
                    catch (Exception ex) { }
                }
            }
        }
    }

    async Task OnSelectedPersonChanged(Person newValue)
    {
        selectedPerson = newValue;
        if (selectedPerson != null)
        {
            await OnProcess();
        }
    }

    async Task OnRefresh()
    {
        await CheckEwayStatus();
        await OnClearSelection();
    }

    async Task OnClearSelection()
    {
        await GetDataAsync();
        isSelected = false;
        selectedPerson = null;
        isProcessing = false;
    }

    async Task OnProcess()
    {
        isSelected = false;
        if (selectedPerson == null)
        {
            await messageBox.ShowOkOnlyAsync("Member not selected", "Please select a member to process.");
        }
        else
        {
            selectedPerson = await dbc.Person.FindAsync(selectedPerson.ID);
            LoginState = new LoginState(authEmail, selectedPerson, U3Adbfactory);
            isSelected = true;
            StateHasChanged();
        }
    }

    async Task OnReturnFormPortal()
    {
        isSelected = false;
        selectedPerson = null;
    }

    void Grid_UnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        var receipt = e.DataItem as Receipt;
        if (e.FieldName == "CreatedTime")
        {
            using (var dbc = U3Adbfactory.CreateDbContext())
            {
                e.Value = dbc.GetLocalTime(receipt.CreatedOn.Value);
            }
        }
    }


    public void Dispose()
    {
        dbc?.Dispose();
    }
}

