@page "/AdminMemberPortal"

<AntiforgeryToken />

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject NavigationManager NavigationManager
@inject IJSRuntime js

@using Microsoft.AspNetCore.Components.Authorization
@using U3A.UI.Forms.Pages.MembersPortal

@implements IDisposable

@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <CascadingValue Value="@LoginState">

        <MessageBox @ref="@messageBox" />

        <DxLoadingPanel @bind-Visible="isProcessing"
                        IsContentBlocked="true"
                        ApplyBackgroundShading="true"
                        IndicatorAreaVisible="false"
                        Text="Calculating fees due...">

            <DxTabs RenderMode="TabsRenderMode.OnDemand">
                <DxTabPage Text="Process On Behalf Of">
                    <DxFormLayout CssClass="my-2">
                        <CollapsableContent AlertType="none" CssClass="w-100"
                                            ShowCollapseButton=false
                                            OnContentExpanded="@(async() => await OnRefresh())"
                                            @ref=@collapsableContent>
                            <ContentTemplate>
                                <div class="@formWidth" >
                                    <div class="h3 text-center">Member Portal (Administration)</div>
                                    <div class="h6 text-center">This procedure is intended for office staff to process enrolments and/or membership fees on behalf of members.</div>
                                    <DxFormLayoutGroup Caption="Process Member Enrolments / Renewals" ColSpanMd="12">
                                        <HeaderContentTemplate>
                                            <div class="d-flex input-group">
                                                <div class="text-start flex-grow-1">
                                                    Process Member
                                                </div>
                                                <div class="flex-grow-0">
                                                    <DxButton Text="Refresh" Click="OnRefresh" IconCssClass="bi bi-arrow-clockwise" Tooltip="Click to refresh lookup data" />
                                                </div>
                                                <div class="flex-grow-0 ps-1">
                                                    <DxButton Click="OnMaximiseFormWidth"
                                                              RenderStyle="ButtonRenderStyle.Secondary"
                                                              IconCssClass="bi bi-arrows-fullscreen" tooltip="Click ro maximise width" />
                                                </div>
                                            </div>
                                        </HeaderContentTemplate>
                                        <Items>
                                            <DxFormLayoutItem Caption="Process on behalf of" CssClass="member-selection-width">
                                                <DxComboBox Data="@people"
                                                            AllowUserInput=true
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                                            FilteringMode="DataGridFilteringMode.Contains"
                                                            ListRenderMode="ListRenderMode.Virtual"
                                                            TextFieldName="@nameof(Person.PersonSummary)"
                                                            @bind-Value="@selectedPerson">
                                                    <Buttons>
                                                        <DxEditorButton Text="Process" CssClass="text-primary"
                                                                        IconCssClass="h5 bi bi-check-lg"
                                                                        Tooltip="Click to process on behalf of the selected member"
                                                                        Click="@OnProcess" />
                                                        <DxEditorButton CssClass="text-info"
                                                                        IconCssClass="h5 bi bi-x-circle"
                                                                        Tooltip="Click to clear the selection editor"
                                                                        Click="@OnRefresh">
                                                        </DxEditorButton>
                                                    </Buttons>
                                                </DxComboBox>
                                            </DxFormLayoutItem>
                                            <div class="d-flex justify-content-end pt-2">
                                                <DxWaitIndicator Visible=@showWaitIndicator />
                                            </div>
                                        </Items>
                                    </DxFormLayoutGroup>
                                </div>
                            </ContentTemplate>
                        </CollapsableContent>
                        @if (isSelected)
                        {
                            <MemberPortal />
                        }
                        else
                        {
                            <div class="@formWidth">
                                <DxAccordion ExpandMode="AccordionExpandMode.Single" CssClass="w-100"
                                             ExpandCollapseAction="AccordionExpandCollapseAction.HeaderClick">
                                    <Items>
                                        <DxAccordionItem Text="Add/Edit Member Details" Expanded="false">
                                            <ContentTemplate>
                                                <div class="mt-2 alert-info text-dark text-center"><small>Press the <strong>Refresh</strong> button to refresh data after adding/editing members</small></div>
                                                <div class="mx-2"><PersonMnt IsEmbedded="true" /></div>
                                            </ContentTemplate>
                                        </DxAccordionItem>
                                        <DxAccordionItem Text="Received Today" Expanded="true">
                                            <ContentTemplate>
                                                <div class="m-2">
                                                    <DxGrid Data="@RecevivedToday" CssClass="member-grid-height"
                                                            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                                                            UnboundColumnData="Grid_UnboundColumnData"
                                                            TextWrapEnabled="false"
                                                            ShowFilterRow="false"
                                                            ShowAllRows="true"
                                                            KeyFieldName="ID">
                                                        <Columns>
                                                            <DxGridDataColumn Width="5rem" Caption="Time"
                                                                              FieldName="CreatedTime"
                                                                              DisplayFormat="hh:mm tt"
                                                                              UnboundType="GridUnboundColumnType.DateTime" />
                                                            <DxGridDataColumn Width="10rem" Caption="Name" FieldName="Person.FullName" />
                                                            <DxGridDataColumn Width="12rem" Caption="Description" FieldName="Description" />
                                                            <DxGridDataColumn Caption="Identifier" FieldName="Identifier" />
                                                            <DxGridDataColumn Width="6rem" Caption="Financial To" FieldName="FinancialTo" DisplayFormat="f0" />
                                                            <DxGridDataColumn Width="5rem" Caption="Amount" FieldName="Amount" DisplayFormat="c2" />
                                                        </Columns>
                                                        <TotalSummary>
                                                            <DxGridSummaryItem FieldName="Amount"
                                                                               SummaryType="GridSummaryItemType.Sum"
                                                                               FooterColumnName="Amount"
                                                                               ValueDisplayFormat="c2" />
                                                        </TotalSummary>
                                                    </DxGrid>
                                                </div>
                                            </ContentTemplate>
                                        </DxAccordionItem>
                                    </Items>
                                </DxAccordion>
                            </div>
                        }
                    </DxFormLayout>
                </DxTabPage>
                <DxTabPage Text="What's on today?">
                    <CourseSchedule IsPortal=true />
                </DxTabPage>
                <DxTabPage Text="Record Attendance">
                    <AttendClassMnt />
                </DxTabPage>
                <DxTabPage Text="Attendance Summary">
                    <CourseAttendanceSummary />
                </DxTabPage>
                <DxTabPage Text="Attendance Not Recorded">
                    <AttendanceNotRecordedSummary />
                </DxTabPage>
                <DxTabPage Text="Attendance Analysis">
                    <AttendanceAnalysis />
                </DxTabPage>
                <DxTabPage Text="Leader Report" TabIconCssClass="bi bi-printer">
                    <AdminLeaderReport />
                </DxTabPage>
            </DxTabs>
        </DxLoadingPanel>
    </CascadingValue>
}
<style>
    .member-selection-width {
        width: 98%;
    }

    .member-grid-height {
        height: 40vh;
    }

</style>

@code {

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    public LoginState? LoginState { get; set; }

    bool IsReady;
    bool isSelected = false;
    bool isProcessing;

    MessageBox? messageBox;
    U3ADbContext dbc { get; set; }
    List<Person> people { get; set; }
    Person selectedPerson { get; set; }
    string authEmail;
    IEnumerable<Receipt> RecevivedToday;
    bool showWaitIndicator;
    TimeSpan offset;
    CollapsableContent? collapsableContent;
    string formWidth = "col col-12 px-lg-0 col-lg-10 col-xl-8 mt-3 px-1 mx-auto";
    int currentWidth = 12;

    protected override async Task OnInitializedAsync()
    {

        IsReady = true;
    }

    private async Task GetData()
    {
        using (dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            people = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
            if (offset != null && authEmail != null)
            {
                using (var dbc = await U3Adbfactory.CreateDbContextAsync())
                {
                    RecevivedToday = (await dbc.Receipt.AsNoTracking()
                                .Include(x => x.Person)
                                .Where(x => x.Amount != 0 && x.User != null &&
                                 x.User.ToLower() == authEmail.ToLower())
                                .OrderByDescending(x => x.CreatedOn).ToListAsync())
                .Where(x => (x.CreatedOn.Value + offset).Date == (DateTime.UtcNow + offset).Date);
                }
            }
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lt = new LocalTime(js);
            offset = await lt.GetTimezoneOffsetAsync();
            selectedPerson = null;
            var authenticationState = await authenticationStateTask;
            authEmail = authenticationState.User.Identity.Name;
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                bool hasUnprocessedPayments = await BusinessRule.HasUnprocessedOnlinePayment(dbc, authEmail);
                if (hasUnprocessedPayments)
                {
                    isProcessing = true;
                    InvokeAsync(StateHasChanged);
                    var term = BusinessRule.CurrentEnrolmentTerm(dbc);
                    if (term == null) term = await BusinessRule.CurrentTermAsync(dbc);
                    foreach (var payment in await BusinessRule.GetUnprocessedOnlinePayment(dbc, authEmail))
                    {
                        var service = new EwayPaymentService();
                        selectedPerson = await dbc.Person.FindAsync(payment.PersonID);
                        if (selectedPerson != null)
                        {
                            await service.DoFinaliseEwayPyamentAsync(U3Adbfactory, payment.PersonID, term);
                        }
                    }
                }
            }
            if (isProcessing)
            {
                isProcessing = false;
                await OnRefresh();
            }
            if (selectedPerson != null)
            {
                await OnProcess();
            }
            else
            {
                await OnRefresh();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task OnMaximiseFormWidth()
    {
        formWidth = $"col col-{currentWidth}";
        currentWidth -= 1;
        if (currentWidth < 6) { currentWidth = 12; }
        await OnRefresh();
    }

    async Task OnRefresh()
    {
        showWaitIndicator = true;
        await InvokeAsync(StateHasChanged);
        await GetData();
        isSelected = false;
        selectedPerson = null;
        showWaitIndicator = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task OnProcess()
    {
        isSelected = false;
        if (selectedPerson == null)
        {
            await messageBox.ShowOkOnlyAsync("Member not selected", "Please select a member to process.");
        }
        else
        {
            using (var dbc = await U3Adbfactory.CreateDbContextAsync())
            {
                selectedPerson = await dbc.Person.FindAsync(selectedPerson.ID);
            }
            LoginState = new LoginState(authEmail, selectedPerson, U3Adbfactory);
            await collapsableContent.ToggleLayoutAsync(isCollapsed: true);
            isSelected = true;
        }
    }

    void Grid_UnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        var receipt = e.DataItem as Receipt;
        if (e.FieldName == "CreatedTime")
        {
            e.Value = receipt.CreatedOn.Value + offset;
        }
    }


    public void Dispose()
    {
        dbc?.Dispose();
    }
}

