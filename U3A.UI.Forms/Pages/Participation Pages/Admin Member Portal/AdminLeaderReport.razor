@inject IJSRuntime js
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using U3A.UI.Reports.Pages

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService
@inject ILogger<LeaderReport> Logger
@inject IWebHostEnvironment Environment
@inject NavigationManager navMan;
@inject WorkStation ws

@implements IDisposable


@namespace U3A.UI.Forms

@attribute [Authorize]

@if (!IsReady)
{
        <LoadingIndicator />
}
else
{
    if (showPDF)
    {
                <div class="row w-100 bg-secondary">
                    <PdfViewer DocumentContent="@pdfContent" OnCloseButtonClick="@(() => showPDF = false)" />
                </div>
    }
    else
    {
                <div class="p-2">
                    <h3>Print Leader Report</h3>
                    <CollapsableContent DismissKey="{674F95B8-8507-40BB-9813-C7253886F15D}"
                        AlertText=@(@"<p>Creating a PDF report places a heavy burden on the server.<br />
                        Please be a good digital citizen and use judiciously.</p>")
                                OnDismissChanged="@((bool IsDismissed) => OnContentChange(IsDismissed))"
                                OnToggleAlert="@(() => InvokeAsync(StateHasChanged))" />

                    <DxFormLayout>
                        <DxFormLayoutItem Caption="Enrolment Term" ColSpanMd="6">
                            <TermsComboBox Terms="@terms"
                                           @bind-SelectedTerm="@selectedTerm"
                                           @bind-SelectedTerm:after=@(async() => await SelectedTermChanged(selectedTerm)) />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                    <br />

                    <MessageBox @ref="@messageBox" />
                    <Progress @ref="@progressBar" />
                    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

                    <DxFormLayout>
                        <div class="col-10 px-4">
                    <FullScreen @ref=@fullScreen DisplayOffset="@contentSize">
                        <ContentTemplate>
                                    <DxGrid Data="@Classes" @ref=@mainGrid CssClass="grid-height" id="myGrid"
                                            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                                            ShowFilterRow="false"
                                            ShowAllRows="true"
                                            KeyFieldName="ID"
                                            SelectionMode="GridSelectionMode.Single"
                                            UnboundColumnData="Grid_CustomUnboundColumnData"
                                            SelectedDataItemChanged="OnSelectedDataItemChanged"
                                            @bind-SelectedDataItems="SelectedDataItems"
                                            ValidationEnabled="true">
                                        <ToolbarTemplate>
                                            <GridToolbar LinkedGrid=@mainGrid LayoutKey="{979A2CA7-3C24-4B42-B906-D973E48C906C}" />
                                        </ToolbarTemplate>
                                        <Columns>
                                            <DxGridSelectionColumn Width="2rem" />
                                            <DxGridDataColumn Caption="Name" FieldName="Course.Name" Width="20rem" />
                                            <DxGridDataColumn Caption="Offered" FieldName="OfferedSummary" />
                                            <DxGridDataColumn Caption="Venue" FieldName="Venue.Name" />
                                            <DxGridDataColumn Caption="Held" FieldName="OccurrenceTextBrief" />
                                            <DxGridDataColumn Caption="Start" FieldName="StartTime" DisplayFormat="hh:mm tt" />
                                            <DxGridDataColumn Caption="Send To" FieldName="Recipient"
                                                              UnboundType="GridUnboundColumnType.String" Width="10rem" />
                                        </Columns>
                                        <TotalSummary>
                                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" Name="Course.Name" FieldName="Course.Name" />
                                        </TotalSummary>

                                    </DxGrid>
                                </ContentTemplate>
                            </FullScreen>
                        </div>
                        <div class="col col-2">
                            <SelectLeaderReports @ref=@rptSelect SingleReportOnly=true
                                                 AreSelectionsMade="@AreSelectionsMade"
                                                 OnQueueReportsSelected="OnQueueReportsSelected" />
                        </div>
                    </DxFormLayout>
                </div>
    }
}



@code {
    bool IsReady;
    FullScreen? fullScreen;
    int contentSize;


    List<Class> Classes { get; set; } = new List<Class>();
    List<Term> terms { get; set; }
    Term currentTerm;
    Term selectedTerm;
    SystemSettings settings;
    IReadOnlyList<object> SelectedDataItems { get; set; }
    List<LeaderReportRecipientsByClass> reportRecipients;

    bool AreSelectionsMade { get; set; }
    SelectLeaderReports? rptSelect;
    ProFormaReportFactory reportFactory;

    DxGridCommandColumnEx? GridCommandColumn;
    MessageBox messageBox;
    string gridHeight = "600px";

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    Progress? progressBar;
    string ErrorHeader;
    string ErrorMessage;
    U3ADbContext dbc { get; set; }
    bool showPDF;
    string pdfPath;
    byte[] pdfContent;
    TenantDbContext dbcT { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        dbcT = await TenantDbfactory.CreateDbContextAsync();
        settings = await dbc.SystemSettings.OrderBy(x => x.ID).FirstOrDefaultAsync();
        currentTerm = await BusinessRule.CurrentEnrolmentTermOrNextAsync(dbc);
        terms = await BusinessRule.SelectableTermsInCurrentYearAsync(dbc);
        selectedTerm = currentTerm;
        await SelectedTermChanged(selectedTerm);
        IsReady = true;
    }

    async Task SelectedTermChanged(Term term)
    {
        selectedTerm = term;
        Classes = (await BusinessRule.GetClassDetailsAsync(dbc, selectedTerm, settings))
                        .OrderBy(x => x.Course.Name).ThenBy(x => x.OnDayID).ToList();
        if (Classes != null)
        {
            reportRecipients = await BusinessRule.GetLeaderReportRecipientsByClass(dbc, settings, currentTerm, Classes);
        }
    }

    void OnSelectedDataItemChanged()
    {
        AreSelectionsMade = true;
    }

    async Task OnQueueReportsSelected()
    {
        var Class = SelectedDataItems[0] as Class;
        var Course = Class.Course;
        await progressBar.ShowSmallSpinnerAsync();
        var recipients = await BusinessRule.GetLeaderReportRecipients(dbc, settings, currentTerm, Class);
        var enrolments = await BusinessRule.GetEnrolmentIncludeLeadersAsync(dbc, Course, Class, selectedTerm);
        if (Course.CourseParticipationTypeID == (int)ParticipationType.SameParticipantsInAllClasses)
        {
            enrolments.AddRange(await BusinessRule.GetMultiCampusEnrolmentsAsync(dbc, dbcT,
                        await tenantService.GetTenantIdentifierAsync(), Course.ID));
        }
        else
        {
            enrolments.AddRange(await BusinessRule.GetMultiCampusEnrolmentsAsync(dbc, dbcT,
                                    await tenantService.GetTenantIdentifierAsync(), Course.ID, Class.ID));
        }
        await progressBar.Close();
        if (!await IsDataOk(recipients, enrolments)) return;
        var Leader = recipients[0];
        bool isPreview = true;
        reportFactory = new ProFormaReportFactory(Environment, U3Adbfactory, isPreview);
        var status = await reportFactory.CreateLeaderReports(
             rptSelect.PrintLeaderReport,
             rptSelect.PrintAttendanceRecord,
             rptSelect.PrintClassList,
             rptSelect.PrintICEList,
             rptSelect.PrintCSVFile,
             rptSelect.PrintAttendanceAnalysis,
             rptSelect.PrintMemberBadges,
             Course.ID,
             "U3A Report Package",
             Course.Name,
             Leader, enrolments.OrderBy(x => x.IsWaitlisted)
                                         .ThenBy(x => x.Person.LastName)
                                         .ThenBy(x => x.Person.FirstName).ToArray());
        var pdfFilename = reportFactory.CreatePostalPDF();
        if (pdfFilename != null)
        {
            pdfPath = Path.Combine(reportFactory.ReportStorage.TempDirectory, pdfFilename);
            pdfContent = File.ReadAllBytes(pdfPath);
            showPDF = true;
            InvokeAsync(StateHasChanged);
        }
    }

    async Task<bool> IsDataOk(IEnumerable<Person> p, IEnumerable<Enrolment> e)
    {
        var result = true;
        var enrolmentReqd = rptSelect.RequireEnrolements;
        var msg = "";
        if (p.Count() <= 0)
        {
            result = false;
            msg += "This course has no leader or clerk with a visible email address.<br/>";
        }
        if (enrolmentReqd && e.Count() <= 0)
        {
            result = false;
            msg += "The course has no enrolments in the current term";
        }
        if (enrolmentReqd && e.Count() == e.Count(x => x.IsWaitlisted || x.isLeader))
        {
            result = false;
            msg += "All participants in the current term are waitlisted.";
        }
        if (!result)
        {
            await messageBox.SetPopupWidth("30%");
            await messageBox.ShowOkOnlyAsync("Cannot Print Report", msg);
        }
        return result;
    }

    void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        if (e.FieldName == "Recipient")
        {
            var Class = e.DataItem as Class;
            var recipient = reportRecipients.Where(x => x.Class.ID == Class.ID).OrderBy(x => x.SortOrder).FirstOrDefault();
            e.Value = recipient?.Person.FullName;
        }
    }

    void OnContentChange(bool IsDismissed)
    {
        contentSize = (IsDismissed) ? 9 : 16;
        StateHasChanged();
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
