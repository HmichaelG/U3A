@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject WorkstationService ws
@implements IDisposable

<h3>Attendance Analysis</h3>

@if (isReady)
{
    <MessageBox @ref=@messageBox />
    <Progress @ref=@progress />
    <DxFormLayout CssClass="col col-12">
        <DxFormLayoutItem Caption="Attendance Term" ColSpanMd="6">
            <TermsComboBox SelectedTerm="@SelectedTerm"
                           Terms="@terms" ShowProcessButton="true"
                           OnProcessButtonClicked="(Term value) => {SelectedTerm = value; OnProcess();}" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Show week by week totals" ColSpanMd="2">
            <DxCheckBox Checked=@isWeekByWeekTotalsDisplayed
                        CheckedChanged="@((bool value) => OnWeekeByWeekCheckChanged(value))" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Hide Expected Analysis" ColSpanMd="2">
            <DxCheckBox Checked=@hideExpectedAnalysis
                        CheckedChanged="@((bool value) => HideExpectedAnalysis(value))" />
        </DxFormLayoutItem>

        <DxFormLayoutItem Context="layoutContext" Caption="Selected Week Ending Dates" ColSpanMd="12">
            <DxTagBox Data=@availableDates @ref=@tagBox
                      NullText="Click Process to reset date selection"
                      EditFormat="dd-MMM-yyyy"
                      TData="DateTime"
                      TValue="DateTime"
                      DropDownVisible=@isTagboxDropDownVisible
                      Values=@selectedDates
                      ValuesChanged="OnTagBoxValuesChanged"
                      DropDownVisibleChanged="@((value) => OnTagBoxDropDownVisibleChanges(value))">
            </DxTagBox>
        </DxFormLayoutItem>

        <DxTabs @ref=tabs TabClick="OnTabClick" CssClass="col col-12">
            <DxTabPage Text="Course Type" />
            <DxTabPage Text="Venue" />
            <DxTabPage Text="Course" />
        </DxTabs>

        <FullScreen DisplayOffset="12">
            <ContentTemplate>
                <DxPivotGrid @ref=pivotGrid Data="@pivotData" CssClass="col col-12"
                             ShowFieldHeaders="false">
                    @{
                        switch (selectedIndex)
                        {
                            case 1:
                                <DxPivotGridField Field="@nameof(AttendClass.VenueName)" Area="PivotGridFieldArea.Row" Caption="Venue" />
                                <DxPivotGridField Field="@nameof(AttendClass.CourseName)" Area="PivotGridFieldArea.Row" Caption="Course" />
                                break;
                            case 2:
                                <DxPivotGridField Field="@nameof(AttendClass.CourseName)" Area="PivotGridFieldArea.Row" Caption="Course" />
                                <DxPivotGridField Field="@nameof(AttendClass.PersonName)" Area="PivotGridFieldArea.Row" Caption="Student" />
                                break;
                            default:
                                <DxPivotGridField Field="@nameof(AttendClass.CourseTypeName)" Area="PivotGridFieldArea.Row" Caption="Course Type" />
                                <DxPivotGridField Field="@nameof(AttendClass.CourseName)" Area="PivotGridFieldArea.Row" Caption="Course" />
                                break;

                        }
                    }
                    @if (isWeekByWeekTotalsDisplayed)
                    {
                        <DxPivotGridField Field="@nameof(AttendClass.WeekEndDate)" Area="PivotGridFieldArea.Column" Caption="Wk Ending">
                            <HeaderTemplate>@(string.Format("{0:dd-MMM-yy}", context))</HeaderTemplate>
                        </DxPivotGridField>
                    }
                    <DxPivotGridField Field="@nameof(AttendClass.Actual)" Caption="Act" Area="PivotGridFieldArea.Data" SummaryType="PivotGridSummaryType.Sum" />
                    @if (!hideExpectedAnalysis)
                    {
                        <DxPivotGridField Field="@nameof(AttendClass.Expected)" Caption="Exp" Area="PivotGridFieldArea.Data" SummaryType="PivotGridSummaryType.Sum" />
                        <DxPivotGridField Field="@nameof(AttendClass.Difference)" Caption="+/-" Area="PivotGridFieldArea.Data" SummaryType="PivotGridSummaryType.Sum">
                            <DataTemplate>
                                <div class="@((decimal?)context >= 0 ? "fw-bolder text-fl-info" : "fw-bolder text-fl-danger")">
                                    @context
                                </div>
                            </DataTemplate>
                        </DxPivotGridField>
                    }
                </DxPivotGrid>
            </ContentTemplate>
        </FullScreen>
    </DxFormLayout>
}
<style>
    .pivot-height {
        height: calc(100dvh - @(ws.UseTopMenu ? "17rem" : "15rem") );
    }
</style>

@code {
    IEnumerable<Term> terms;
    IEnumerable<AttendClass>? pivotData { get; set; }
    IEnumerable<AttendClass>? attendance { get; set; }
    IEnumerable<DateTime> availableDates = new List<DateTime>();
    IEnumerable<DateTime>? selectedDates = new List<DateTime>();
    Term SelectedTerm;
    MessageBox? messageBox;
    Progress? progress;
    DxTabs? tabs;
    DxPivotGrid? pivotGrid;
    U3ADbContext dbc { get; set; }
    DxTagBox<DateTime, DateTime>? tagBox;
    DateTime now;
    bool isReady;
    bool showPresent = true;
    bool showWithApology = false;
    bool showWithoutApology = false;
    bool isTagboxDropDownVisible = false;
    bool isWeekByWeekTotalsDisplayed = true;
    bool hideExpectedAnalysis;
    int selectedIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        pivotData = new List<AttendClass>();
        dbc = await U3Adbfactory.CreateDbContextAsync();
        terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
        SelectedTerm = await BusinessRule.CurrentTermAsync(dbc);
        isReady = true;
        await base.OnInitializedAsync();
    }

    async Task OnProcess()
    {
        await GetData();
        availableDates = selectedDates = attendance.Select(x => x.WeekEndDate).Distinct().OrderBy(x => x);
        StateHasChanged();
    }
    async Task GetData()
    {
        await progress.ShowSmallSpinnerAsync();
        var now = dbc.GetLocalTime();
        attendance = await BusinessRule.GetAttendanceAsync(dbc, SelectedTerm, now);
        RefreshData();
        await progress.Close();
    }

    async void OnTabClick(TabClickEventArgs e)
    {
        selectedIndex = e.TabIndex;
        await GetData();
        RefreshData();
    }

    void OnTagBoxValuesChanged(IEnumerable<DateTime> values)
    {
        selectedDates = values;
        RefreshData();
    }

    async void OnWeekeByWeekCheckChanged(bool value)
    {
        isWeekByWeekTotalsDisplayed = value;
        await GetData();
        RefreshData();
    }
    async void HideExpectedAnalysis(bool value)
    {
        hideExpectedAnalysis = value;
        await GetData();
        RefreshData();
    }

    void RefreshData()
    {
        if (selectedDates.Count() == availableDates.Count())
        {
            pivotData = attendance;
        }
        else
        {
            pivotData = attendance.Where(x => selectedDates.Contains(x.WeekEndDate)).ToList();
        }
        isTagboxDropDownVisible = false;
        StateHasChanged();
    }

    void OnTagBoxDropDownVisibleChanges(bool value)
    {
        isTagboxDropDownVisible = false;
    }

    public void Dispose() => dbc?.Dispose();

}
