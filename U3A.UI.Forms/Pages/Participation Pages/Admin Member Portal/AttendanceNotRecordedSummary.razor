@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


<Progress @ref=@progress />
<div class="p-2">
    <h3>Attendance Not Recorded</h3>
    <DxFormLayout>
        <DxFormLayoutItem Caption="Attendance Term" CssClass="my-4">
            <TermsComboBox SelectedTerm="@SelectedTerm"
                          Terms="@terms" ShowProcessButton="true" 
                          OnProcessButtonClicked="(Term value) => {SelectedTerm = value; OnProcess();}" />
        </DxFormLayoutItem>

        <FullScreen DisplayOffset="11">
            <ContentTemplate>
                <DxGrid Data="@data" @ref=@mainGrid
                        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                        AutoExpandAllGroupRows="true"
                        ShowAllRows="true">
                    <ToolbarTemplate>
                        <GridToolbar LinkedGrid=@mainGrid />
                    </ToolbarTemplate>
                    <Columns>
                        <DxGridDataColumn Caption="Course" FieldName="CourseDetail" GroupIndex="0" />
                        <DxGridDataColumn Caption="Day / Time" FieldName="ClassDate" DisplayFormat="dddd, dd-MMMM-yyyy hh:mm tt" />
                        <DxGridDataColumn Caption="Cancelled?" FieldName="IsCancelled" />
                    </Columns>
                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="ClassDate" />
                    </TotalSummary>
                </DxGrid>
            </ContentTemplate>
        </FullScreen>

    </DxFormLayout>
</div>

@code {
    List<AttendanceRecorded> data;
    List<Term> terms { get; set; }
    Term SelectedTerm;
    Progress? progress;
    DxGrid? mainGrid;
    string gridHeight { get; set; }
    U3ADbContext dbc { get; set; }
    GridToolbar? Toolbar;


    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        terms = await BusinessRule.SelectableRelaxedTermsAsync(dbc);
        SelectedTerm = await BusinessRule.CurrentTermAsync(dbc);
        await base.OnInitializedAsync();
    }

    async Task OnProcess()
    {
        await progress.ShowSmallSpinnerAsync();
        mainGrid.BeginUpdate();
        data = await BusinessRule.GetAttendanceNotRecordedAsync(dbc, SelectedTerm, DateTime.Now);
        mainGrid.EndUpdate();
        InvokeAsync(StateHasChanged);
        await progress.Close();
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
