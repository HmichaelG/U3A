@page "/LuckyMemberDrawController"


@inject IDbContextFactory<U3ADbContext> U3Adbfactory

<MessageBox @ref="@messageBox" />

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <main role="main" class="w-100">
        <div class="d-flex flex-row">
            <ContextHelpTitle Title="Lucky Member Draw Controller" HelpTopic="Add_Edit-Participants.html" />
        </div>
        <div class="d-flex flex-row-reverse  align-items-center gap-1">
            <DxButton Text="Save Selection" Click="@OnSaveSelection" />
            <DxButton Text="Reset Selection" Click="@OnResetSelection" 
                RenderStyleMode="ButtonRenderStyleMode.Outline" />
            <div class="text-info"><b>@($"There are {selectedCount} participants in this draw.")</b></div>
        </div>
        <PersonMnt @ref=@personMnt GridDisplayOffset="16" IsSelectionList="true"
                   SelectedParticipantsChanged="@ParticipantsChanged" />
    </main>
}

@code {
    bool isReady = false;
    int selectedCount = 0;
    LuckyMemberDraw? draw;
    IEnumerable<Person> participants;
    PersonMnt? personMnt;
    MessageBox? messageBox;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
        isReady = true;
    }

    async Task GetData()
    {
        draw = new();
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
        {
            draw = await dbc.LuckyMemberDraw.FirstAsync(x => !x.IsComplete);
            selectedCount = draw.PersonID.Count;
        }
    }

    async Task ParticipantsChanged(IEnumerable<Person> selection)
    {
        this.participants = selection;
        selectedCount = draw.PersonID.Count;
        foreach (var p in participants)
        {
            if (!draw.PersonID.Contains(p.ID))
            {
                selectedCount++;
            }
        }
        StateHasChanged();
    }

    async Task OnResetSelection()
    {
        if (!await messageBox.ShowAsync("Reset Selection", "Are you sure you want to reset the selection? This will remove all selected participants from the current draw."))
        {
            return;
        }

        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
        {
            var draw = await dbc.LuckyMemberDraw.FirstAsync(x => !x.IsComplete);
            draw.PersonID.Clear();
            selectedCount = 0;
        }
        else
        {
            // delete all previous draws
            var previousDraws = await dbc.LuckyMemberDraw.ToListAsync();
            dbc.LuckyMemberDraw.RemoveRange(previousDraws);
            selectedCount = 0;
        }
        await dbc.SaveChangesAsync();
        draw = new();
        personMnt.mainGrid.ClearSelection();
        StateHasChanged();
    }

    async Task OnSaveSelection()
    {
        if (participants == null || !participants.Any())
        {
            await messageBox.ShowOkOnlyAsync("No participants selected", "Please select at least tow participants for the draw.");
            return;
        }
        var entrants = (participants as List<Person>).Select(x => x.ID).ToList();
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        if (dbc.LuckyMemberDraw.Any(x => !x.IsComplete))
        {
            draw = await dbc.LuckyMemberDraw.FirstAsync(x => !x.IsComplete);
            foreach (var entrant in entrants)
            {
                if (!draw.PersonID.Contains(entrant))
                {
                    draw.PersonID.Add(entrant);
                }
            }
            draw.IsComplete = false;
        }
        else
        {
            // delete all previous draws
            var previousDraws = await dbc.LuckyMemberDraw.ToListAsync();
            dbc.LuckyMemberDraw.RemoveRange(previousDraws);

            LuckyMemberDraw draw = new()
            {
                IsComplete = false,
                PersonID = entrants
            };
            dbc.LuckyMemberDraw.Add(draw);
        }
        dbc.SaveChanges();
        await messageBox.ShowOkOnlyAsync("Selections are saved", $"The participants for {draw.Name} have been saved. The draw is ready to commence.");
    }
}