 @page "/FeeMnt"

@inject NavigationManager NavManager
@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="row  align-content-start">
        <ContextHelpTitle Title="Add/Edit Fees & Credits" HelpTopic="Add_Edit-Fees.html" />
    </div>
    <div class="d-flex flex-row">
        <div class="flex-grow-1">
            This procedure is intended to make adjustments and correct errors only. It is rarely used as
            <br />membership fees are normally calculated by the system and in many cases are time of year dependent.
            <br />Please ensure fee parameters defined in <em>Membership Fees</em> and <em>Add/Edit Courses</em> are correct before adjusting fees using this procedure.
            <br /><strong>Note:</strong> Use <em>Complimentary Membership</em> to assign/deassign complimentary membership as these are not fee adjustments.
        </div>
        <div class="flex-grow-0">
            <YearComponent @ref="@yearComponent" OnYearChangedEvent="SelectedYearChanged" />
        </div>

    </div>
    <br />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />
    <MessageBox @ref="@messageBox" PopupWidth="@messageBoxWidth" />

    <FullScreen ToggleButtonRightSideOffset="1.1rem" DisplayOffset="11" @ref=@fullScreen >
        <ContentTemplate>
            <DxGrid id="my-grid" Data="@Fees" @ref=@mainGrid
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            ShowFilterRow="false"
            ShowAllRows="true"
            KeyFieldName="ID"
            PopupEditFormCssClass="popup-width"
            PopupEditFormHeaderText="Add/Edit Fee"
            ValidationEnabled="true"
            CustomizeEditModel="OnCustomizeEditModel"
            EditMode="GridEditMode.PopupEditForm"
            DataItemDeleting="Grid_DataItemDeleting"
            EditModelSaving="Grid_EditModelSaving">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid LayoutKey="{53913C79-CAEA-445F-B529-84E036E140F8}" />
                </ToolbarTemplate>
                <Columns>
                    <DxGridCommandColumnEx @ref="GridCommandColumn" Width="10rem"
                    EditButtonVisible="true" DeleteButtonVisible="true" />
                    <DxGridDataColumn Caption="First Name" FieldName="Person.FirstName" Width="10rem" />
                    <DxGridDataColumn Caption="Last Name" FieldName="Person.LastName" Width="10rem" />
                    <DxGridDataColumn Caption="Date" FieldName="Date" DisplayFormat="@constants.SHORT_DATE_FORMAT" Width="8rem" />
                    <DxGridDataColumn Caption="Description" FieldName="Description" />
                    <DxGridDataColumn Caption="Membership Fee?" FieldName="IsMembershipFee" Width="10rem" />
                    <DxGridDataColumn Caption="Amount" FieldName="Amount" DisplayFormat="{0:c2}" />
                    <DxGridDataColumn Width="3rem" Caption="Details" AllowGroup="false" ExportEnabled="false" FixedPosition="GridColumnFixedPosition.Right">
                        <CellDisplayTemplate>
                            <HistoryButton  PersonID=@(((Fee)context.DataItem).Person.ID)
                                        Click="async() => {var selectedPerson = (((Fee)context.DataItem)).Person;
                                            await fullScreen.ResetFullScreen();
                                            await MemberDrawerRequested.InvokeAsync((selectedPerson,currentTerm)); }">
                            </HistoryButton>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
                <GroupSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                    FieldName="Description" DisplayText="{0:n0} Fees"
                    FooterColumnName="IsMembershipFee" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                    DisplayText="{0:c2}"
                    FieldName="Amount"
                    FooterColumnName="Amount" />
                </GroupSummary>
                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" DisplayText="{0:n0} Fees" FieldName="Description" FooterColumnName="IsMembershipFee" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" DisplayText="{0:c2}" FieldName="Amount" />
                </TotalSummary>

                <EditFormTemplate Context="EditFormContext">
                    @{
                        var editItem = (Fee)EditFormContext.EditModel;
                    }
                    <DxFormLayout>
                        <DxFormLayoutItem Caption="Apply To" ColSpanMd="12">
                            <PersonsComboBox People="@Persons" @bind-SelectedPerson="@editItem.Person" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Date" ColSpanMd="12">
                            <DxDateEdit @bind-Date="@editItem.Date" Mask=@constants.STD_DATE_FORMAT>
                            </DxDateEdit>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Description" ColSpanMd="12">
                            <DxTextBox @bind-Text="@editItem.Description" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Amount" ColSpanMd="12">
                            <DxMaskedInput @bind-Value="@editItem.Amount" Mask="@NumericMask.Currency" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Include as Membership Fee?" ColSpanMd="12">
                            <DxCheckBox Enabled=@(!(editItem.Person is Contact)) 
                            @bind-Checked="@editItem.IsMembershipFee" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditFormTemplate>
            </DxGrid>
        </ContentTemplate>
    </FullScreen>

}<style>
    .popup-width {
    min-width: 40rem;
    }
</style>

@code {
    [Parameter]
    public EventCallback<(Person, Term)> MemberDrawerRequested { get; set; }

    bool IsReady;
    List<Fee>? Fees { get; set; }
    IEnumerable<Person>? Persons { get; set; }
    SystemSettings settings;
    YearComponent? yearComponent;
    int ProcessingYear;
    Fee? originalFee;
    FullScreen? fullScreen;

    DxGridCommandColumnEx? GridCommandColumn;
    MessageBox? messageBox;
    string? messageBoxWidth;

    IGrid? mainGrid { get; set; }
    ErrorPopup? ErrorPopup { get; set; }
    GridToolbar? Toolbar;
    string? ErrorHeader;
    string? ErrorMessage;
    U3ADbContext? dbc { get; set; }
    Term? currentTerm;

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        settings = dbc.SystemSettings.FirstOrDefault();
        await RefreshData();
        IsReady = true;
    }

    void OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var editModel = (Fee)e.EditModel;
        if (e.IsNew)
        {
            editModel.ProcessingYear = ProcessingYear;
            editModel.Date = DateTime.Today;
            editModel.Description = "Manual Fee Adjustment";
            editModel.IsMembershipFee = true;
            originalFee = null;
        }
        else originalFee = editModel;
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Fee)e.EditModel;
        if (!e.Cancel)
        {
            // Re-query a data item from the store.
            var dataItem = e.IsNew
                                ? new Fee()
                                : dbc.Fee.Find(editModel.ID);
            // Assign changes from the edit model to the data item.
            if (dataItem != null)
            {
                editModel.CopyTo(dataItem);
                if (editModel.Person is Contact)
                {
                    dataItem.Person = dbc.Contact.Find(editModel.Person.ID);
                    dataItem.IsMembershipFee = false;
                }
                else
                {
                    dataItem.Person = dbc.Person.Find(editModel.Person.ID);
                }
                // Post changes to the database.
                if (e.IsNew)
                {
                    await dbc.AddAsync(dataItem);
                }
                if (await SaveChangesAsync())
                {
                    if (originalFee != null) await UpdatePersonFinancialTo(originalFee);
                    await UpdatePersonFinancialTo(dataItem);
                    await SaveChangesAsync();
                    await RefreshData();
                }
            }
        }
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var fee = (Fee)e.DataItem;
        //physically remove, override soft delete
        await dbc.Database.ExecuteSqlAsync($"Delete Fee where ID = {fee.ID}" );
        dbc.ChangeTracker.Clear();
        await RefreshData();
    }

    async Task<bool> SaveChangesAsync()
    {
        bool result = false;
        try
        {
            // Post changes to the database.
            await dbc.SaveChangesAsync();
            result = true;
        }
        catch (Exception ex)
        {
            ErrorHeader = "Save to database error";
            ErrorMessage = Helpers.GetErrorMessage(ex);
            await ErrorPopup.ShowPopupAsync();
            dbc?.ChangeTracker?.Clear();
        }
        return result;
    }

    private async Task UpdatePersonFinancialTo(Fee fee)
    {
        var person = fee.Person;
        var maxDate = DateTime.MaxValue;
        var service = await MemberFeeCalculationService.CreateAsync(dbc, currentTerm, person);
        var minMembershipFee = service.CalculateMinimumFeePayable(person);
        var paidToDate = await BusinessRule.GetPreviouslyPaidAsync(dbc, person.ID, ProcessingYear, maxDate);
        // Set FinancialTo if amount paid greater than minimum amount
        if (paidToDate >= minMembershipFee)
        {
            person.FinancialTo = (person.FinancialTo >= ProcessingYear) ? person.FinancialTo : ProcessingYear;
        }
        else
        {
            // Otherwise, we are unfinancial
            person.FinancialTo = ProcessingYear - 1; // Good enough if prev financialTo is null
            if (person.PreviousFinancialTo != null)
            {
                if (person.PreviousFinancialTo.HasValue && person.PreviousFinancialTo < ProcessingYear)
                {
                    person.FinancialTo = person.PreviousFinancialTo.Value;
                }
            }
        }
    }


    async Task SelectedYearChanged(int NewYear)
    {
        await RefreshData();
    }

    async Task RefreshData()
    {
        if (yearComponent != null)
        {
            currentTerm = await BusinessRule.CurrentTermAsync(dbc);
            if (currentTerm == null)
            {
                currentTerm = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
            }
            ProcessingYear = yearComponent.Year;
            if (currentTerm.Year != ProcessingYear)
            {
                currentTerm = await dbc.Term.FirstOrDefaultAsync(x => x.Year == ProcessingYear && x.TermNumber == 4);
            }
            Persons = await BusinessRule.SelectablePeopleIncludeUnfinancialAsync(dbc);
            Fees = await BusinessRule.EditableFeesForYearAsync(dbc, ProcessingYear);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
