@page "/BringForwardEnrolments"

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService tenantService
@inject NavigationManager NavigationManager
@implements IDisposable


@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="container-md py-2">
        <CollapsableContent DismissKey="{63BDF361-E40E-4B15-9A12-736AAF535B74}"
                        AlertText=@($@"<p><strong>Bring Forward Enrolments</strong> is now an automated procedure.<br />
                             {automationMsg}.</p>")
                          OnToggleAlert="@(() => InvokeAsync(StateHasChanged))" />
        <div class="row">
            <div class="col col-md-2" />
            <div class="col col-md-8 border border-primary py-2">
                <ContextHelpTitle Title="Bring Forward Enrolments" 
                    ActivationStyle="HelpActivationStyle.ButtonAndTitleNoMessages"
                    HelpTopic="Bring-Forward-Enrolments.html" />
                <p>
                    This procedure will bring forward enrolments into a new term.
                    It is intended to be used prior to the start of terms 2, 3 and 4 where participants continue with courses from the previous term.
                </p>
                <p>
                    The procedure can be executed at any time and may be re-executed if required. It should however be executed twice at end of term...
                    <ol>
                        <li>Immediately prior to the new term's enrolment start date - leave <strong>Set New Term to Current Term?</strong> unchecked.</li>
                        <li>Immediately prior to the new term's start date - ensure <strong>Set New Term to Current Term?</strong> is checked.</li>
                    </ol>
                    Note that <strong>Set New Term to Current Term?</strong> is automatically checked if the procedure
                    is executed within one week of the of the new term's start date.
                </p>
                <p>Enrolments will be brought forward if...</p>
                <ul>
                    <li>
                        the class Start Date and Occurence fields are blank and
                        and new term is ticked on the class record.
                    </li>
                    <li>
                        the class Start Date or Occurence fields are non-blank and
                        the calculated class ending date is greater than the new term's start date.
                        The term checkboxes on the class record are ignored.
                    </li>
                </ul>
                <p>
                    Courses are normally brought forward from
                    the current term into the new term. If the course is not offered in the
                    current term then the most recent term will be brought forward, if available.
                </p>

                <MessageBox @ref="@messageBox" />

                <DxFormLayout Enabled=@IsProcessing>
                    <div class="text-danger">@(new MarkupString(errorMessage))</div>
                    <DxFormLayoutItem Caption="Current Enrolment Term" ColSpanMd="12">
                        <TermsComboBox Terms="@terms" @bind-SelectedTerm="@sourceTerm" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="New Enrolment Term" ColSpanMd="12">
                        <TermsComboBox Terms="@terms" @bind-SelectedTerm="@targetTerm" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Set New Term to Current Term?" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@SetCurrentTerm" />
                    </DxFormLayoutItem>
                    <p />
                    <DxFormLayoutItem ColSpanMd="12">
                        <Template>
                            <DxButton Visible=@(!IsProcessing) Text="Process" RenderStyle="@ButtonRenderStyle.Primary" Click="@Process" />
                            <DxButton Visible=@(!IsProcessing) Text="Cancel" RenderStyle="@ButtonRenderStyle.Secondary" Click="@Close" />
                            <DxButton Context="buttonContext" Visible=@(IsProcessing)
                                  RenderStyle="ButtonRenderStyle.Success" CssClass="col col-12"
                                  RenderStyleMode="ButtonRenderStyleMode.Contained">
                                <span class="spinner-border spinner-border-sm" role="status" />&nbsp;Processing
                            </DxButton>
                        </Template>
                    </DxFormLayoutItem>
                </DxFormLayout>

            </div>
            <div class="col col-md-2" />
        </div>

    </div>

}
@code {
    bool IsReady;
    bool IsProcessing;
    bool SetCurrentTerm = false;
    string? errorMessage;
    SystemSettings? settings;
    Term? sourceTerm;
    Term? targetTerm;
    List<Term> terms { get; set; }
    string automationMsg = "undefined";

    MessageBox? messageBox;
    U3ADbContext dbc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        sourceTerm = await BusinessRule.CurrentTermAsync(dbc);
        if (sourceTerm != null)
        {
            terms = await BusinessRule.SelectableTermsInCurrentYearAsync(dbc, sourceTerm);
            targetTerm = await BusinessRule.GetNextTermInYear(dbc, sourceTerm);
            if (targetTerm != null)
            {
                if (DateTime.Today >= targetTerm.EnrolmentStartDate)
                {
                    SetCurrentTerm = true;
                    automationMsg = $"Last Exexcuted: {targetTerm.EnrolmentStartDate.ToShortDateString()} (Start of Term {targetTerm.TermNumber} enrolment period.)";
                }
                else
                {
                    automationMsg = $"The next expected run date is on or before: {targetTerm.EnrolmentStartDate.ToShortDateString()} (Start of Term {targetTerm.TermNumber} enrolment period.)";
                }
            }
        }
        IsReady = true;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // wire up the toolbar
        base.OnAfterRender(firstRender);
        if (!firstRender)
        {
            if (sourceTerm == null)
            {
                await messageBox.ShowOkOnlyAsync("Current Term is undefined", "Use <strong>Add/Edit Enrolment Terms</strong> to set the current term.");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                if (sourceTerm.TermNumber == 4)
                {
                    await messageBox.ShowOkOnlyAsync("Enrolments Cannot Be Brought Forward", "Enrolments cannot be brought forward from term 4 into the new year.<br/>Participants must be re-enrolled into a new year.");
                    NavigationManager.NavigateTo("/");
                }
            }
        }
    }
    async Task Process()
    {
        if (await IsDataOk())
        {
            errorMessage = null;
            IsProcessing = true;
            StateHasChanged();
            await BusinessRule.BringForwardEnrolmentsAsync(dbc, sourceTerm, targetTerm, SetCurrentTerm);
            var tenant = await tenantService.GetTenantInfoAsync();
            await BusinessRule.BuildScheduleAsync(dbc, TenantDbfactory, tenant.Identifier);
            await messageBox.ShowOkOnlyAsync("Process Complete", $"{sourceTerm.Name} enrolments have been brought forward to {targetTerm.Name}.");
            NavigationManager.NavigateTo("/");
        }
    }

    async Task<bool> IsDataOk()
    {
        bool result = true;
        string msg = "<p>";
        if (sourceTerm == null)
        {
            msg += "*** You must select the current Term ***<br/>";
            result = false;
        }
        if (targetTerm == null)
        {
            msg += "*** You must select the new Term ***<br/>";
            result = false;
        }
        if (result)
        {
            if (sourceTerm?.Comparer > targetTerm?.Comparer)
            {
                msg += "*** Current Term must be prior to the new Term ***<br/>";
                result = false;
            }
            //int count = await BusinessRule.CountOfTermEnrolments(dbc, targetTerm);
            //if (count > 0) {
            //    msg += $"*** The new Term must not have any enrolments. The selected Term has {count} enrolments. ***<br/>";
            //    result = false;
            //}
        }
        if (!result)
        {
            msg += "<p>";
            errorMessage = msg;
        }
        return result;
    }

    void Close()
    {
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }
}
