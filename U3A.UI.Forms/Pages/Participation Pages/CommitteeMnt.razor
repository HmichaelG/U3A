@page "/CommitteeMnt"

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable

@attribute [Authorize]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{

    <div class="row  align-content-start">
        <ContextHelpTitle Title="Committee Members" HelpTopic="add_edit-committee.html" />
    </div>
    <div class="row">
        <div class="col-11  d-none d-md-inline">
            Enter/Edit the participants holding committe positions.
        </div>

    </div>
    <br />

    <MessageBox @ref="@messageBox" />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

    <FullScreen>
        <ContentTemplate>
            <DxGrid Data="@CommitteePositions" @ref=@mainGrid
                    ColumnResizeMode="GridColumnResizeMode.Disabled"
                    AllowSelectRowByClick="true"
                    ShowFilterRow="false"
                    ShowAllRows="true"
                    KeyFieldName="ID"
                    ValidationEnabled="true"
                    PopupEditFormCssClass="popup-width"
                    EditMode="GridEditMode.PopupEditForm"
                    DataItemDeleting="Grid_DataItemDeleting"
                    EditModelSaving="Grid_EditModelSaving">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid LayoutKey="{B5B12E06-49CB-435F-AB91-3268991BE376}" />
                </ToolbarTemplate>
                <Columns>
                    <DxGridCommandColumnEx Width="8rem" />
                    <DxGridDataColumn Caption="Position" FieldName="Position" Width="10rem" />
                    <DxGridDataColumn Caption="Held By" FieldName="Person.FullName" />
                </Columns>

                <EditFormTemplate Context="CommitteeContext">
                    @{
                        var editItem = (Committee)CommitteeContext.EditModel;
                    }
                    <DxFormLayout>
                        <DxFormLayoutItem ColSpanMd="12">
                            <ValidationSummary />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Position" ColSpanMd="12">
                            <DxComboBox Data="@Positions" @bind-Value="@editItem.Position" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Held By" ColSpanMd="12">
                            <PersonsComboBox People="@Persons" @bind-SelectedPerson="@editItem.Person" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditFormTemplate>
            </DxGrid>
        </ContentTemplate>
    </FullScreen>


}
<style>
    .popup-width {
        min-width: 40rem;
    }
</style>


@code {
    bool IsReady;
    IReadOnlyList<object> SelectedDataItems { get; set; }
    SystemSettings? settings;
    List<string> Positions;
    List<Person> Persons;
    List<Committee> CommitteePositions { get; set; }

    MessageBox messageBox;

    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal string ErrorHeader;
    internal string ErrorMessage;
    U3ADbContext dbc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        await RefreshData();
        IsReady = true;
    }

    async Task RefreshData()
    {
        Persons = await BusinessRule.EditablePersonAsync(dbc);
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        if (settings != null && !string.IsNullOrWhiteSpace(settings.CommitteePositions))
        {
            Positions = settings.CommitteePositions.Split(new string[] { "\n" },
                                StringSplitOptions.None)
                                .Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
        }
        CommitteePositions = await dbc.Committee.ToListAsync();
    }

    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editModel = (Committee)e.EditModel;
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new Committee() : dbc.Committee.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        if (dataItem != null)
        {
            editModel.CopyTo(dataItem);
            if (editModel.Person != null) { dataItem.Person = dbc.Person.Find(editModel.Person.ID); }
            try
            {
                // Post changes to the database.
                if (e.IsNew) await dbc.AddAsync(dataItem);
                await dbc.SaveChangesAsync();
                // update the Grid.
                if (e.IsNew)
                {
                    CommitteePositions.Insert(0, dataItem);
                }
                else
                {
                    int idx = CommitteePositions.FindIndex(x => x.ID == dataItem.ID);
                    CommitteePositions[idx] = dataItem;
                }
            }
            catch (Exception ex)
            {
                ErrorHeader = "Save to database error";
                ErrorMessage = Helpers.GetErrorMessage(ex);
                await ErrorPopup.ShowPopupAsync();
                dbc?.ChangeTracker?.Clear();
                e.Cancel = true;
            }
        }
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var Committee = (Committee)e.DataItem;
        dbc.Remove(Committee);
        await SaveChangesAsync();
        await RefreshData();
    }

    async Task<bool> SaveChangesAsync()
    {
        bool result = false;
        try
        {
            // Post changes to the database.
            await dbc.SaveChangesAsync();
            result = true;
        }
        catch (Exception ex)
        {
            ErrorHeader = "Save to database error";
            ErrorMessage = Helpers.GetErrorMessage(ex);
            await ErrorPopup.ShowPopupAsync();
            dbc?.ChangeTracker?.Clear();
        }
        return result;
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
