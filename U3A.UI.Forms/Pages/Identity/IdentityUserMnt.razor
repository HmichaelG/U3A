@page "/IdentityUserMnt"

@inject IJSRuntime js
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@using DevExpress.Data.Filtering
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Identity
@using System.Collections.Concurrent
@using U3A.Data
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable


@attribute [Authorize(Roles = "Security Administrator")]

@if (!IsReady)
{
    <LoadingIndicator />
}
else
{
    <CreateDomainLogin @ref="createDomainLogin"
    Roles="@roles"
    Settings="@settings" />

    <MessageBox @ref="@messageBox" />
    <MessageBox @ref="@passwordTestMessageBox" OnShown="@(() => testPasswordTextBox?.FocusAsync())">
        <TextTemplate>
            <DxFormLayoutItem Caption="Test password for" ColSpanMd="12">
                <DxTextBox @bind-Text=testPasswordEmail Enabled=false />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Enter Password" ColSpanMd="12">
                <DxTextBox @ref=@testPasswordTextBox @bind-Text=testPassword
                Password="@(!showTestPassword)" autocomplete="new-password">
                    <Buttons>
                        <DxEditorButton IconCssClass="bi bi-eye"                        
                        Tooltip="Show/hide password"
                        Click="@(() => showTestPassword = !showTestPassword)" />
                    </Buttons>
                </DxTextBox>
            </DxFormLayoutItem>
        </TextTemplate>
    </MessageBox>
    <Progress @ref="@ProgressBar" />

    @if (!IsEmbedded)
    {
        <div class="row  align-content-start">
            <ContextHelpTitle Title="Login &amp; Role Assignment" HelpTopic="login-security--role-assignmen.html" />
        </div>

        <DxTabs @ref="dxTabs" TabClick="@OnTabClick">
            <DxTabPage Text="All Logins" />
            <DxTabPage Text="With Roles" />
            <DxTabPage Text="Without Roles" />
            <DxTabPage Text="Email Not Confirmed" />
        </DxTabs>
    }

    <FullScreen DisplayOffset="@((IsEmbedded) ? 19 : 8)" HideToggle="@IsEmbedded">
        <ContentTemplate>
            <DxGrid Data="@AppUsers" @ref="mainGrid"
            UnboundColumnData="Grid_CustomUnboundColumnData"
            @bind-SelectedDataItems="@SelectedDataItems"
            ShowSearchBox="true"
            ShowFilterRow="false"
            ShowAllRows="false"
            KeyFieldName="Id"
            PopupEditFormHeaderText="Edit User Details"
            EditMode="GridEditMode.PopupEditForm"
            EditModelSaving="Grid_EditModelSaving"
            DataItemDeleting="Grid_DataItemDeleting"
            CustomizeEditModel="Grid_CustomizeEditModel"
            ValidationEnabled="true">
                <ToolbarTemplate>
                    <GridToolbar LinkedGrid=@mainGrid LayoutKey="{BF214124-CDFA-4724-B2DC-EFF4D58E4244}">
                        <CustomButtonContent>
                            <DxToolbarItem Text="Create Domain Login" CssClass="mx-1" Visible="!IsEmbedded"
                            Click="@OnCreateDomainLogin"
                            RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                            RenderStyle="ButtonRenderStyle.Primary" />
                            <DxToolbarItem Text="Populate Logins" CssClass="me-1"
                            Click="@OnPopulateLogins" Visible="!IsEmbedded"
                            RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                            RenderStyle="ButtonRenderStyle.Primary" />
                            <DxToolbarItem Text="Set Email Confirmed" CssClass="me-1" Visible="!IsEmbedded"
                            Click="@OnSetEmailConfirmed" Enabled="@AreItemsSelected()"
                            RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                            RenderStyle="ButtonRenderStyle.Primary" />
                            <DxToolbarItem Text="Reset Password" Visible="!IsEmbedded"
                            Click="@OnResetPassword" Enabled="@AreItemsSelected()"
                            RenderStyleMode="ToolbarItemRenderStyleMode.Contained"
                            RenderStyle="ButtonRenderStyle.Primary" />
                        </CustomButtonContent>
                    </GridToolbar>
                </ToolbarTemplate>
                <Columns>
                    <DxGridSelectionColumn Width="2rem" Visible="@(!IsEmbedded)" />
                    <DxGridCommandColumnEx Width="8rem" DeleteButtonVisible=true EditButtonVisible=true NewButtonVisible="false" />
                    <DxGridDataColumn Width="4rem" Caption="Password" AllowGroup="false">
                        <CellDisplayTemplate>
                            <DxButton RenderStyleMode="ButtonRenderStyleMode.Text"
                            IconCssClass="bi bi-shield-check"
                            RenderStyle="ButtonRenderStyle.Primary" Text="Test"
                            Click="() => OnTestEmail(((ApplicationUser)context.DataItem).Email)"></DxButton>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    <DxGridDataColumn Caption="Email" FieldName="Email" />
                    <DxGridDataColumn FieldName="Participant" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Width="6rem" FieldName="FinancialTo" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Width="9em" Caption="Email Confirmed?" FieldName="EmailConfirmed" />
                    <DxGridDataColumn Width="7rem" Visible=false
                    Caption="Lockout Enabled?" FieldName="User.LockoutEnabled" />
                    <DxGridDataColumn Width="6rem" Caption="Lockout End" Visible=false DisplayFormat="d" FieldName="LockoutEnd" />
                    <DxGridDataColumn Width="5rem" Caption="Login Failures" Visible=false DisplayFormat="n0" FieldName="AccessFailedCount" />
                    <DxGridDataColumn Visible="@(!IsEmbedded)" FieldName="Roles" UnboundType="GridUnboundColumnType.String" />
                    <DxGridDataColumn Width="11em" Caption="Last Login"
                    DisplayFormat="@constants.SHORT_DATETIME_FORMAT"
                    FieldName="LastLoginLocal" UnboundType="GridUnboundColumnType.DateTime" />
                    <DxGridDataColumn Width="11em" Caption="Last Update"
                    DisplayFormat="@constants.SHORT_DATETIME_FORMAT"
                    FieldName="LastUpdateLocal" UnboundType="GridUnboundColumnType.DateTime" />
                </Columns>
                <EditFormTemplate Context="EditFormContext">
                    @{
                        var editItem = (ApplicationUser)EditFormContext.EditModel;
                    }
                    <DxFormLayout>
                        <DxFormLayoutItem Visible="@(!IsEmbedded)" Caption="User Roles" ColSpanMd="12">
                            <DxTagBox Data="@roles" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            @bind-Values="@SelectedRoles">
                            </DxTagBox>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Is Email Confirmed?" ColSpanMd="12">
                            <DxCheckBox @bind-Checked=editItem.EmailConfirmed Enabled=!editItem.EmailConfirmed />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Email" ColSpanMd="12">
                            <DxTextBox @bind-Text=editItem.Email Enabled=false />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="New Password" ColSpanMd="12">
                            <DxTextBox @bind-Text=editItem.Password
                            NullText="leave blank if unchanged" Password="@(!showPassword)" autocomplete="new-password">
                                <Buttons>
                                    <DxEditorButton IconCssClass="bi bi-eye"
                                    Tooltip="Show/hide password"
                                    Click="@(() => showPassword = !showPassword)" />
                                </Buttons>
                            </DxTextBox>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption=" Confirm Password" ColSpanMd="12">
                            <DxTextBox @bind-Text=editItem.ConfirmPassword Password="@(!showPassword)" autocomplete="new-password" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditFormTemplate>

                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" Name="Total" FieldName="Email" />
                </TotalSummary>

            </DxGrid>
        </ContentTemplate>
    </FullScreen>
    @quickMessage
}

@code {
    [Parameter]
    public bool IsEmbedded { get; set; }

    bool IsReady;
    bool PopupVisible;
    SystemSettings settings;
    IReadOnlyList<object> SelectedDataItems { get; set; }
    List<ApplicationUser> AppUsers { get; set; }
    IEnumerable<IdentityRole> roles { get; set; }
    IEnumerable<IdentityRole>? SelectedRoles { get; set; } = new List<IdentityRole>();
    IEnumerable<IdentityUserRole<string>> usersRoles;
    IEnumerable<ApplicationUser> users;

    IEnumerable<Person> People;
    IGrid? mainGrid;
    DxTabs? dxTabs;
    DxGridCommandColumnEx? GridCommandColumn;
    MarkupString quickMessage;
    U3ADbContext dbc { get; set; }
    Progress? ProgressBar;
    CreateDomainLogin? createDomainLogin;
    AuthenticationState? authenticationState;
    bool showPassword = false;

    MessageBox? messageBox { get; set; }
    MessageBox? passwordTestMessageBox;
    string testPassword;
    bool showTestPassword;
    string testPasswordEmail;
    DxTextBox? testPasswordTextBox;

    internal GridToolbar? Toolbar;

    bool AreItemsSelected()
    {
        return (SelectedDataItems != null && SelectedDataItems.Count > 0) ? true : false;
    }

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        await RefreshDataAsync();
        IsReady = true;
    }

    async Task RefreshDataAsync()
    {
        mainGrid?.BeginUpdate();
        settings = await dbc.SystemSettings.FirstOrDefaultAsync();
        users = await dbc.Users.AsNoTracking().ToListAsync();
        roles = await dbc.Roles.ToListAsync();
        usersRoles = await dbc.UserRoles.AsNoTracking().ToListAsync();
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            if (IsEmbedded)
            {
                AppUsers = await GetUsersNotInAnyRoleAsync();
            }
            else
            {
                AppUsers = await UserManager.Users.ToListAsync();
            }
            AppUsers = AppUsers.OrderBy(x => x.Email).ToList();
            People = await BusinessRule.SelectablePersonsIncludeUnfinancialAsync(dbc);
        }
        mainGrid?.ClearSelection();
        mainGrid?.EndUpdate();
    }
    public async Task<List<ApplicationUser>> GetUsersNotInAnyRoleAsync()
    {
        var usersNotInRoles = from u in users
                              where !usersRoles.Any(ur => ur.UserId == u.Id)
                              select u;
        return usersNotInRoles.ToList();
    }

    void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e)
    {
        ApplicationUser appUser = e.DataItem as ApplicationUser;
        string result = string.Empty;
        if (e.FieldName == "Roles")
        {
            var userRoles = (from u in users
                             where u.Email == appUser.Email
                             join ur in usersRoles
                             on u.Id equals ur.UserId
                             join r in roles
                             on ur.RoleId equals r.Id
                             select new
                             {
                                 Role = r.Name
                             }).ToList().OrderBy(x => x.Role);

            result = string.Empty;
            foreach (var u in userRoles)
            {
                result += $"{u.Role}, ";
            }
            e.Value = (result != string.Empty) ? result.Substring(0, result.Length - 2) : string.Empty;
        }
        if (e.FieldName == "Participant")
        {
            foreach (var p in People.Where(x => x.Email != null && x.Email.ToUpper() == appUser.NormalizedEmail))
            {
                e.Value = p.FullName;
            }
        }
        if (e.FieldName == "FinancialTo")
        {
            foreach (var p in People.Where(x => x.Email != null && x.Email.ToUpper() == appUser.NormalizedEmail))
            {
                e.Value = p.FinancialToText;
            }
        }
        if (e.FieldName == "LastUpdateLocal")
        {
            e.Value = dbc.GetLocalTime(appUser.LastUpdated);
        }
        if (e.FieldName == "LastLoginLocal")
        {
            e.Value = dbc.GetLocalTime(appUser.LastLogin);
        }
    }

    async void OnTabClick(TabClickEventArgs e)
    {
        await SetupTab(e.TabIndex);
    }

    async Task SetupTab(int TabIndex)
    {
        await InvokeAsync(mainGrid.BeginUpdate);
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            try
            {
                switch (TabIndex)
                {
                    case 0:             // All records
                        mainGrid.ClearFilter();
                        break;
                    case 1:             // With Roles
                        var filter = new BinaryOperator("Roles", string.Empty, BinaryOperatorType.NotEqual);
                        mainGrid.SetFilterCriteria(filter);
                        break;
                    case 2:             // With Roles
                        filter = new BinaryOperator("Roles", string.Empty, BinaryOperatorType.Equal);
                        mainGrid.SetFilterCriteria(filter);
                        break;
                    case 3:             // Email Not Confirmed
                        filter = new BinaryOperator("EmailConfirmed", false, BinaryOperatorType.Equal);
                        mainGrid.SetFilterCriteria(filter);
                        break;
                }
            }
            catch (Exception ex) { mainGrid?.ClearFilter(); }
        });
        await InvokeAsync(mainGrid.EndUpdate);
        await InvokeAsync(StateHasChanged);
    }


    bool isBusy;
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await SaveRecord(e);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task SaveRecord(GridEditModelSavingEventArgs e)
    {
        var editItem = e.EditModel as ApplicationUser;
        var appUser = await UserManager.FindByIdAsync(editItem.Id);
        editItem.CopyTo(appUser);
        if (!string.IsNullOrWhiteSpace(appUser.Password))
        {
            if (appUser.Password != appUser.ConfirmPassword)
            {
                await messageBox.ShowOkOnlyAsync("Passwords must match",
                            "The password and confirm password fields fo not match!");
                e.Cancel = true;
                return;
            }
            else
            {
                var token = await UserManager.GeneratePasswordResetTokenAsync(appUser);
                var result = await UserManager.ResetPasswordAsync(appUser, token, appUser.Password);
                if (!result.Succeeded)
                {
                    var msg = string.Empty;
                    foreach (var err in result.Errors)
                    {
                        msg += $"{err.Description}<br />";
                    }
                    await messageBox.ShowOkOnlyAsync("Passwords reset failed", msg);
                    e.Cancel = true;
                    return;
                }
            }
        }
        if (appUser.EmailConfirmed)
        {
            var confirmEmailToken = await UserManager.GenerateEmailConfirmationTokenAsync(appUser);
            var result = await UserManager.ConfirmEmailAsync(appUser, confirmEmailToken);
        }
        foreach (var role in roles)
        {
            if (await UserManager.IsInRoleAsync(appUser, role.Name))
            {
                await UserManager.RemoveFromRoleAsync(appUser, role.Name);
            }
        }
        foreach (var role in SelectedRoles)
        {
            if (!await UserManager.IsInRoleAsync(appUser, role.Name))
            {
                await UserManager.AddToRoleAsync(appUser, role.Name);
            }
        }
        e.Reload = true;
    }

    async void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        SelectedRoles = new List<IdentityRole>();
        var l = new List<IdentityRole>();
        if (!e.IsNew)
        {
            var appUser = (ApplicationUser)e.DataItem;
            appUser.Password = appUser.ConfirmPassword = string.Empty;
            foreach (var role in roles)
            {
                if (await UserManager.IsInRoleAsync(appUser, role.Name))
                {
                    l.Add(role);
                }
            }
            SelectedRoles = l.ToList();
            StateHasChanged();
        }
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem != null)
        {
            var dataItem = e.DataItem as ApplicationUser;
            var appUser = await UserManager.FindByIdAsync(dataItem.Id);
            await UserManager.DeleteAsync(appUser);
            AppUsers.Remove(appUser);
            e.Reload = true;
        }
    }

    async Task OnResetPassword()
    {
        var msg =
            "<p>You are about to reset the selected login passwords to the default <strong>Member ID</strong> on their member record. " +
            "Password maintenance is designed to be a self-service procedure but this procedure may be helpful should the member be experiencing problems. " +
            "<p>Where an email address is shared by a male and female, the male's Member ID will be used as the password. " +
            "Where an email address is shared by members with the same gender, the first Member ID in alphabetical order will be used.</p>" +
            "<p>Do you wish to continue?";
        if (await messageBox.ShowAsync("Password Reset", msg))
        {
            await ProgressBar.ShowSpinnerAsync("Reset Passwords");
            SetRelaxedPassword();
            foreach (var item in SelectedDataItems)
            {
                var thisItem = (ApplicationUser)item;
                var u = await UserManager.FindByIdAsync(thisItem.Id);
                var p = await dbc.Person.AsNoTracking().OrderBy(x => x.FirstName).FirstOrDefaultAsync(x => x.Email.ToLower() == u.Email.ToLower());
                if (p != null)
                {
                    u.LastUpdated = DateTime.UtcNow;
                    var token = await UserManager.GeneratePasswordResetTokenAsync(u);
                    var result = await UserManager.ResetPasswordAsync(u, token, p.PersonIdentity);
                }
            }
            SetNormalPassword();
            mainGrid?.ClearSelection();
            await ProgressBar.Close();
            await messageBox.ShowOkOnlyAsync("Password Reset", "Selected passwords have been reset.");
        }
    }

    private void SetRelaxedPassword()
    {
        UserManager.Options.Password.RequiredUniqueChars = 0;
        UserManager.Options.Password.RequireNonAlphanumeric = false;
        UserManager.Options.Password.RequireUppercase = false;
    }
    private void SetNormalPassword()
    {
        UserManager.Options.Password.RequiredUniqueChars = 1;
        UserManager.Options.Password.RequireNonAlphanumeric = true;
        UserManager.Options.Password.RequireUppercase = true;
    }

    async Task OnSetEmailConfirmed()
    {
        var msg =
                "<p>This procedure will set the selected login's Email Confirmed status to Confirmed (true). " +
                "Email confirmation is designed to be self-service. " +
                "This procedure is intended to assist those who may be having issues with email and therefore cannot confirm.</p> " +
                "<p>The procedure is safe to execute and may be re-executed as often as required. Note there is no procedure to unset Email Confirmation.</p>" +
                "<p>Do you wish to continue?";
        if (await messageBox.ShowAsync("Set Email Confirmed", msg))
        {
            mainGrid?.BeginUpdate();
            await ProgressBar.ShowSpinnerAsync("Set Email Confirmed");
            foreach (var obj in SelectedDataItems)
            {
                ApplicationUser thisItem = obj as ApplicationUser;
                var u = await UserManager.FindByIdAsync(thisItem.Id);
                var token = await UserManager.GenerateEmailConfirmationTokenAsync(u);
                await UserManager.ConfirmEmailAsync(u, token);
                AppUsers.Remove(u);
                AppUsers.Add(u);
            }
            mainGrid?.EndUpdate();
            await ProgressBar.Close();
            await messageBox.ShowOkOnlyAsync("Set Email Confirmed", "Selected login emails have been confirmed");
            await SetupTab(0);
        }
    }
    async Task OnPopulateLogins()
    {
        var msg =
            "<p>You are about to populate default user logins from participant email addresses using the " +
            "<strong>Member ID</strong> as the password.<p>" +
            "Normally, this is only performed on initial database load as member registration and " +
            "password maintenance are designed to be self-service. However, this procedure is safe to re-execute as often " +
            "as required as only logins that do not already exist will be created.<p>" +
            "<p>Where an email address is shared by multiple members, the Member ID of the first person in alphabetic order will be used as the password.</p>" +
            "<p>Do you wish to continue?";
        if (await messageBox.ShowAsync("Populate Logins", msg))
        {
            var hasher = new PasswordHasher<IdentityUser>();
            var max = dbc.Person.Count(x => x.DateCeased == null && !string.IsNullOrWhiteSpace(x.Email));
            var count = 0;
            var processed = 0;
            await ProgressBar.ShowAsync("Populate Logins", max);
            mainGrid.BeginUpdate();
            foreach (var p in await dbc.Person.AsNoTracking()
                            .OrderBy(x => x.LastName).ThenBy(x => x.FirstName)
                            .Where(x => x.DateCeased == null && !string.IsNullOrWhiteSpace(x.Email)).ToListAsync())
            {
                await ProgressBar.SetValueAsync(count++);
                var email = p.Email.Trim();
                if (await UserManager.FindByEmailAsync(email) == null)
                {
                    var user = new ApplicationUser()
                        {
                            Email = email,
                            UserName = email,
                            EmailConfirmed = true,
                            PasswordHash = hasher.HashPassword(null, p.PersonIdentity)
                        };
                    var result = await UserManager.CreateAsync(user);
                    AppUsers.Add(user);
                    processed++;
                }
            }
            await RefreshDataAsync();
            mainGrid?.EndUpdate();
            await ProgressBar.Close();
            await messageBox.ShowAsync("Login Population Complete", $"{processed} logins have been created.");
        }
    }

    async Task OnCreateDomainLogin()
    {
        await createDomainLogin.ShowAsync();
        await RefreshDataAsync();
    }

    async Task OnTestEmail(string Email)
    {
        testPassword = string.Empty;
        testPasswordEmail = Email;
        if (await passwordTestMessageBox.ShowAsync("Test Password", "<b>Hint</b>: check your <span class='badge bg-danger'>Caps Lock</span> button is off"))
        {
            var user = await UserManager.FindByEmailAsync(Email);
            if (user != null)
            {
                var result = await UserManager.CheckPasswordAsync(user, testPassword);
                var resultMsg = (result) ? "The password is correct!" : "The password is not correct!";
                await messageBox.ShowOkOnlyAsync("Test Result", resultMsg);
            }
        }
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}
