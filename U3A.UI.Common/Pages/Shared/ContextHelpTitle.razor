@using System.IO
@using System.Globalization
@using Microsoft.Extensions.Configuration
@using U3A.Services
@using Blazored.LocalStorage;

@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IJSRuntime js
@inject NavigationManager navMan
@inject IConfiguration config
@inject ILocalStorageService localStorage
@inject WorkStation ws

@if (isReady)
{
    @switch (ActivationStyle)
    {
        case HelpActivationStyle.None:
            break;
        case HelpActivationStyle.ButtonOnly:
        case HelpActivationStyle.ButtonOnlyNoMessges:
            @if (ActivationStyle == HelpActivationStyle.ButtonOnly)
            {
                if (!string.IsNullOrWhiteSpace(inMaintenanceMessage))
                {
                    <div class="mx-2 mt-2 alert-style alert alert-danger text-center">@inMaintenanceMessage</div>
                }
                if (TwoFactorWarningMessage is not null)
                {
                    <div class="mx-2 mt-2 alert-style alert alert-warning text-center">@TwoFactorWarningMessage</div>
                }
                if (!string.IsNullOrWhiteSpace(informationMessage))
                {
                    <div class="mx-2 mt-2 alert-style alert alert-info text-center">
                        @informationMessage
                    </div>
                }
            }
            <DxButton IconCssClass="@ButtonIconCssClass" Text="@Title"
                      RenderStyleMode="ButtonRenderStyleMode.Outline"
                      RenderStyle="@((ActivationStyle == HelpActivationStyle.ButtonOnly) ? ButtonRenderStyle.Primary : ButtonRenderStyle.None)"
                      CssClass="@ButtonCssClass"
                      Click="ShowTopicAsync" Id="helpButton" />
            break;
        case HelpActivationStyle.StandardButtonAndTitle:
        case HelpActivationStyle.ButtonAndTitleNoMessages:
            <PageTitle>@($"{tenantId}: {Title}")</PageTitle>
            <div class="w-100 flex flex-row align-items-center">
                <div class="title-style">
                    <DxButton IconCssClass="@HelpButtonIconCssClass" CssClass="@ButtonCssClass"
                              RenderStyleMode="ButtonRenderStyleMode.Outline"
                              RenderStyle="ButtonRenderStyle.Info"
                              Click="ShowTopicAsync" Id="helpButton" />
                    @Title
                    <div class="message-style">
                        @if (ActivationStyle == HelpActivationStyle.StandardButtonAndTitle)
                        {
                            @if (!string.IsNullOrWhiteSpace(inMaintenanceMessage))
                            {
                                <div class="mx-2 mt-2 alert-style alert alert-danger text-center">@inMaintenanceMessage</div>
                            }
                            @if (TwoFactorWarningMessage is not null)
                            {
                                <div class="mx-2 mt-2 alert-style alert alert-warning text-center">@TwoFactorWarningMessage</div>
                            }
                            @if (!string.IsNullOrWhiteSpace(informationMessage))
                            {
                                <div class="mx-2 mt-2 alert-style alert alert-info text-center">
                                    @informationMessage
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="subtitle-style">@(new MarkupString(Subtitle))</div>
            break;
    }
    <DxWindow @ref=@helpWindow Width="@windowWidth"
              Visible=false
              Closed="OnClosed"
              HorizontalAlignment="HorizontalAlignment.Right"
              VerticalAlignment="VerticalAlignment.Center"
              Height="100vh"
              AllowResize="true"
              Context="windowContext"
              CloseOnEscape=true
              ShowCloseButton=true
              ShowFooter=true
              Scrollable=true
              HeaderText="Help">
        <BodyTextTemplate>
            <iframe src="@helpFile" class="iframe-size p-1"></iframe>
        </BodyTextTemplate>
    </DxWindow>
}

<style>
    .iframe-size {
        height: 100%;
        width: 100%;
        padding-bottom: 5px;
    }

    .alert-style {
        padding-top: 0.25rem !important;
        padding-bottom: 0.25rem !important;
        margin-bottom: 0.5dvh !important;
    }

    .message-style {
        font-size: small;
        font-weight: initial;
    }

    .title-style {
        display: flex;
        align-items: center;
        margin-top: 0.5rem;
        max-height: 1.75rem;
        font-size: 1.3rem;
        font-weight: 500;
        color: var(--dxbl-accent-color);
        text-align: @((ws.IsLargeScreen) ? "start" : "center");
        justify-content: @((ws.IsLargeScreen) ? "start" : "center");
    }

    .subtitle-style {
        width: 100%;
        margin-top: 0rem;
        margin-bottom: 0.1rem;
        flex-direction: column;
        text-align: @((ws.IsLargeScreen) ? "start" : "center");
        justify-content: @((ws.IsLargeScreen) ? "start" : "center");
    }
</style>


@code {

    [CascadingParameter]
    public LoginState? LoginState { get; set; }
    [Parameter]
    [EditorRequired]
    public string? Title { get; set; }
    [Parameter]
    public string Subtitle { get; set; } = string.Empty;
    [Parameter]
    [EditorRequired]
    public string? HelpTopic { get; set; }
    [Parameter]
    public HelpActivationStyle ActivationStyle { get; set; }
    [Parameter]
    public string ButtonCssClass { get; set; } = "";
    [Parameter]
    public string TitleCssClass { get; set; } = "flex-grow-0";
    [Parameter]
    public string ButtonIconCssClass { get; set; } = "h5 bi bi-question-circle-fill fluent-primary";
    [Parameter]
    public string HelpButtonIconCssClass { get; set; } = "h5 bi bi-question-circle-fill";
    [Parameter]
    public bool IncludeTableOfContents { get; set; } = false;
    [Parameter]
    public bool IsVersionButton { get; set; } = false;
    [Parameter]
    public EventCallback<bool> ShowNewSoftwareUpdateFlyout { get; set; }
    [Parameter]
    public EventCallback Closed { get; set; }

    public string? windowWidth { get; set; }

    DxWindow? helpWindow;
    string? helpFile;
    string? standardWidth;

    SystemSettings? settings;
    bool isReady;
    string? inMaintenanceMessage = default;
    string? informationMessage = default;
    MarkupString? TwoFactorWarningMessage = default;
    string? tenantId;
    string versionDetails = "version-details";
    string? savedVersion;
    bool isFlyoutOpen;

    const string IN_MAINTENANCE = "Warning: You are in Member Portal Maintenance Mode";

    protected override async Task OnInitializedAsync()
    {
        using (var dbc = await U3Adbfactory.CreateDbContextAsync())
        {
            TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
            tenantId = textInfo.ToTitleCase(dbc.TenantInfo.Identifier!);
            settings = await dbc.SystemSettings.FirstOrDefaultAsync();
            if (settings != null)
            {
                if (settings.InMaintenanceTill != null)
                {
                    inMaintenanceMessage = IN_MAINTENANCE;
                }

                var currentTerm = await BusinessRule.CurrentEnrolmentTermAsync(dbc);
                if (currentTerm == null)
                {
                    inMaintenanceMessage = IN_MAINTENANCE;
                }
                else
                {
                    if (BusinessRule.IsRandomAllocationTerm(currentTerm, settings))
                    {
                        var today = dbc.GetLocalTime().Date;
                        DateTime allocationDate = BusinessRule.GetThisTermAllocationDay(currentTerm, settings);
                        int days = (int)(allocationDate - today).TotalDays;
                        if (days > 0 && days < 8)
                        {
                            informationMessage = $"Reminder: Random Enrolment Allocation in {days} days: {allocationDate.ToString(constants.FULL_DAY_DATE_FORMAT)}.";
                        }
                    }
                }

                if (BusinessRule.IsEnrolmentBlackoutPeriod(settings!))
                {
                    informationMessage = $"Reminder: Enrolment email blackout until {dbc.GetLocalTime(settings!.EnrolmentBlackoutEndsUTC.GetValueOrDefault()).ToString(constants.SHORT_DAY_AND_TIME_FORMAT)}";
                }
            }
        }
        isReady = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Check2FA();
            savedVersion = await localStorage.GetItemAsync<string>(versionDetails);
            isFlyoutOpen = (IsVersionButton && (string.IsNullOrEmpty(savedVersion) || savedVersion != Title));
            await ShowNewSoftwareUpdateFlyout.InvokeAsync(isFlyoutOpen);
        }
    }


    async Task Check2FA()
    {
        if (LoginState is not null)
        {
            bool isDesktop = false;
            using var dbc = await U3Adbfactory.CreateDbContextAsync();
            var value = await js.InvokeAsync<string?>("GetSessionState", "isU3ADesktop");
            if (!string.IsNullOrWhiteSpace(value) && bool.TryParse(value, out bool isDesktopValue))
            {
                isDesktop = isDesktopValue;
            }
            if (isDesktop)
            {
                // Desktop app does not require 2FA, so skip this check
                return;
            }
            if (!string.IsNullOrWhiteSpace(LoginState.LoginEmail))
            {
                if (await BusinessRule.IsTwoFactorRequiredAsync(dbc, config, LoginState.LoginEmail))
                {
                    var days = await BusinessRule.TwoFactorGracePeriodRemainingAsync(dbc, LoginState.LoginEmail);
                    if (days > 0)
                    {
                        TwoFactorWarningMessage = new MarkupString($"Reminder: Two Factor Authentication is required in <b>{days}</b> days.");
                    }
                    else
                    {
                        navMan.NavigateTo("Account/Manage/TwoFactorAuthentication", forceLoad: true);
                    }
                }
            }
        }
    }

    public async Task ShowTopicAsync(string WindowWidth)
    {
        this.windowWidth = WindowWidth;
        await ShowTopicAsync();
    }

    public async Task ShowTopicAsync()
    {
        await saveState();
        standardWidth = (IncludeTableOfContents) ? "max(60vw, 400px)" : "max(40vw, 400px)";
        if (string.IsNullOrWhiteSpace(windowWidth)) { windowWidth = standardWidth; }
        if (helpWindow!.Visible) { await helpWindow.CloseAsync(); }
        helpFile = $"{navMan.BaseUri}/help/index.html?{HelpTopic}";
        await helpWindow.ShowAsync();
    }

    async Task saveState()
    {
        if (IsVersionButton)
        {
            savedVersion = Title;
            await localStorage.SetItemAsync(versionDetails, savedVersion);
            isFlyoutOpen = false;
            StateHasChanged();
        }
    }

    async Task OnClosed()
    {
        standardWidth = windowWidth;
        await Closed.InvokeAsync();
    }


}
