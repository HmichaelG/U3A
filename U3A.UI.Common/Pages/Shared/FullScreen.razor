@inject IJSRuntime js
@inject WorkStation ws

<div id="fullscreen-element" class="d-flex normalscreen">
    @ContentTemplate
    <DxButton Click="@OnClick" Visible="@(!HideToggle)"
              tooltip="Click to display full screen"
              CssClass="toggle-button"
              IconCssClass="bi bi-arrows-fullscreen"
              RenderStyle="ButtonRenderStyle.Secondary" />
</div>

<style>
    .toggle-button {
        z-index: 1049; /* dxPopup z-index = 1050 */
        height: 1.5rem;
        width: 1.5rem;
        top: @((ws.UseTopMenu) ? "3rem" : "0px");
        right: 0;
        position: absolute;
        opacity: 1;
    }

    .fullscreen {
        z-index: 1048; 
        width: 100%;
        padding-right: 1rem;
        height: 100dvh;
        top: 0px;
        left: 0px;
        position: absolute;
        opacity: 1;
    }

    .normalscreen {
        height: calc(100dvh - @(ws.UseTopMenu ? $"{currentDisplayOffset + 4}rem" : $"{currentDisplayOffset}rem") );
    }

</style>

@code {
    [Parameter]
    public RenderFragment? ContentTemplate { get; set; } = default;
    [Parameter]
    public bool HideToggle { get; set; } = false;
    [Parameter]
    public double DisplayOffset { get; set; } = 8;

    /// <summary>
    /// An alternate display offset to use when a component is collapsed on the page.
    /// </summary>
    [Parameter]
    public double AlternateDisplayOffset { get; set; } = 10;


    bool isFullscreen = false;
    bool isRefresh;
    double currentDisplayOffset;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (!isRefresh) currentDisplayOffset = DisplayOffset;
    }

    async Task OnClick()
    {
        await js.InvokeVoidAsync("toggleFullscreen");
        isFullscreen = !isFullscreen;
        await RefreshLayout();
    }

    public async Task RefreshLayout(bool UseAlternateDisplayOffset = false)
    {
        isRefresh = true;
        currentDisplayOffset = UseAlternateDisplayOffset
                                    ? AlternateDisplayOffset
                                    : DisplayOffset;
        await InvokeAsync(StateHasChanged);
    }
}
