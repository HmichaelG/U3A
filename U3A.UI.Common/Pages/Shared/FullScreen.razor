@inject IJSRuntime js
@inject WorkstationService ws

<div id="fullscreen-element" class="@($"d-flex {screenClass}")">
    <DxButton Click="@OnClick" Visible="@(!HideToggle)"
              tooltip="Click to display full screen"
              CssClass="toggle-button"
              IconCssClass="bi bi-arrows-fullscreen"
              RenderStyle="ButtonRenderStyle.Secondary" />
        @ContentTemplate
</div>

<style>
    .toggle-button {
        z-index: 2;
        height: 1.5rem;
        width: 1.5rem;
        top: @((ws.UseTopMenu) ? "3rem" : "2px");
        right: @ToggleButtonRightSideOffset;
        position: fixed;
        opacity: 1;
    }

    .fullscreen {
        z-index: 98;
        width: 100% !important;
        padding-left: 0.5rem;
        padding-right: 0.5rem;
        padding-top: 1.75rem;
        padding-bottom: 0.25rem;
        background-color: var(--DS-color-surface-primary-subdued-rest);
        height: 100dvh !important;
        top: 0px;
        left: 0px;
        position: fixed;
        opacity: 1;
    }

    .normalscreen {
        height: calc(100dvh - @(ws.UseTopMenu ? $"{currentDisplayOffset + 4}rem" : $"{currentDisplayOffset}rem") );
    }

</style>

@code {
    [Parameter]
    public RenderFragment? ContentTemplate { get; set; } = default;

    /// <summary>
    /// Hides the toggle button for full screen mode.
    /// </summary>
    [Parameter] public bool HideToggle { get; set; } = false;

    /// <summary>
    /// Vertical offset in Rem to apply to the component when it is displayed in normal mode.
    /// </summary>
    [Parameter] public double DisplayOffset { get; set; } = 8;

    /// <summary>
    /// An alternate display offset to use when a component is collapsed on the page.
    /// </summary>
    [Parameter] public double AlternateDisplayOffset { get; set; } = 10;

    /// <summary>
    /// Indent from the right side of the screen for the toggle button.
    /// </summary>
    [Parameter] public string ToggleButtonRightSideOffset { get; set; } = "2px";

    bool isFullscreen = false;
    bool isRefresh;
    double currentDisplayOffset;
    string screenClass => isFullscreen ? "fullscreen" : "normalscreen";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (!isRefresh) currentDisplayOffset = DisplayOffset;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender) StateHasChanged();
    }

    async Task OnClick()
    {
        isFullscreen = !isFullscreen;
        await RefreshLayout();
    }
    public async Task ResetFullScreen()
    {
        if (isFullscreen)
        {
            isFullscreen = !isFullscreen;
            await RefreshLayout();
        }
    }


    public async Task RefreshLayout(bool UseAlternateDisplayOffset = false)
    {
        isRefresh = true;
        currentDisplayOffset = UseAlternateDisplayOffset
                                    ? AlternateDisplayOffset
                                    : DisplayOffset;
        await InvokeAsync(StateHasChanged);
    }
}
