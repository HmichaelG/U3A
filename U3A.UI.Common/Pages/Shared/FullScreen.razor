@inject IJSRuntime js

<div id="fullscreen-element" class="d-flex normalscreen">
    @ContentTemplate
    <DxButton Click="@OnClick" Visible="@(!HideToggle)"
              tooltip="Clcik to display full screen"
              CssClass="toggle-button"
              IconCssClass="bi bi-arrows-fullscreen"             
              RenderStyle="ButtonRenderStyle.Secondary" />
</div>

<style>
    .toggle-button {
        height: 1.5rem;
        width: 1.5rem;
        top: 1px;
        right: 1px;
        position:sticky; 
        position: -webkit-sticky;
        opacity: 1;
    }
    .fullscreen {
        z-index: 1049;                  /* dxPopup z-index = 1050 */
        width: calc(100% + 1.5rem);
        height: 100dvh;
        top: 0px;
        left: 0px;
        position: absolute;
        opacity: 1;
    }

    .normalscreen {
        height: calc(100dvh - @(Workstation.UseTopMenu ? $"{DisplayOffset + 4}rem" : $"{DisplayOffset}rem"));
        width: calc(100% + 1.5rem);
    }

</style>

@code {
    [Parameter]
    public RenderFragment ContentTemplate { get; set; } = default;
    [Parameter]
    public bool HideToggle { get; set; } = false;
    [Parameter]
    public double DisplayOffset { get; set; } = 8;

    bool isFullscreen = false;

    async Task OnClick()
    {
        await js.InvokeVoidAsync("toggleFullscreen");
        isFullscreen = !isFullscreen;
        await RefreshLayout(); 
    }

    public async Task RefreshLayout()
    {
        await InvokeAsync(StateHasChanged);
    }
}
