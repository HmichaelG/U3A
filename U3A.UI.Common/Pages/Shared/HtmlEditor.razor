@using System.Xml
@using System.Text
@using AngleSharp
@using AngleSharp.Dom
@using AngleSharp.Html
@using AngleSharp.Html.Dom
@using AngleSharp.Html.Parser



<MessageBox @ref=@messageBox />

<DxTabs style="width:100%">
    <DxTabPage Text="Editor">
        <DxHtmlEditor AllowSoftLineBreak="true"
                      TableResizeEnabled="true"
                      MediaResizeEnabled="false"
                      Markup="@Markup" MarkupChanged="@OnMarkupChanged"
                      Width="@Width" Height="@Height" />
        <div class="pt-1">
            <small>
                <b>Hint:</b> <span class=key-style>Enter</span> = paragraph break;
                <span class=key-style>SHIFT</span> +
                <span class=key-style>Enter</span> = line break.
            </small>
        </div>
    </DxTabPage>
    <DxTabPage Text="Code" Click="() => {Markup = PrettyPrint(Markup); StateHasChanged();}">
        <DxMemo @bind-Text="@Markup"
                Rows="20"
                ReadOnly="@(!isCodeEditable)" />
        <DxButton Text="Edit" Click="OnEditClicked" CssClass="mt-1" />
        <div class="text-danger">@errorText</div>
    </DxTabPage>
</DxTabs>

<style>
    .key-style {
        color: cadetblue;
        padding: 2px;
        border: 1px solid cadetblue;
        border-radius: 3px;
    }
</style>
@code {

    [Parameter, EditorRequired]
    public required string Markup { get; set; }
    [Parameter]
    public EventCallback<string> MarkupChanged { get; set; }

    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string? Height { get; set; }

    MessageBox? messageBox;
    bool isCodeEditable;
    static string errorText = "";

    protected override Task OnInitializedAsync()
    {
        Markup = AdjustAndMinifyHtml(Markup);
        return base.OnInitializedAsync();
    }

    static IHtmlDocument? ParseHtml(string html)
    {
        IHtmlDocument result = null!;
        var parser = new HtmlParser();
        try
        {
            result = parser.ParseDocument(html);
        }
        catch (Exception e) { errorText = e.ToString(); }
        return result;
    }

    async Task OnMarkupChanged(string newValue)
    {
        Markup = newValue;
        await MarkupChanged.InvokeAsync(Markup);
    }

    public static string PrettyPrint(string html)
    {
        string result = string.Empty;
        if (string.IsNullOrWhiteSpace(html)) return result;
        var document = ParseHtml(html);
        if (document is null) return result;
        using (var writer = new StringWriter())
        {
            var pf = new PrettyMarkupFormatter();
            document.ToHtml(writer, pf);
            result = writer.ToString();
        }
        return result;
    }

    const string DEFAULT_STYLE = @"
                /* The following styles are automatically appended */
                p:empty {
                    display: none;
                }
";

    // public static string RemoveStyle(string html)
    // {
    //     string result = string.Empty;
    //     if (string.IsNullOrWhiteSpace(html)) return result;
    //     using (var document = ParseHtml(html))
    //     {
    //         // replace any STYLE with the default style
    //         if (document is null) return result;
    //         foreach (var current in document.Head!.Children
    //                         .Where(c => c is IHtmlStyleElement)
    //                         .Reverse())
    //         {
    //             if (current != null)
    //             {
    //                 current.Remove();
    //             }
    //         }
    //         result = document.Minify();
    //     }
    //     return result;
    // }

    public static string AdjustAndMinifyHtml(string html)
    {
        string result = string.Empty;
        if (string.IsNullOrWhiteSpace(html)) return result;
        using (var document = ParseHtml(html))
        {
            // replace <p><br><p> sequence with <p>
            if (document is null) return result;
            if (document.Body!.ChildNodes.Count() > 3)
            {
                List<IElement> deletions = new();
                foreach (var current in document.Body!.Children)
                {
                    if (current.ChildElementCount == 1 && current.FirstElementChild is IHtmlBreakRowElement)
                    {
                        deletions.Add(current);
                    }
                }
                foreach (var element in deletions)
                {
                    document.Body.RemoveElement(element);
                }
            }
            result = document.Minify();
        }
        return result;
    }

    public static string MinifyHtml(string html)
    {
        string result = string.Empty;
        if (string.IsNullOrWhiteSpace(html)) return result;
        using (var document = ParseHtml(html))
        {
            if (document is null) return result;
            result = document.Minify();
        }
        return result;
    }

    async Task OnEditClicked()
    {
        isCodeEditable = await messageBox!.ShowAsync("Advanced Only",
                                                        @"<p>Editing code requires knowledge of HTML programming.
                Errors in code may render unpredictable results or system errors.</p>
                Do you wish to continue?");
    }

}
