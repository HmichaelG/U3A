@using System.Xml
@using System.Text
@using AngleSharp
@using AngleSharp.Dom
@using AngleSharp.Html
@using AngleSharp.Html.Dom
@using AngleSharp.Html.Parser
@using DevExpress.AIIntegration.Blazor.HtmlEditor
@using DevExpress.Blazor



<MessageBox @ref=@messageBox />

<DxTabs style="width:100%">
    <DxTabPage Text="Editor">
        <DxHtmlEditor AllowSoftLineBreak="true"
                      TableResizeEnabled="true"
                      MediaResizeEnabled="false"
                      @bind-Markup="@Markup"
                      @bind-Markup:after="@OnMarkupChanged"
                      Width="@Width" Height="@Height">
            <AdditionalItems>
                @if (!DisableAIExtensions)
                {
                    <SummarizeAIToolbarItem />
                    <ExplainAIToolbarItem />
                    <ProofreadAIToolbarItem />
                    <ExpandAIToolbarItem />
                    <ShortenAIToolbarItem />
                    <AskAssistantAIToolbarItem />
                    <ChangeStyleAIToolbarItem />
                    <ChangeToneAIToolbarItem />
                    <TranslateAIToolbarItem Languages="@("English, German, French, Chinese")" />
                }
            </AdditionalItems>
        </DxHtmlEditor>
        <div class="pt-1">
            <small>
                <b>Hint:</b> <span class=key-style>Enter</span> = paragraph break;
                <span class=key-style>SHIFT</span> +
                <span class=key-style>Enter</span> = line break.
            </small>
        </div>
    </DxTabPage>
    <DxTabPage Text="Code" Click="() => {Markup = PrettyPrint(Markup);
                                            isCodeEditable=false;
                                            StateHasChanged();}">
        <DxMemo @bind-Text="@Markup"
                @bind-Text:after=@OnEditorTextChanged
                Rows="20"
                ReadOnly="@(!isCodeEditable)" />
        <DxButton Text="Edit" Click="OnEditClicked" CssClass="mt-1" />
        <div class="text-fl-danger">@errorText</div>
    </DxTabPage>
</DxTabs>

<style>
    .key-style {
        color: cadetblue;
        padding: 2px;
        border: 1px solid cadetblue;
        border-radius: 3px;
    }
</style>
@code {

    [Parameter, EditorRequired]
    public required string Markup { get; set; }
    [Parameter]
    public EventCallback<string> MarkupChanged { get; set; }

    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string? Height { get; set; }

    [Parameter]
    public bool DisableAIExtensions { get; set; }

    MessageBox? messageBox;
    bool isCodeEditable;
    static string errorText = "";

    protected override Task OnInitializedAsync()
    {
        Markup = AdjustAndMinifyHtml(Markup);
        return base.OnInitializedAsync();
    }

    static IHtmlDocument? ParseHtml(string html)
    {
        IHtmlDocument result = null!;
        var parser = new HtmlParser();
        try
        {
            result = parser.ParseDocument(html);
        }
        catch (Exception e) { errorText = e.ToString(); }
        return result;
    }

    async Task OnMarkupChanged()
    {
        await MarkupChanged.InvokeAsync(Markup);
    }

    async Task OnEditorTextChanged()
    {
        await MarkupChanged.InvokeAsync(Markup);
    }


    public static string PrettyPrint(string html)
    {
        string result = string.Empty;
        if (string.IsNullOrWhiteSpace(html)) return result;
        var document = ParseHtml(html);
        if (document is null) return result;
        using (var writer = new StringWriter())
        {
            var pf = new PrettyMarkupFormatter();
            document.ToHtml(writer, pf);
            result = writer.ToString();
        }
        return result;
    }

    public static string AdjustAndMinifyHtml(string html)
    {
        string result = string.Empty;
        if (string.IsNullOrWhiteSpace(html)) return result;
        using (var document = ParseHtml(html))
        {
            // replace <p><br><p> sequence with <p>
            if (document is null) return result;
            if (document.Body!.ChildNodes.Count() > 3)
            {
                List<IElement> deletions = new();
                foreach (var current in document.Body!.Children)
                {
                    if (current.ChildElementCount == 1 && current.FirstElementChild is IHtmlBreakRowElement)
                    {
                        deletions.Add(current);
                    }
                }
                foreach (var element in deletions)
                {
                    document.Body.RemoveElement(element);
                }
            }
            result = document.Minify();
        }
        return result;
    }

    async Task OnEditClicked()
    {
        isCodeEditable = await messageBox!.ShowAsync("Advanced Only",
                       @"<p>Editing code requires knowledge of HTML programming.
                    Errors in code may render unpredictable results or system errors.</p>
                    Do you wish to continue?");
    }

}
