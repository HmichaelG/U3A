@using System.Xml
@using System.Text
@using AngleSharp
@using AngleSharp.Dom
@using AngleSharp.Html
@using AngleSharp.Html.Dom
@using AngleSharp.Html.Parser
@using Ganss.Xss
@using DevExpress.AIIntegration.Blazor.HtmlEditor
@using DevExpress.Blazor



<MessageBox @ref=@messageBox />

<DxTabs CssClass="w-100">
    <DxTabPage Text="Editor">
        <DxHtmlEditor AllowSoftLineBreak="true"
                      TableResizeEnabled="true"
                      MediaResizeEnabled="false"
                      ValidationMessage="@errorText"
                      ValidationMessagePosition="HtmlEditorValidationMessagePosition.Top"
                      IsValid="@isValid"
                      BindMarkupMode="HtmlEditorBindMarkupMode.OnDelayedInput"
                      @bind-Markup="@Markup"
                      @bind-Markup:after="@OnMarkupChanged"
                      Width="@Width" Height="@Height">
            <AdditionalItems>
                @if (!DisableAIExtensions)
                {
                    <SummarizeAIToolbarItem />
                    <ExplainAIToolbarItem />
                    <ProofreadAIToolbarItem />
                    <ExpandAIToolbarItem />
                    <ShortenAIToolbarItem />
                    <AskAssistantAIToolbarItem />
                    <ChangeStyleAIToolbarItem />
                    <ChangeToneAIToolbarItem />
                    <TranslateAIToolbarItem Languages="@("English, German, French, Chinese")" />
                }
            </AdditionalItems>
        </DxHtmlEditor>
            <small>
            <div class="py-1">Always <DxButton Text="Sanitise" Click="@OnSanitise" /> after you copy / paste text.</div>
                <div>
                    <b>Hint:</b> <span class=key-style>Enter</span> = paragraph break;
                <span class=key-style>SHIFT</span> +
                <span class=key-style>Enter</span> = line break.
                </div>
            </small>
    </DxTabPage>
    <DxTabPage Text="Code" Click="() => {Markup = PrettyPrint(Markup);
                                            isCodeEditable=false;
                                            StateHasChanged();}">
        <DxMemo @bind-Text="@Markup" CssClass="w-100"
                @bind-Text:after=@OnEditorTextChanged
                Rows="20"
                ReadOnly="@(!isCodeEditable)" />
        <DxButton Text="Edit" Click="OnEditClicked" CssClass="mt-1" />
        <div class="text-fl-danger">@errorText</div>
    </DxTabPage>
</DxTabs>

<style>
    .key-style {
        color: cadetblue;
        padding: 2px;
        border: 1px solid cadetblue;
        border-radius: 3px;
    }
</style>
@code {
    const int MAX_IMAGE_SIZE = 60; // in KB

    [Parameter, EditorRequired]
    public required string Markup { get; set; }
    [Parameter]
    public EventCallback<string> MarkupChanged { get; set; }

    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string? Height { get; set; }

    [Parameter]
    public bool DisableAIExtensions { get; set; }

    MessageBox? messageBox;
    bool isCodeEditable;
    static string errorText = "";
    bool isValid;

    protected override Task OnInitializedAsync()
    {
        isValid = true;
        return base.OnInitializedAsync();
    }

    async Task OnMarkupChanged()
    {
        ValidateImages();
        if (isValid) 
        { 
            await MarkupChanged.InvokeAsync(Markup);
        }
    }

    async Task OnEditorTextChanged()
    {
        ValidateImages();
        if (isValid)
        {
            await MarkupChanged.InvokeAsync(Markup);
        }
    }

    void ValidateImages()
    {
        isValid = true;
        if (Markup is null) return;
        var document = ParseHtml(Markup);
        if (document is null) return;
        var images = document.Images;
        foreach (var image in images)
        {
            //if source is embedded image, ensure it is base64 encoded & less than 100KB
            if (image.Source == null) continue;
            var imageLength = image.Source.Length * 0.754;
            if (image.Source is not null && image.Source.StartsWith("data:image/") && imageLength > MAX_IMAGE_SIZE * 1024)
            {
                errorText = $"Your image is {(imageLength / 1024).ToString("n2")}KB in size. Please use an image smaller than {MAX_IMAGE_SIZE}KB.";
                isValid = false;
                return;
            }
        }
        errorText = string.Empty;
    }

    public static string PrettyPrint(string html)
    {
        string result = string.Empty;
        if (string.IsNullOrWhiteSpace(html)) return result;
        var document = ParseHtml(html);
        if (document is null) return result;
        using (var writer = new StringWriter())
        {
            var pf = new PrettyMarkupFormatter();
            document.ToHtml(writer, pf);
            result = writer.ToString();
        }
        return result;
    }

    public static (string WithImages, string WithoutImages) AdjustAndMinifyHtml(string Html)
    {
        (string WithImages, string WithoutImages) result;
        if (string.IsNullOrWhiteSpace(Html)) return (string.Empty,string.Empty);
        var minified = RemoveEmptyElements(Html);
        result.WithImages = minified;
        var sanitizer = new HtmlSanitizer();
        sanitizer.AllowedTags.Remove("img");
        using var documentWithoutImages = ParseHtml( sanitizer.SanitizeDocument(minified, ""));
        result.WithoutImages = documentWithoutImages?.Minify() ?? string.Empty;
        return result;
    }

    private static readonly string[] VoidElements = { "img", "hr", "input", "iframe", "embed", "source" };

    public static string RemoveEmptyElements(string html)
    {
        var tagsToCheck = new[] { "p", "span", "div" };

        var parser = new HtmlParser();
        var document = parser.ParseDocument(html);
        if (document is null) return html;
        document.Minify();
        foreach (var tag in tagsToCheck)
        {
            var elements = document.QuerySelectorAll(tag).ToList();
            foreach (var element in elements)
            {
                if (IsEffectivelyEmpty(element))
                {
                    element.Remove();
                }
            }
        }

        return document.ToHtml();
    }

    private static bool IsEffectivelyEmpty(IElement element)
    {
        // Check for non-whitespace text
        if (!string.IsNullOrWhiteSpace(element.TextContent))
            return false;

        // Check for meaningful void/self-closing elements
        if (element.Children.Any(child => VoidElements.Contains(child.TagName.ToLower())))
            return false;

        // Recursively check children
        return !element.Children.Any(child => !IsEffectivelyEmpty(child));
    }

    static IHtmlDocument? ParseHtml(string html)
    {
        IHtmlDocument result = null!;
        var parser = new HtmlParser();
        try
        {
            result = parser.ParseDocument(html);
        }
        catch (Exception e) { errorText = e.ToString(); }
        return result;
    }

    async Task OnEditClicked()
    {
        isCodeEditable = await messageBox!.ShowAsync("Advanced Only",
                       @"<p>Editing code requires knowledge of HTML programming.
                    Errors in code may render unpredictable results or system errors.</p>
                    Do you wish to continue?");
    }

    async Task OnSanitise()
    {
        var sanitizer = new HtmlSanitizer();
        sanitizer.AllowedCssProperties.Remove("font-family");
        sanitizer.AllowedCssProperties.Remove("font-size");
        sanitizer.AllowedCssProperties.Remove("color");
        sanitizer.AllowedCssProperties.Remove("background-color");
        Markup = sanitizer.SanitizeDocument(Markup, "");
        await messageBox!.ShowAsync("Sanitise complete", "Your html code has been successfully sanitised.");
    }
}
