@using System.Xml
@using System.Text
@using AngleSharp
@using AngleSharp.Dom
@using AngleSharp.Html
@using AngleSharp.Html.Dom
@using AngleSharp.Html.Parser
@using Ganss.Xss
@using DevExpress.AIIntegration.Blazor.HtmlEditor
@using DevExpress.Blazor
@using System.Text.RegularExpressions
@using System.Globalization



<MessageBox @ref=@messageBox />

<DxTabs CssClass="w-100">
    <DxTabPage Text="Editor">
        <DxHtmlEditor AllowSoftLineBreak="true"
                      TableResizeEnabled="true"
                      MediaResizeEnabled="false"
                      ValidationMessage="@errorText"
                      ValidationMessagePosition="HtmlEditorValidationMessagePosition.Top"
                      IsValid="@isValid"
                      BindMarkupMode="HtmlEditorBindMarkupMode.OnDelayedInput"
                      @bind-Markup="@Markup"
                      @bind-Markup:after="@OnMarkupChanged"
                      Width="@Width" Height="@Height">
            <AdditionalItems>
                @if (!DisableAIExtensions)
                {
                    <SummarizeAIToolbarItem />
                    <ExplainAIToolbarItem />
                    <ProofreadAIToolbarItem />
                    <ExpandAIToolbarItem />
                    <ShortenAIToolbarItem />
                    <AskAssistantAIToolbarItem />
                    <ChangeStyleAIToolbarItem />
                    <ChangeToneAIToolbarItem />
                    <TranslateAIToolbarItem Languages="@("English, German, French, Chinese")" />
                }
            </AdditionalItems>
        </DxHtmlEditor>
            <small>
            <div class="py-1">Always <DxButton Text="Sanitise" Click="@OnSanitise" /> after you copy / paste text.</div>
                <div>
                    <b>Hint:</b> <span class=key-style>Enter</span> = paragraph break;
                <span class=key-style>SHIFT</span> +
                <span class=key-style>Enter</span> = line break.
                </div>
            </small>
    </DxTabPage>
    <DxTabPage Text="Code" Click="() => {Markup = HtmlHelpers.PrettyPrint(Markup);
                                            isCodeEditable=false;
                                            StateHasChanged();}">
        <DxMemo @bind-Text="@Markup" CssClass="w-100"
                @bind-Text:after=@OnEditorTextChanged
                Rows="20"
                ReadOnly="@(!isCodeEditable)" />
        <DxButton Text="Edit" Click="OnEditClicked" CssClass="mt-1" />
        <div class="text-fl-danger">@errorText</div>
    </DxTabPage>
</DxTabs>

<style>
    .key-style {
        color: cadetblue;
        padding: 2px;
        border: 1px solid cadetblue;
        border-radius: 3px;
    }
</style>
@code {

    [Parameter, EditorRequired]
    public required string Markup { get; set; }
    [Parameter]
    public EventCallback<string> MarkupChanged { get; set; }

    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string? Height { get; set; }

    [Parameter]
    public bool DisableAIExtensions { get; set; }

    MessageBox? messageBox;
    bool isCodeEditable;
    static string errorText = "";
    bool isValid;

    protected override Task OnInitializedAsync()
    {
        isValid = true;
        return base.OnInitializedAsync();
    }

    async Task OnMarkupChanged()
    {
        ValidateImages();
        if (isValid) 
        { 
            await MarkupChanged.InvokeAsync(Markup);
        }
    }

    async Task OnEditorTextChanged()
    {
        ValidateImages();
        if (isValid)
        {
            await MarkupChanged.InvokeAsync(Markup);
        }
    }

    void ValidateImages()
    {
        var result = HtmlHelpers.ValidateImages(Markup);
        isValid = result.isValid;
        errorText = result.errorText;
    }


    async Task OnEditClicked()
    {
        isCodeEditable = await messageBox!.ShowAsync("Advanced Only",
                       @"<p>Editing code requires knowledge of HTML programming.
                    Errors in code may render unpredictable results or system errors.</p>
                    Do you wish to continue?");
    }

    async Task OnSanitise()
    {
        Markup = HtmlHelpers.SanitizeHtml(Markup);
        await messageBox!.ShowAsync("Sanitise complete", "Your html code has been successfully sanitised.");
    }
}