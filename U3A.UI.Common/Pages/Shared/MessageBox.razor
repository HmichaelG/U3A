@inject Blazored.LocalStorage.ILocalStorageService localStorage

<DxPopup Visible="@PopupVisible" @ref="@messageBox" Width="@PopupWidth"
ApplyBackgroundShading="true"         
Closed="@OnNegativeButtonClicked"
CloseOnEscape="false"
CloseOnOutsideClick="false"
ShowFooter="true"
AllowDrag=true
AllowResize=true
HeaderText=@Caption>
    <BodyContentTemplate Context="PopupContext">
        @TextTemplate
        <div class="messagebox-body-height">
            @(new MarkupString(mMessage ?? string.Empty))
        </div>
    </BodyContentTemplate>
    <FooterContentTemplate>
        @if (mLayoutKey != null)
        {
            <DxCheckBox @bind-Checked=@dontShowAgain @bind-Checked:after=@SaveDontShowResponse
            Alignment="CheckBoxContentAlignment.Left"
            LabelPosition="LabelPosition.Right" CssClass="me-2">Don't show again</DxCheckBox>
        }
        <DxButton CssClass="popup-button" Visible="@mShowOkButton"
        RenderStyle="ButtonRenderStyle.Primary"
        Text="@mOKButtonText"
        Click="@OnAffirmativeButtonClicked" />
        <DxButton CssClass="popup-button ms-1" Visible="@mShowNoButton"
        RenderStyle="ButtonRenderStyle.Light"
        Text="@mNoButtonText"
        Click="@OnNoButtonClicked" />
        <DxButton CssClass="popup-button ms-1" Visible="@mShowCancelButton"
        RenderStyle="ButtonRenderStyle.Secondary"
        Text="@mCancelButtonText"
        Click="@OnNegativeButtonClicked" />
    </FooterContentTemplate>
</DxPopup>

<style>
    .messagebox-body-height {
    max-height: 75vh;
    overflow: auto;
    }
</style>

@code {

    [Parameter]
    public bool PopupVisible { get; set; }

    [Parameter]
    public bool IsInputBox { get; set; } = false;

    [Parameter]
    public string Caption { get; set; } = string.Empty;


    [Parameter]
    public string PopupWidth { get; set; } = "auto";
    [Parameter]
    public RenderFragment? TextTemplate { get; set; } = default;
    [Parameter]
    public EventCallback AffirmativeButtonClicked { get; set; }
    [Parameter]
    public EventCallback NegativeButtonClicked { get; set; }
    [Parameter]
    public EventCallback NoButtonClicked { get; set; }
    [Parameter]
    public EventCallback OnShown { get; set; }

    public MessageBoxDialogResult MessageBoxResult { get; set; }

    DxPopup? messageBox;

    string? mOKButtonText { get; set; }
    string? mNoButtonText { get; set; }
    string? mCancelButtonText { get; set; }
    string? mMessage { get; set; }
    string? mLayoutKey { get; set; }
    bool mShowCancelButton { get; set; }
    bool mShowOkButton { get; set; } = true;
    bool mShowNoButton { get; set; } = false;

    bool dontShowAgain { get; set; }

    TaskCompletionSource<bool>? tcs;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (IsInputBox)
        {
            mOKButtonText = "Ok";
            mCancelButtonText = "Cancel";
            mShowOkButton = true;
            mShowCancelButton = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await OnShown.InvokeAsync();
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task SetPopupWidth(string Width)
    {
        PopupWidth = Width;
        await InvokeAsync(StateHasChanged);
    }

    public async Task<bool> ShowAsync(MessageBoxArgs args)
    {
        mOKButtonText = args.OKButtonText;
        mNoButtonText = args.NoButtonText;
        mCancelButtonText = args.CancelButtonText;
        mShowCancelButton = args.ShowCancelButton;
        mShowOkButton = args.ShowOkButton;
        mShowNoButton = args.ShowNoButton;
        Caption = args.Caption;
        mMessage = args.Message;
        mLayoutKey = args.LayoutKey;
        if (mLayoutKey != null)
        {
            dontShowAgain = await localStorage.GetItemAsync<bool>(mLayoutKey);
            if (dontShowAgain) { await OnAffirmativeButtonClicked(); return true; }
        }
        return await ShowAsync();
    }

    async Task SaveDontShowResponse()
    {
        await localStorage.SetItemAsync<bool>(mLayoutKey!, dontShowAgain);
    }

    public async Task<bool> ShowOkOnlyAsync(string Caption, string Message = "")
    {
        mOKButtonText = "Ok";
        mShowOkButton = true;
        mShowCancelButton = false;
        this.Caption = Caption;
        mMessage = Message;
        return await ShowAsync();
    }

    public async Task<bool> ShowAsync(string Caption, string Message)
    {
        mOKButtonText = "Ok";
        mCancelButtonText = "Cancel";
        mShowOkButton = true;
        mShowCancelButton = true;
        this.Caption = Caption;
        mMessage = Message;
        return await ShowAsync();
    }

    public Task<bool> ShowAsync()
    {
        PopupVisible = true;
        tcs = new TaskCompletionSource<bool>();
        tcs.Task.ContinueWith(_ =>
        {
            PopupVisible = false;
        });
        StateHasChanged();
        return tcs.Task;
    }

    async Task OnAffirmativeButtonClicked()
    {
        await AffirmativeButtonClicked.InvokeAsync();
        PopupVisible = false;
        tcs?.TrySetResult(true);
        MessageBoxResult = MessageBoxDialogResult.OkButtonClicked;
    }

    async Task OnNegativeButtonClicked()
    {
        MessageBoxResult = MessageBoxDialogResult.CancelButtonClicked;
        PopupVisible = false;
        await NegativeButtonClicked.InvokeAsync();
        tcs?.TrySetResult(false);
    }

    async Task OnNoButtonClicked()
    {
        MessageBoxResult = MessageBoxDialogResult.NoButtonClicked;
        PopupVisible = false;
        await NoButtonClicked.InvokeAsync();
        tcs?.TrySetResult(false);
    }

    public async Task Close()
    {
        await Task.Run(() =>
        {
            PopupVisible = false;
        });
        await InvokeAsync(StateHasChanged);
    }

}
