@using DevExpress.Drawing
@using DevExpress.Drawing.Printing
@using Microsoft.JSInterop
@using DevExpress.Export
@using System.Drawing
@using System.Collections
@using System.Text.Json
@using DevExpress.Blazor
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Routing
@using System.Text.RegularExpressions
@using Serilog

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navMan
@inject IToastNotificationService ToastService

<DxToastProvider Name="Result" AnimationType="ToastAnimationType.Slide" ShowIcon="true" />
<MessageBox @ref=messageBox />

<NavigationLock ConfirmExternalNavigation="@(IsGridEditing())"
                OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained" hidden="@(!Visible)"
           ItemClick="OnItemClick">
    <Items>
        @CustomButtonContentAtStart
        <DxToolbarItem IconCssClass="bi bi-check2-square" Name="SelectedOnly" Text="@showSelectedOnlyText"
                       BeginGroup=true Visible="@areRowsSelectable"
                       Alignment="ToolbarItemAlignment.Left"
                       CssClass="column-chooser-button"
                       Tooltip="@showSelectedOnlyTooltip">
        </DxToolbarItem>
        <DxToolbarItem IconCssClass="bi bi-collection" Text="Group Rows..."
                       Visible="@(LinkedGrid?.GetGroupCount() > 0 && !HideGroupPanel)"
                       BeginGroup="true"
                       Alignment="ToolbarItemAlignment.Left">
            <Items>
                <DxToolbarItem IconCssClass="bi bi-arrows-collapse"
                               Name="CollapseGroups" Text="Collapse Group Rows"
                               Tooltip="Collapse grouped rows">
                </DxToolbarItem>
                <DxToolbarItem IconCssClass="bi bi-arrows-expand"
                               Name="ExpandGroups" Text="Expand Group Rows"
                               Tooltip="Expand grouped rows">
                </DxToolbarItem>
                <DxToolbarItem BeginGroup IconCssClass="bi bi-calendar3" Text="Group Dates By">
                    <Items>
                        <DxToolbarItem IconCssClass="bi bi-calendar3" Name="Day" Text="Day"
                                       Tooltip="Group dates by day">
                        </DxToolbarItem>
                        <DxToolbarItem IconCssClass="bi bi-calendar3" Name="Month" Text="Month"
                                       Tooltip="Group dates by month">
                        </DxToolbarItem>
                        <DxToolbarItem IconCssClass="bi bi-calendar3" Name="Year" Text="Year"
                                       Tooltip="Group dates by year">
                        </DxToolbarItem>
                    </Items>
                </DxToolbarItem>
            </Items>
        </DxToolbarItem>
        <DxToolbarItem IconCssClass="bi bi-collection" Text="Master/Detail" Visible=@IsMasterDetail
                       Alignment="ToolbarItemAlignment.Right"
                       BeginGroup=true>
            <Items>
                <DxToolbarItem IconCssClass="bi bi-arrows-expand"
                               Name="ShowDetails" Text="Show Detail Rows"
                               Tooltip="Show Detail rows">
                </DxToolbarItem>
                <DxToolbarItem IconCssClass="bi bi-arrows-collapse"
                               Name="HideDetails" Text="Hide Detail Rows"
                               Tooltip="Hide Detail rows">
                </DxToolbarItem>
            </Items>
        </DxToolbarItem>
        <DxToolbarItem IconCssClass="bi bi-arrows" Name="AutoFit" Text="Auto Fit"
                       BeginGroup=true
                       Alignment="ToolbarItemAlignment.Right"
                       CssClass="column-chooser-button"
                       Tooltip="Adjust column size to fit cell content">
        </DxToolbarItem>
        @if (LayoutKey == null)
        {
            <DxToolbarItem IconCssClass="bi bi-list-columns-reverse" Name="Choose" Text="Choose"
                           BeginGroup=true
                           Alignment="ToolbarItemAlignment.Right"
                           CssClass="column-chooser-button"
                           Tooltip="Customise column display">
            </DxToolbarItem>
        }
        else
        {
            <DxToolbarItem IconCssClass="bi bi-list-columns-reverse" Name="Layout" Text="Layout"
                           BeginGroup=true
                           Alignment="ToolbarItemAlignment.Right"
                           CssClass="column-chooser-button"
                           Tooltip="Customise column layout">
                <Items>
                    <DxToolbarItem IconCssClass="bi bi-list-columns-reverse"
                                   Name="Choose" Text="Choose fields"
                                   Tooltip="Choose columns to display">
                    </DxToolbarItem>
                    <DxToolbarItem IconCssClass="bi bi-floppy"
                                   Name="SaveLayout" Text="Save Layout"
                                   Tooltip="Save the current layout">
                    </DxToolbarItem>
                    <DxToolbarItem IconCssClass="bi bi-arrow-counterclockwise"
                                   Name="ResetLayout" Text="Reset Default Layout"
                                   Tooltip="Reset column layout to its default">
                    </DxToolbarItem>
                </Items>
            </DxToolbarItem>
        }
        <DxToolbarItem IconCssClass="bi bi-funnel" Name="Filter" Text="Filter"
                       BeginGroup=true
                       Alignment="ToolbarItemAlignment.Right"
                       Tooltip="Filter / search for records">
        </DxToolbarItem>
        <DxToolbarItem id="dropdown-target-container" IconCssClass="bi bi-file-spreadsheet" Text="Export"
                       BeginGroup=true
                       Alignment="ToolbarItemAlignment.Right">
            <Items>
                <DxToolbarItem IconCssClass="bi bi-file-spreadsheet" Text="To Excel"
                               Click="() => {
                                                isOpenForExcel = !isOpenForExcel;
                                                isDropDownOpen = isOpenForExcel || isOpenForPdf;
                                                reportTitle = string.Empty;
                                            }"
                               Tooltip="Export the grid to Excel">
                </DxToolbarItem>
                <DxToolbarItem IconCssClass="bi bi-file-pdf" Text="To PDF"
                               Click="() => {
                                                isOpenForPdf = !isOpenForPdf;
                                                isDropDownOpen = isOpenForExcel || isOpenForPdf;
                                                reportTitle = string.Empty;
                                            }"
                               Tooltip="Export the grid to Pdf">
                </DxToolbarItem>
            </Items>
        </DxToolbarItem>
        @CustomButtonContent
    </Items>
</DxToolbar>
<DxDropDown @bind-IsOpen="@isDropDownOpen"
            Id="dropDown-overview"
            FooterVisible="true"
            HeaderVisible="true"
            HeaderText="Export Parameters"
            PositionMode="DropDownPositionMode.Bottom"
            Width="max(25vw, 250px)"
            PositionTarget="#dropdown-target-container"
            RestrictionTarget="#dropdown-target-container"
            CloseMode="DropDownCloseMode.Close"
            PreventCloseOnPositionTargetClick="true">
    <BodyContentTemplate>
        <DxFormLayoutGroup Decoration="FormLayoutGroupDecoration.None" ColSpanMd="12">
            <DxFormLayoutItem Caption="Title" ColSpanMd="12" Context="titleContext">
                <DxTextBox @bind-Text=@reportTitle />
            </DxFormLayoutItem>
        </DxFormLayoutGroup>
        @if (isOpenForPdf)
        {
            <DxFormLayoutItem Caption="Print Portrait?"
                              ColSpanMd="12" Context="orientationContext">
                <DxCheckBox @bind-Checked=@IsPortrait />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Column Widths"
                              ColSpanMd="12" Context="orientationContext">
            <DxRadioGroup Items="@(new List<string> {DEFAULT_FIT_STYLE,"Fit contents"})"
                          @bind-Value="@fitStyle" Layout="RadioGroupLayout.Horizontal"/>
            </DxFormLayoutItem>

        }
    </BodyContentTemplate>
    <FooterContentTemplate Context="footerContext">
        <DxButton Text="Export" Click="OnDropDownClick" Enabled=@(!isExporting) />
    </FooterContentTemplate>
</DxDropDown>

@code {

    [Parameter, EditorRequired]
    public IGrid? LinkedGrid { get; set; }
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public bool HideGroupPanel { get; set; }
    [Parameter] public bool HideSearchBox { get; set; }
    [Parameter] public bool IsMasterDetail { get; set; }
    [Parameter] public bool DisableVirtualScroll { get; set; }
    [Parameter] public RenderFragment? CustomButtonContentAtStart { get; set; }
    [Parameter] public RenderFragment? CustomButtonContent { get; set; }
    [Parameter] public EventCallback ToolbarFilterClosed { get; set; }
    [Parameter] public int SpreadsheetHeaderRows { get; set; } = 1;
    [Parameter] public string? LayoutKey { get; set; }

    internal bool IsToggleExpanded { get; set; } = false;
    internal string? ExpandCollapseText { get; set; }
    GridPersistentLayout? layout;
    GridPersistentLayout? defaultLayout { get; set; }
    MessageBox? messageBox;
    bool areRowsSelectable;
    string showSelectedOnlyText = string.Empty;
    string showSelectedOnlyTooltip = string.Empty;
    bool showSelectedOnly = true;
    bool isOpenForExcel = false;
    bool isOpenForPdf = false;
    bool isDropDownOpen = false;
    string reportTitle = "";

    protected override async Task OnInitializedAsync()
    {
        if (LinkedGrid != null)
        {
            if (LayoutKey != null)
            {
                defaultLayout = LinkedGrid.SaveLayout();
                layout = await localStorage.GetItemAsync<GridPersistentLayout>(LayoutKey);
                if (layout != null)
                {
                    LinkedGrid.LoadLayout(layout);
                    ToastService.ShowToast(new ToastOptions()
                    {
                        Title = "Layout Restored",
                        Text = "Grid restored from saved layout.",
                        ProviderName = "Result",
                        ThemeMode = ToastThemeMode.Pastel,
                        RenderStyle = ToastRenderStyle.Success,
                        IconCssClass = "bi bi-check-circle"
                    });
                }
            }
        }
        ToggleShowSelectedOnly();
        await base.OnInitializedAsync();
    }

    object savedData = null;
    private void ToggleShowSelectedOnly()
    {
        if (LinkedGrid == null) { return; }
        LinkedGrid.BeginUpdate();
        showSelectedOnly = !showSelectedOnly;
        if (showSelectedOnly)
        {
            showSelectedOnlyText = "Show All?";
            showSelectedOnlyTooltip = "Show all rows";
            savedData = LinkedGrid.Data; // Save original data
            LinkedGrid.Data = LinkedGrid.SelectedDataItems;
        }
        else
        {
            showSelectedOnlyText = $"Selected Only?";
            showSelectedOnlyTooltip = "Show selected rows only";
            if (savedData != null) LinkedGrid.Data = savedData; // Restore original data
        }
        LinkedGrid.EndUpdate();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (LinkedGrid != null)
        {
            LinkedGrid.BeginUpdate();
            LinkedGrid.HighlightRowOnHover = true;
            LinkedGrid.ShowGroupPanel = !HideGroupPanel;
            LinkedGrid.ShowSearchBox = !HideSearchBox;
            LinkedGrid.SelectAllCheckboxMode = GridSelectAllCheckboxMode.AllPages;
            LinkedGrid.ColumnResizeMode = GridColumnResizeMode.ColumnsContainer;
            if (DisableVirtualScroll)
            {
                LinkedGrid.PageSize = 30;
                LinkedGrid.PagerVisible = true;
            }
            else
            {
                LinkedGrid.PagerVisible = false;
                LinkedGrid.VirtualScrollingEnabled = true;
            }
            LinkedGrid.TextWrapEnabled = false;
            areRowsSelectable = false;
            foreach (var col in LinkedGrid.GetColumns())
            {
                if (col is DxGridDataColumn)
                {
                    if (col.MinWidth < 75) { col.MinWidth = 75; }
                }
                if (col is DxGridSelectionColumn)
                {
                    areRowsSelectable = true;
                    if (!LinkedGrid.AllowSelectRowByClick) { LinkedGrid.AllowSelectRowByClick = true; }
                }
            }
            LinkedGrid.EndUpdate();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (IsGridEditing())
        {
            await LinkedGrid!.SaveChangesAsync();
            await messageBox!.ShowOkOnlyAsync("Changes Saved!",
                "Your grid's unsaved edits have been saved.");
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool IsGridEditing()
    {
        if (LinkedGrid == null) { return false; }
        return LinkedGrid.IsEditing();
    }

    async Task OnItemClick(ToolbarItemClickEventArgs e)
    {
        if (LinkedGrid == null) { return; }
        LinkedGrid.BeginUpdate();
        switch (e.ItemName)
        {
            case "Day":
                foreach (var col in LinkedGrid.GetColumns())
                {
                    if (col is DxGridDataColumn)
                    {
                        var c = (DxGridDataColumn)col;
                        if (c.FieldName.ToLower().Contains("date")) c.GroupInterval = GridColumnGroupInterval.Date;
                    }
                }
                break;
            case "Month":
                foreach (var col in LinkedGrid.GetColumns())
                {
                    if (col is DxGridDataColumn)
                    {
                        var c = (DxGridDataColumn)col;
                        if (c.FieldName.ToLower().Contains("date")) c.GroupInterval = GridColumnGroupInterval.DateMonth;
                    }
                }
                break;
            case "Year":
                foreach (var col in LinkedGrid.GetColumns())
                {
                    if (col is DxGridDataColumn)
                    {
                        var c = (DxGridDataColumn)col;
                        if (c.FieldName.ToLower().Contains("date")) c.GroupInterval = GridColumnGroupInterval.DateYear;
                    }
                }
                break;
            case "AutoFit":
                LinkedGrid.AutoFitColumnWidths();
                break;
            case "ExpandGroups":
                LinkedGrid.ExpandAllGroupRows();
                break;
            case "CollapseGroups":
                LinkedGrid.CollapseAllGroupRows();
                break;
            case "ShowDetails":
                LinkedGrid.DetailRowDisplayMode = GridDetailRowDisplayMode.Always;
                break;
            case "HideDetails":
                LinkedGrid.DetailRowDisplayMode = GridDetailRowDisplayMode.Auto;
                break;
            case "Choose":
                LinkedGrid.ShowColumnChooser(".column-chooser-button");
                break;
            case "SaveLayout":
                await localStorage.SetItemAsync(LayoutKey!, LinkedGrid.SaveLayout());
                ToastService.ShowToast(new ToastOptions()
                {
                    Title = "Layout Saved",
                    Text = "Your grid's layout has been saved.",
                    ProviderName = "Result",
                    ThemeMode = ToastThemeMode.Pastel,
                    RenderStyle = ToastRenderStyle.Success,
                    IconCssClass = "bi bi-check-circle"
                });
                break;
            case "ResetLayout":
                await localStorage.RemoveItemAsync(LayoutKey!);
                LinkedGrid.LoadLayout(defaultLayout);
                ToastService.ShowToast(new ToastOptions()
                {
                    Title = "Reset Layout",
                    Text = "The default layout is restored.",
                    ProviderName = "Result",
                    ThemeMode = ToastThemeMode.Pastel,
                    RenderStyle = ToastRenderStyle.Success,
                    IconCssClass = "bi bi-check-circle"
                });
                break;
            case "Filter":
                if (LinkedGrid.FilterMenuButtonDisplayMode == GridFilterMenuButtonDisplayMode.Default)
                {
                    LinkedGrid.FilterMenuButtonDisplayMode = GridFilterMenuButtonDisplayMode.Always;
                }
                else
                {
                    LinkedGrid.FilterMenuButtonDisplayMode = GridFilterMenuButtonDisplayMode.Default;
                    LinkedGrid.ClearFilter();
                    await ToolbarFilterClosed.InvokeAsync();
                }
                break;
            case "SelectedOnly":
                ToggleShowSelectedOnly();
                break;
        }
        LinkedGrid.EndUpdate();
    }

    bool isExporting;
    async Task OnDropDownClick()
    {
        isExporting = true;
        isDropDownOpen = false;
        await InvokeAsync(StateHasChanged);
        LinkedGrid!.BeginUpdate();
        if (isOpenForExcel) { await ExcelExport(); } else { await PdfExport(); }
        LinkedGrid!.EndUpdate();
        isExporting = isDropDownOpen = isOpenForExcel = isOpenForPdf = false;
        LinkedGrid!.LoadLayout(defaultLayout);
        LinkedGrid!.Reload();
    }

    #region "Pdf Export"

    const string DEFAULT_PDF_TITLE = "Pdf Export";
    const string DEFAULT_FIT_STYLE = "Fit to page";
    bool IsPortrait = false;
    GridPersistentLayout? pdfExportLayout;
    string fitStyle = DEFAULT_FIT_STYLE;

    async Task PdfExport()
    {
        if (string.IsNullOrWhiteSpace(reportTitle)) reportTitle = DEFAULT_PDF_TITLE;
        if (pdfExportLayout is null)
        {
            pdfExportLayout = await localStorage.GetItemAsync<GridPersistentLayout>(LayoutKey!);
            if (pdfExportLayout is null)
            {
                LinkedGrid!.AutoFitColumnWidths();
                pdfExportLayout = LinkedGrid.SaveLayout();
            }
        }
        await LinkedGrid!.ExportToPdfAsync(reportTitle,
            new GridPdfExportOptions()
            {
                FitToPage = (fitStyle == DEFAULT_FIT_STYLE) ? true : false,

                CustomizeColumn = (e) =>
                {
                  if (fitStyle == DEFAULT_FIT_STYLE) return;
                  var col = pdfExportLayout.Columns.FirstOrDefault(x => x.FieldName == e.FieldName);
                    if (col is not null && col.ColumnType == GridPersistentLayoutColumnType.Data)
                    {
                        if (col.Width is not null)
                        {
                            e.Width = (int)(CssToPixels(col.Width, 8, "font") * 300 / 96);
                            Log.Information("Calculated: {0} {1}", e.FieldName, e.Width);
                        }
                        else
                        {
                            e.Width = 600;
                            Log.Information("Default: {0} {1}", e.FieldName, e.Width);
                        }
                    }
                },

                CustomizeDocument = (e) =>
                {
                    e.DefaultElementStyle.Font = new DXFont("Times New Roman", 8);
                    e.PaperKind = DXPaperKind.A4;
                    e.Landscape = !IsPortrait;
                    e.Margins = new DXMargins(25, 25, 25, 50);
                },

                CustomizeCell = OnCustomizeCell,
                
                CustomizeDocumentHeader = (e) =>
                {
                    if (reportTitle != DEFAULT_PDF_TITLE)
                    {
                        e.ElementStyle.Font = new DXFont("Arial", 16);
                        e.ElementStyle.ForeColor = System.Drawing.Color.RoyalBlue;
                        e.Text = reportTitle;
                    }
                },
                
                CustomizePageFooter = (e) => { e.Text = "Page {0} of {1}"; }
            });
    }

    public static float CssToPixels(string cssValue, float contextValue, string unitContext)
    {
        var match = Regex.Match(cssValue.Trim(), @"([\d.]+)([a-z%]+)");
        if (!match.Success) throw new ArgumentException("Invalid CSS value");

        float value = float.Parse(match.Groups[1].Value);
        string unit = match.Groups[2].Value.ToLower();

        return unit switch
        {
            "px" => value,
            "%" => value / 100f * contextValue,           // parent width
            "em" => value * contextValue,                 // current font size
            "rem" => value * contextValue,                // root font size
            "vw" => value / 100f * contextValue,          // viewport width
            "vh" => value / 100f * contextValue,          // viewport height
            _ => throw new NotSupportedException($"Unsupported unit: {unit}")
        };
    }

    void OnCustomizeCell(GridDocumentExportCustomizeCellEventArgs args)
    {
        if (args.AreaType == DocumentExportAreaType.Header)
        {
            args.ElementStyle.BackColor = System.Drawing.Color.RoyalBlue;
            args.ElementStyle.ForeColor = System.Drawing.Color.White;
        }
        if (args.AreaType == DocumentExportAreaType.DataArea && args.Value is bool)
        {
            var val = (bool)args.Value;
            args.Text = (val) ? "✓" : "✕";
        }
        args.Handled = true;
    }

    #endregion

    #region "Excel Export"

    async Task ExcelExport()
    {
        if (string.IsNullOrEmpty(reportTitle)) reportTitle = "Excel Export";
        foreach (var col in LinkedGrid!.GetDataColumns())
        {
            col.ExportEnabled = col.Visible;
            if (col.GroupIndex >= 0) col.ExportEnabled = true;
        }
        var options = new GridXlExportOptions()
        {
            CustomizeSheet = e =>
            {
                e.Sheet.PageSetup.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;
                // Enable auto filter for columns with data
                var positionStart = new DevExpress.Export.Xl.XlCellPosition(0, 0);
                var count = 0;
                foreach (var col in LinkedGrid.GetDataColumns())
                {
                    if (col.ExportEnabled && col.GroupIndex < 0) count++;
                }
                var positionEnd = new DevExpress.Export.Xl.XlCellPosition(count - 1, SpreadsheetHeaderRows);
                e.Sheet.AutoFilterRange = new DevExpress.Export.Xl.XlCellRange(positionStart, positionEnd);
                // Freeze the top row(s)
                e.Sheet.SplitPosition = new DevExpress.Export.Xl.XlCellPosition(0, SpreadsheetHeaderRows);
            },
            CustomizeCell = e =>
            {
                // Highlight header and footer
                if (e.AreaType == SheetAreaType.Header || e.AreaType == SheetAreaType.TotalFooter)
                {
                    if (e.Formatting != null) e.Formatting.BackColor = System.Drawing.Color.Gainsboro;
                    e.Handled = true;
                }
                // Highlight Group Footer
                if (e.AreaType == SheetAreaType.GroupFooter)
                {
                    if (e.Formatting != null) e.Formatting.BackColor = ChangeColorBrightness(Color.Gainsboro, 0.6F);
                    e.Handled = true;
                }
            }
        };
        try
        {
            await LinkedGrid.ExportToXlsxAsync($"{reportTitle.Trim()}.Xlsx", options);
        }
        catch (NullReferenceException ex)
        {
            await messageBox!.ShowOkOnlyAsync("Export Error",
            $"{ex.Message}<p>This error will occur when there are no grid rows selected.</p>");
        }
        catch (Exception ex)
        {
            await messageBox!.ShowOkOnlyAsync("Export Error", ex.Message);
        }
    }

    /// <summary>
    /// Creates color with corrected brightness.
    /// </summary>
    /// <param name="color">Color to correct.</param>
    /// <param name="correctionFactor">The brightness correction factor. Must be between -1 and 1.
    /// Negative values produce darker colors.</param>
    /// <returns>
    /// Corrected <see cref="Color"/> structure.
    /// </returns>
    Color ChangeColorBrightness(Color color, float correctionFactor)
    {
        float red = (float)color.R;
        float green = (float)color.G;
        float blue = (float)color.B;

        if (correctionFactor < 0)
        {
            correctionFactor = 1 + correctionFactor;
            red *= correctionFactor;
            green *= correctionFactor;
            blue *= correctionFactor;
        }
        else
        {
            red = (255 - red) * correctionFactor + red;
            green = (255 - green) * correctionFactor + green;
            blue = (255 - blue) * correctionFactor + blue;
        }

        return Color.FromArgb(color.A, (int)red, (int)green, (int)blue);
    }

    #endregion
}
