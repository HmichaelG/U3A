@using Microsoft.JSInterop
@using DevExpress.Export
@using System.Drawing
@using System.Collections
@using System.Text.Json
@using DevExpress.Blazor


<DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained"
           CssClass="me-4"
           ItemClick="OnItemClick">
    <Items>
        <DxToolbarItem IconCssClass="bi bi-collection" Text="Group Rows..."
                       Visible = "@(LinkedGrid?.GetGroupCount() > 0)"
                       Alignment="ToolbarItemAlignment.Left">
            <Items>
                <DxToolbarItem IconCssClass="bi bi-arrows-collapse"
                               Name="CollapseGroups" Text="Collapse Group Rows"
                               Tooltip="Collapse grouped rows">
                </DxToolbarItem>
                <DxToolbarItem IconCssClass="bi bi-arrows-expand"
                               Name="ExpandGroups" Text="Expand Group Rows"
                               Tooltip="Expand grouped rows">
                </DxToolbarItem>
                <DxToolbarItem BeginGroup IconCssClass="bi bi-calendar3" Text="Group Dates By">
                    <Items>
                        <DxToolbarItem IconCssClass="bi bi-calendar3" Name="Day" Text="Day"
                                       Tooltip="Group dates by day">
                        </DxToolbarItem>
                        <DxToolbarItem IconCssClass="bi bi-calendar3" Name="Month" Text="Month"
                                       Tooltip="Group dates by month">
                        </DxToolbarItem>
                        <DxToolbarItem IconCssClass="bi bi-calendar3" Name="Year" Text="Year"
                                       Tooltip="Group dates by year">
                        </DxToolbarItem>
                    </Items>
                </DxToolbarItem>
            </Items>
        </DxToolbarItem>
        <DxToolbarItem IconCssClass="bi bi-collection" Text="Master/Detail" Visible=@IsMasterDetail
                       Alignment="ToolbarItemAlignment.Right"
                       BeginGroup=true>
            <Items>
                <DxToolbarItem IconCssClass="bi bi-arrows-expand"
                               Name="ShowDetails" Text="Show Detail Rows"
                               Tooltip="Show Detail rows">
                </DxToolbarItem>
                <DxToolbarItem IconCssClass="bi bi-arrows-collapse"
                               Name="HideDetails" Text="Hide Detail Rows"
                               Tooltip="Hide Detail rows">
                </DxToolbarItem>
            </Items>
        </DxToolbarItem>
        <DxToolbarItem IconCssClass="bi bi-arrows" Name="AutoFit" Text="Auto Fit"
                       BeginGroup=true
                       Alignment="ToolbarItemAlignment.Right"
                       CssClass="column-chooser-button"
                       Tooltip="Adjust column size to fit cell content">
        </DxToolbarItem>
        <DxToolbarItem IconCssClass="bi bi-list-columns-reverse" Name="Choose" Text="Choose"
                       BeginGroup=true
                       Alignment="ToolbarItemAlignment.Right"
                       CssClass="column-chooser-button"
                       Tooltip="Customise column display">
        </DxToolbarItem>
        <DxToolbarItem IconCssClass="bi bi-funnel" Name="Filter" Text="Filter"
                       BeginGroup=true
                       Alignment="ToolbarItemAlignment.Right"
                       Tooltip="Filter / search for records">
        </DxToolbarItem>
        <DxToolbarItem IconCssClass="bi bi-file-spreadsheet" Text="Excel Export"
                       BeginGroup=true
                       Alignment="ToolbarItemAlignment.Right">
            <Items>
                <DxToolbarItem IconCssClass="bi bi-file-spreadsheet" Name="ExportAll" Text="Export All"
                               Tooltip="Export the entire grid to Excel">
                </DxToolbarItem>
                <DxToolbarItem IconCssClass="bi bi-file-spreadsheet" Name="ExportSelected" Text="Export Selected"
                               Tooltip="Export selected rows to Excel">
                </DxToolbarItem>
            </Items>
        </DxToolbarItem>
        @CustomButtonContent
    </Items>
</DxToolbar>

@code {

    [Parameter, EditorRequired]
    public IGrid? LinkedGrid { get; set; }
    [Parameter] public bool HideGroupPanel { get; set; }
    [Parameter] public bool HideSearchBox { get; set; }
    [Parameter] public bool IsMasterDetail { get; set; }
    [Parameter] public bool DisableVirtualScroll { get; set; }
    [Parameter] public RenderFragment CustomButtonContent { get; set; }
    [Parameter] public EventCallback ToolbarFilterClosed { get; set; }

    internal bool IsToggleExpanded { get; set; } = false;
    internal string ExpandCollapseText { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (LinkedGrid != null)
        {
            LinkedGrid.BeginUpdate();
            LinkedGrid.ShowGroupPanel = !HideGroupPanel;
            LinkedGrid.ShowSearchBox = !HideSearchBox;
            LinkedGrid.SelectAllCheckboxMode = GridSelectAllCheckboxMode.AllPages;
            LinkedGrid.ColumnResizeMode = GridColumnResizeMode.ColumnsContainer;
            if (DisableVirtualScroll)
            {
                LinkedGrid.PageSize = 30;
                LinkedGrid.PagerVisible = true;
            }
            else
            {
                LinkedGrid.PagerVisible = false;
                LinkedGrid.VirtualScrollingEnabled = true;
            }
            LinkedGrid.TextWrapEnabled = false;
            foreach (var col in LinkedGrid.GetColumns())
            {
                if (col is DxGridDataColumn)
                {
                    col.MinWidth = 75;
                }
            }
            LinkedGrid.EndUpdate();
        }
        base.OnAfterRender(firstRender);
    }

    async Task OnItemClick(ToolbarItemClickEventArgs e)
    {
        if (LinkedGrid == null) { return; }
        LinkedGrid.BeginUpdate();
        switch (e.ItemName)
        {
            case "Day":
                foreach (var col in LinkedGrid.GetColumns())
                {
                    if (col is DxGridDataColumn)
                    {
                        var c = (DxGridDataColumn)col;
                        if (c.FieldName.ToLower().Contains("date")) c.GroupInterval = GridColumnGroupInterval.Date;
                    }
                }
                break;
            case "Month":
                foreach (var col in LinkedGrid.GetColumns())
                {
                    if (col is DxGridDataColumn)
                    {
                        var c = (DxGridDataColumn)col;
                        if (c.FieldName.ToLower().Contains("date")) c.GroupInterval = GridColumnGroupInterval.DateMonth;
                    }
                }
                break;
            case "Year":
                foreach (var col in LinkedGrid.GetColumns())
                {
                    if (col is DxGridDataColumn)
                    {
                        var c = (DxGridDataColumn)col;
                        if (c.FieldName.ToLower().Contains("date")) c.GroupInterval = GridColumnGroupInterval.DateYear;
                    }
                }
                break;
            case "AutoFit":
                LinkedGrid.AutoFitColumnWidths();
                break;
            case "ExpandGroups":
                LinkedGrid.ExpandAllGroupRows();
                break;
            case "CollapseGroups":
                LinkedGrid.CollapseAllGroupRows();
                break;
            case "ShowDetails":
                LinkedGrid.DetailRowDisplayMode = GridDetailRowDisplayMode.Always;
                break;
            case "HideDetails":
                LinkedGrid.DetailRowDisplayMode = GridDetailRowDisplayMode.Auto;
                break;
            case "Choose":
                LinkedGrid.ShowColumnChooser(".column-chooser-button");
                break;
            case "ExportAll":
                await ExcelExport(false);
                break;
            case "ExportSelected":
                await ExcelExport(true);
                break;
            case "Filter":
                if (LinkedGrid.FilterMenuButtonDisplayMode == GridFilterMenuButtonDisplayMode.Default)
                {
                    LinkedGrid.FilterMenuButtonDisplayMode = GridFilterMenuButtonDisplayMode.Always;
                }
                else
                {
                    LinkedGrid.FilterMenuButtonDisplayMode = GridFilterMenuButtonDisplayMode.Default;
                    LinkedGrid.ClearFilter();
                    await ToolbarFilterClosed.InvokeAsync();
                }
                break;
        }
        LinkedGrid.EndUpdate();
        StateHasChanged();
    }

    async Task ExcelExport(bool SelectedRowsOnly)
    {
        foreach (var col in LinkedGrid.GetDataColumns())
        {
            col.ExportEnabled = col.Visible;
            if (col.GroupIndex >= 0) col.ExportEnabled = true;
        }
        var options = new GridXlExportOptions()
            {
                CustomizeSheet = e =>
                {
                    e.Sheet.PageSetup.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;
                    // Enable auto filter for columns with data
                    var positionStart = new DevExpress.Export.Xl.XlCellPosition(0, 0);
                    var count = 0;
                    foreach (var col in LinkedGrid.GetDataColumns())
                    {
                        if (col.ExportEnabled && col.GroupIndex < 0) count++;
                    }
                    var positionEnd = new DevExpress.Export.Xl.XlCellPosition(count - 1, 0);
                    e.Sheet.AutoFilterRange = new DevExpress.Export.Xl.XlCellRange(positionStart, positionEnd);
                    // Freeze the top row
                    e.Sheet.SplitPosition = new DevExpress.Export.Xl.XlCellPosition(0, 1);
                },
                CustomizeCell = e =>
                {
                    // Highlight header and footer
                    if (e.AreaType == SheetAreaType.Header || e.AreaType == SheetAreaType.TotalFooter)
                    {
                        e.Formatting.BackColor = System.Drawing.Color.Gainsboro;
                        e.Handled = true;
                    }
                    // Highlight Group Footer
                    if (e.AreaType == SheetAreaType.GroupFooter)
                    {
                        e.Formatting.BackColor = ChangeColorBrightness(Color.Gainsboro, 0.6F);
                        e.Handled = true;
                    }
                }
            };
        options.ExportSelectedRowsOnly = SelectedRowsOnly;
        await LinkedGrid.ExportToXlsxAsync("gridExport.Xlsx", options);
    }

    /// <summary>
    /// Creates color with corrected brightness.
    /// </summary>
    /// <param name="color">Color to correct.</param>
    /// <param name="correctionFactor">The brightness correction factor. Must be between -1 and 1.
    /// Negative values produce darker colors.</param>
    /// <returns>
    /// Corrected <see cref="Color"/> structure.
    /// </returns>
    Color ChangeColorBrightness(Color color, float correctionFactor)
    {
        float red = (float)color.R;
        float green = (float)color.G;
        float blue = (float)color.B;

        if (correctionFactor < 0)
        {
            correctionFactor = 1 + correctionFactor;
            red *= correctionFactor;
            green *= correctionFactor;
            blue *= correctionFactor;
        }
        else
        {
            red = (255 - red) * correctionFactor + red;
            green = (255 - green) * correctionFactor + green;
            blue = (255 - blue) * correctionFactor + blue;
        }

        return Color.FromArgb(color.A, (int)red, (int)green, (int)blue);
    }

}
