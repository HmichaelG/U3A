@inject IJSRuntime JS

<div class="expandable-text-wrapper">
    <div class="expandable-text-container @(isExpanded ? "expanded" : "")"
         style="--max-height:@MaxHeight"
         @ref="containerRef">
        <div class="text-content">
            @ChildContent
        </div>
        @if (showToggle)
        {
            <div class="fade-overlay"></div>
        }
    </div>

    @if (showToggle)
    {
        <DxButton CssClass="toggle-button"
                  RenderStyleMode="ButtonRenderStyleMode.Outline"
                  Click="ToggleExpanded"
                  Text=@(isExpanded ? "Show Less" : "Show More") />
    }
</div>

@code {
    private bool isExpanded = false;
    private bool showToggle = false;
    private ElementReference containerRef;
    private RenderFragment? savedContent;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string MaxHeight { get; set; } = "7rem";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (savedContent != ChildContent)
        {
            savedContent = ChildContent;
            isExpanded = false; // Reset to collapsed state when content changes
            await Task.Delay(100); // Let layout settle
            showToggle = await JS.InvokeAsync<bool>("checkOverflow", containerRef, MaxHeight);
            StateHasChanged();
        }
    }

    private void ToggleExpanded()
    {
        isExpanded = !isExpanded;
    }
}