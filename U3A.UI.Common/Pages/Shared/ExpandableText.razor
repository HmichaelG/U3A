@using System.Collections.Concurrent
@inject IJSRuntime JS

<div class="expandable-text-wrapper">
    <div class="expandable-text-container @(isExpanded ? "expanded" : "")"
         style="--max-height:@MaxHeight"
         @ref="containerRef">
        <div class="text-content">
            @ChildContent
        </div>
        @if (showToggle)
        {
            <div class="fade-overlay"></div>
        }
    </div>
    @if (showToggle)
    {
        <div class="expanded-text-toggle-button">
            <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline"
                      Click="ToggleExpanded"
                      Text=@(isExpanded ? "Show Less" : "Show More") />
        </div>
    }
</div>

@code {

    private bool isExpanded = false;
    private bool showToggle = true;
    private ElementReference containerRef;
    private RenderFragment? savedContent;

    [Parameter, EditorRequired]
    public Guid Key { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string MaxHeight { get; set; } = "8rem";

    private ConcurrentDictionary<Guid, (bool? showToggle, bool? isExpanded)> bag = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!bag.TryGetValue(Key, out var state))
        {
            await Task.Delay(100); // Let layout settle
            showToggle = await JS.InvokeAsync<bool>("checkOverflow", containerRef, MaxHeight);
            isExpanded = false;
            bag[Key] = (showToggle, false);
        }
        else
        {
            showToggle = state.showToggle ?? false;
            isExpanded = state.isExpanded ?? true;
        }
        StateHasChanged();
    }

    private void ToggleExpanded()
    {
        var state = bag[Key];
        isExpanded = !isExpanded;
        bag[Key] = (state.showToggle, isExpanded);
    }
}