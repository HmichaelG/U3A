@page "/XtraReportViewer"
@page "/XtraReportViewer/{ReportName?}"

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Configuration;

<PageTitle>@($"{tenantId}: U3A Report")</PageTitle>

@inject NavigationManager NavMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@inject IDbContextFactory<TenantDbContext> TenantDbfactory
@inject TenantInfoService TenantService
@inject WorkStation ws
@inject IConfiguration config
@inject IJSRuntime js

@implements IDisposable

@using DevExpress.Drawing
@using DevExpress.XtraReports.Services
@using DevExpress.XtraPrinting.Caching;
@using DevExpress.XtraReports.UI;
@using DevExpress.Blazor.Reporting.EditingFields;
@using DevExpress.XtraReports.Web.Native.ClientControls;
@using DevExpress.Blazor.Reporting
@using DevExpress.Blazor.Reporting.Models
@using U3A.Services
@using U3A.UI.Common.Pages.Shared
@using System.Globalization

@attribute [Authorize]

@using DevExpress.Blazor.Reporting
@using Microsoft.Extensions.DependencyInjection

@if (!isReady)
{
    <LoadingIndicator />
}
else
{
    <div class="@containerClass">
        <DxReportViewer @ref="@reportViewer"
                        Report="@Report"
                        SinglePagePreview="false"
                        Zoom="1"
                        CssClass="w-100"
                        OnCustomizeToolbar="OnCustomizeToolbar"
                        RootCssClasses="@RootCssClass" />
    </div>
}
<style>
    .view-normal {
        height: @viewerHeight
    }
    .view-smallScreen{
        top: 0;
        left: 0;
        width: 100%;
        background-color: var(--bs-body-bg);
        position: fixed;
        z-index: 2000;
        opacity: 1;
        height: @viewerHeight
    }
</style>

@code {
    DxReportViewer? reportViewer;
    [Inject] public EditingFieldModelFactory EditingFieldModelFactory { get; set; }
    [Parameter]
    public string ReportName { get; set; }
    [Parameter]
    public bool HideTabPanels { get; set; }
    [Parameter]
    public XtraReport? Report { get; set; }
    [Parameter]
    public string RootCssClass { get; set; } = "view-normal";
    [Parameter]
    public EventCallback OnCloseButtonClick { get; set; }

    string viewerHeight;

    U3ADbContext dbc { get; set; }
    TenantDbContext dbcT { get; set; }
    string? tenantId;
    bool isReady;
    string googleFontsAPIKey;
    string containerClass = "view-normal";

    protected override async Task OnInitializedAsync()
    {
        googleFontsAPIKey = config.GetValue<string>("GoogleFontsAPIKey");
        DXFontRepository.QueryNotFoundFont += Report_QueryNotFoundFont;
        viewerHeight = (ws.UseTopMenu) ? "calc(100dvh - 4rem) !important;" : "calc(100dvh - 1rem) !important;";
        dbc = await U3Adbfactory.CreateDbContextAsync();
        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        tenantId = textInfo.ToTitleCase(dbc.TenantInfo.Identifier!);
        dbcT = await TenantDbfactory.CreateDbContextAsync();
        if (Report == null)
        {
            Type? thisType = Type.GetType($"U3A.UI.Reports.{ReportName}");
            if (thisType != null)
            {
                Report = (XtraReport?)Activator.CreateInstance(thisType);
                ReportName = Report.Name;
                if (Report is IXtraReportWithNavManager)
                {
                    (Report as IXtraReportWithNavManager).NavManager = NavMan;
                }
                if (Report is IXtraReportWithDbContext
                    || Report is IXtraReportWithDbContextAndTenantDbContext
                    || Report is IXtraReportWithDbContextFactory)
                {
                    if (Report is IXtraReportWithDbContext)
                    {
                        (Report as IXtraReportWithDbContext).DbContext = dbc;
                    }
                    if (Report is IXtraReportWithDbContextAndTenantDbContext)
                    {
                        (Report as IXtraReportWithDbContextAndTenantDbContext).DbContext = dbc;
                        (Report as IXtraReportWithDbContextAndTenantDbContext).TenantDbContext = dbcT;
                        //(Report as IXtraReportWithDbContextAndTenantDbContext).TenantService = TenantService;
                    }
                    if (Report is IXtraReportWithDbContextFactory)
                    {
                        (Report as IXtraReportWithDbContextFactory).U3Adbfactory = U3Adbfactory;
                    }
                }
                else
                {
                    if (Report.DataSource is EFDataSource)
                    {
                        (Report.DataSource as EFDataSource).ConnectionParameters.ConnectionString = dbc.TenantInfo.ConnectionString;
                    }
                }
            }
        }
    }

    private void Report_QueryNotFoundFont(object sender, NotFoundFontEventArgs e)
    {
        var service = new FontCollectorService();
        var fontData = service.ProcessFont(googleFontsAPIKey, e.RequestedFont).Result;
        e.FontFileData = fontData;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isReady = true;
            await InvokeAsync(StateHasChanged);
            if (HideTabPanels)
            {
                reportViewer.TabPanelModel[TabContentKind.DocumentMap].Visible = false;
                reportViewer.TabPanelModel[TabContentKind.ExportOptions].Visible = false;
                reportViewer.TabPanelModel[TabContentKind.Search].Visible = false;
            }
            EditingFieldModelFactory.RegisterMaskEditor("Name", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z -.]+" });
            EditingFieldModelFactory.RegisterMaskEditor("UppercaseLatinLetters", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z]+" });
            EditingFieldModelFactory.RegisterMaskEditor("NumbersAndUppercaseLatinLetters", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z0-9]+" });
            EditingFieldModelFactory.RegisterMaskEditor("UppercaseText", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z0-9 ,-/]+" });
            EditingFieldModelFactory.RegisterMaskEditor("Day", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"(0[1-9])|([1-2][0-9])|(3[0-1])" });
            EditingFieldModelFactory.RegisterMaskEditor("Month", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"(0[1-9])|(1[0-2])" });
            EditingFieldModelFactory.RegisterMaskEditor("Year", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[0-2]([0-9]{3})" });
            containerClass = (ws.IsLargeScreen) ? "view-normal" : "view-smallScreen";
            StateHasChanged();
        }
        if (reportViewer != null) { reportViewer.LoadingPanelVisible = true; }
    }

    void OnCustomizeToolbar(ToolbarModel toolbarModel)
    {
        toolbarModel.AllItems.Add(new ToolbarItem()
        {
            IconCssClass = "fw-bold text-accent exit-icon",
            BeginGroup = true,
            Text = "Close Report",
            AdaptiveText = "Close Report",
            AdaptivePriority = -99,
            Click = async (args) =>
            {
                if (OnCloseButtonClick.HasDelegate)
                {
                    await OnCloseButtonClick.InvokeAsync();
                }
                else
                {
                    NavMan.NavigateTo("/");
                }
            }
        });
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}