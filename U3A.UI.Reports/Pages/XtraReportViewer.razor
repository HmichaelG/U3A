@page "/XtraReportViewer"
@page "/XtraReportViewer/{ReportName?}"

@using Microsoft.AspNetCore.Components.Forms

<PageTitle>U3A Report</PageTitle>

<AntiforgeryToken />

@inject NavigationManager NavMan
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable

@using DevExpress.XtraReports.Services
@using DevExpress.XtraPrinting.Caching;
@using DevExpress.XtraReports.UI;
@using DevExpress.Blazor.Reporting.EditingFields;
@using DevExpress.XtraReports.Web.Native.ClientControls;
@using DevExpress.Blazor.Reporting
@using DevExpress.Blazor.Reporting.Models

@attribute [Authorize]

@using DevExpress.Blazor.Reporting
@using Microsoft.Extensions.DependencyInjection


<DxReportViewer @ref="reportViewer"
                Report="@Report"
                SinglePagePreview="false"
                Zoom="1"
                TabPanelMinWidth="100"
                TabPanelMaxWidth="200"
                CssClass="w-100"
                OnCustomizeToolbar="OnCustomizeToolbar"
                RootCssClasses="@RootCssClass" />

<style>
    .view-normal {
        height: 98vh !important;
    }

</style>

@code {
    DxReportViewer? reportViewer;
    [Inject] public EditingFieldModelFactory EditingFieldModelFactory { get; set; }
    [Parameter]
    public string ReportName { get; set; }
    [Parameter]
    public XtraReport? Report { get; set; }
    [Parameter]
    public string RootCssClass { get; set; } = "view-normal";
    [Parameter]
    public EventCallback OnCloseButtonClick { get; set; }

    U3ADbContext dbc { get; set; }
    bool isReady;

    protected override async Task OnInitializedAsync()
    {
        dbc = await U3Adbfactory.CreateDbContextAsync();
        if (Report == null)
        {
            Type? thisType = Type.GetType($"U3A.UI.Reports.{ReportName}");
            if (thisType != null)
            {
                Report = (XtraReport?)Activator.CreateInstance(thisType);
                ReportName = Report.Name;
                if (Report is IXtraReportWithNavManager)
                {
                    (Report as IXtraReportWithNavManager).NavManager = NavMan;
                }
                if (Report is IXtraReportWithDbContext || Report is IXtraReportWithDbContextFactory)
                {
                    if (Report is IXtraReportWithDbContext)
                    {
                        (Report as IXtraReportWithDbContext).DbContext = dbc;
                    }
                    if (Report is IXtraReportWithDbContextFactory)
                    {
                        (Report as IXtraReportWithDbContextFactory).U3Adbfactory = U3Adbfactory;
                    }
                }
                else
                {
                    if (Report.DataSource is EFDataSource)
                    {
                        (Report.DataSource as EFDataSource).ConnectionParameters.ConnectionString = dbc.TenantInfo.ConnectionString;
                    }
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EditingFieldModelFactory.RegisterMaskEditor("Name", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z -.]+" });
            EditingFieldModelFactory.RegisterMaskEditor("UppercaseLatinLetters", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z]+" });
            EditingFieldModelFactory.RegisterMaskEditor("NumbersAndUppercaseLatinLetters", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z0-9]+" });
            EditingFieldModelFactory.RegisterMaskEditor("UppercaseText", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z0-9 ,-/]+" });
            EditingFieldModelFactory.RegisterMaskEditor("Day", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"(0[1-9])|([1-2][0-9])|(3[0-1])" });
            EditingFieldModelFactory.RegisterMaskEditor("Month", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"(0[1-9])|(1[0-2])" });
            EditingFieldModelFactory.RegisterMaskEditor("Year", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[0-2]([0-9]{3})" });
            reportViewer.LoadingPanelVisible = true;
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void OnCustomizeToolbar(ToolbarModel toolbarModel)
    {
        toolbarModel.AllItems.Add(new ToolbarItem()
            {
                IconCssClass = "bi bi-door-open",
                BeginGroup = true,
                Text = "Close Report",
                AdaptiveText = "Close Report",
                AdaptivePriority = 1,                  
                Click = async (args) =>
                {
                    if (OnCloseButtonClick.HasDelegate)
                    {
                        await OnCloseButtonClick.InvokeAsync();
                    }
                    else
                    {
                        NavMan.NavigateTo("/");
                    }
                }
            });
    }

    public void Dispose()
    {
        dbc?.Dispose();
    }

}