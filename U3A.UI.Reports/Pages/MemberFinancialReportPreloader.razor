@page "/MemberFinancialReportPreloader/{ReportName}"

@inject IDbContextFactory<U3ADbContext> U3Adbfactory

@using System.Collections.Concurrent
@using U3A.BusinessRules
@using U3A.Services


@if (!isReady)
{
    <em>Loading report data ...</em>
}
else
{
    <XtraReportViewer Report="@report" ReportIsReady=true />
}


@code {
    [Parameter]
    public string ReportName { get; set; }

    XtraReport report;
    bool isReady = false;

    protected override async Task OnInitializedAsync()
    {
        MemberFeeCalculationService service;
        List<Person> people;
        string asAt;
        Term currentTerm = null;
        using var dbc = await U3Adbfactory.CreateDbContextAsync();
        {
            asAt = dbc.GetLocalTime().ToString(constants.STD_DATETIME_FORMAT);
            currentTerm = await BusinessRule.CurrentTermAsync(dbc);
            people = await BusinessRule.SelectablePersonsAsync(dbc, currentTerm);
            service = await MemberFeeCalculationService.CreateAsync(dbc, currentTerm);
        }
        var peopleWithFinancialStatus = service.PeopleWithFinancialStatus.OrderBy(x => x.FullName).ToList(); ;
        switch (ReportName)
        {
            case "MemberFinancialReport":
                report = new MemberFinancialReport();
                report.Parameters["prmAsAt"].Value = asAt;
                report.DataSource = await GetFeeSummary(people, service);
                break;
            case "TrialBalanceReport":
                report = new TrialBalanceReport();
                report.Parameters["prmAsAt"].Value = asAt;
                report.DataSource = await GetTransactionDetail(people,service);
                report.FilterString = $"[FinancialTo] >= {currentTerm.Year}";
                break;
            case "CourseFeesReport":
                report = new CourseFeesReport();
                report.Parameters["prmAsAt"].Value = asAt;
                report.DataSource = await GetFeeSummary(people, service);
                report.FilterString = "[CourseID] != null";

                break;
        }
        isReady = true;
    }

    private async Task<List<MemberFee>> GetFeeSummary(IEnumerable<Person> people,
        MemberFeeCalculationService service)
    {
        var memberFeesList = new ConcurrentBag<MemberFee>();
        await Parallel.ForEachAsync(people, async (p, _) =>
        {
            service.CalculateFee(p);
            var allocatedFees = service.GetAllocatedMemberFees(p); // fees + unallocated credits
            foreach (var fee in allocatedFees)
            {
                memberFeesList.Add(fee);
            }
        });
        return memberFeesList.ToList();
    }

    private async Task<List<PersonFinancialStatus>> GetTransactionDetail(IEnumerable<Person> people,
        MemberFeeCalculationService service)
    {
        await Parallel.ForEachAsync(people, async (p, _) =>
        {
            service.CalculateFee(p);
        });
        var peopleWithStatus = service.PeopleWithFinancialStatus;
        await Parallel.ForEachAsync(peopleWithStatus, async (p, _) =>
        {
            p.MemberFees = service.GetTransactionDetail(p.PersonBase);
        });

        return peopleWithStatus.OrderBy(x => x.FullName).ToList();
    }

}
